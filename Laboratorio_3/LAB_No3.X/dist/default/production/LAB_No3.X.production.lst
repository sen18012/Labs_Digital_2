

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Feb 12 21:49:08 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text21,local,class=CODE,merge=1,delta=2
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 2.20
    38                           ; Generated 12/02/2020 GMT
    39                           ; 
    40                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F887 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0008                     	;# 
    80  0009                     	;# 
    81  000A                     	;# 
    82  000B                     	;# 
    83  000C                     	;# 
    84  000D                     	;# 
    85  000E                     	;# 
    86  000E                     	;# 
    87  000F                     	;# 
    88  0010                     	;# 
    89  0011                     	;# 
    90  0012                     	;# 
    91  0013                     	;# 
    92  0014                     	;# 
    93  0015                     	;# 
    94  0015                     	;# 
    95  0016                     	;# 
    96  0017                     	;# 
    97  0018                     	;# 
    98  0019                     	;# 
    99  001A                     	;# 
   100  001B                     	;# 
   101  001B                     	;# 
   102  001C                     	;# 
   103  001D                     	;# 
   104  001E                     	;# 
   105  001F                     	;# 
   106  0081                     	;# 
   107  0085                     	;# 
   108  0086                     	;# 
   109  0087                     	;# 
   110  0088                     	;# 
   111  0089                     	;# 
   112  008C                     	;# 
   113  008D                     	;# 
   114  008E                     	;# 
   115  008F                     	;# 
   116  0090                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0095                     	;# 
   124  0096                     	;# 
   125  0097                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  0105                     	;# 
   135  0107                     	;# 
   136  0108                     	;# 
   137  0109                     	;# 
   138  010C                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010E                     	;# 
   142  010F                     	;# 
   143  0185                     	;# 
   144  0187                     	;# 
   145  0188                     	;# 
   146  0189                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0008                     	;# 
   158  0009                     	;# 
   159  000A                     	;# 
   160  000B                     	;# 
   161  000C                     	;# 
   162  000D                     	;# 
   163  000E                     	;# 
   164  000E                     	;# 
   165  000F                     	;# 
   166  0010                     	;# 
   167  0011                     	;# 
   168  0012                     	;# 
   169  0013                     	;# 
   170  0014                     	;# 
   171  0015                     	;# 
   172  0015                     	;# 
   173  0016                     	;# 
   174  0017                     	;# 
   175  0018                     	;# 
   176  0019                     	;# 
   177  001A                     	;# 
   178  001B                     	;# 
   179  001B                     	;# 
   180  001C                     	;# 
   181  001D                     	;# 
   182  001E                     	;# 
   183  001F                     	;# 
   184  0081                     	;# 
   185  0085                     	;# 
   186  0086                     	;# 
   187  0087                     	;# 
   188  0088                     	;# 
   189  0089                     	;# 
   190  008C                     	;# 
   191  008D                     	;# 
   192  008E                     	;# 
   193  008F                     	;# 
   194  0090                     	;# 
   195  0091                     	;# 
   196  0092                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0093                     	;# 
   200  0094                     	;# 
   201  0095                     	;# 
   202  0096                     	;# 
   203  0097                     	;# 
   204  0098                     	;# 
   205  0099                     	;# 
   206  009A                     	;# 
   207  009B                     	;# 
   208  009C                     	;# 
   209  009D                     	;# 
   210  009E                     	;# 
   211  009F                     	;# 
   212  0105                     	;# 
   213  0107                     	;# 
   214  0108                     	;# 
   215  0109                     	;# 
   216  010C                     	;# 
   217  010C                     	;# 
   218  010D                     	;# 
   219  010E                     	;# 
   220  010F                     	;# 
   221  0185                     	;# 
   222  0187                     	;# 
   223  0188                     	;# 
   224  0189                     	;# 
   225  018C                     	;# 
   226  018D                     	;# 
   227  0000                     	;# 
   228  0001                     	;# 
   229  0002                     	;# 
   230  0003                     	;# 
   231  0004                     	;# 
   232  0005                     	;# 
   233  0006                     	;# 
   234  0007                     	;# 
   235  0008                     	;# 
   236  0009                     	;# 
   237  000A                     	;# 
   238  000B                     	;# 
   239  000C                     	;# 
   240  000D                     	;# 
   241  000E                     	;# 
   242  000E                     	;# 
   243  000F                     	;# 
   244  0010                     	;# 
   245  0011                     	;# 
   246  0012                     	;# 
   247  0013                     	;# 
   248  0014                     	;# 
   249  0015                     	;# 
   250  0015                     	;# 
   251  0016                     	;# 
   252  0017                     	;# 
   253  0018                     	;# 
   254  0019                     	;# 
   255  001A                     	;# 
   256  001B                     	;# 
   257  001B                     	;# 
   258  001C                     	;# 
   259  001D                     	;# 
   260  001E                     	;# 
   261  001F                     	;# 
   262  0081                     	;# 
   263  0085                     	;# 
   264  0086                     	;# 
   265  0087                     	;# 
   266  0088                     	;# 
   267  0089                     	;# 
   268  008C                     	;# 
   269  008D                     	;# 
   270  008E                     	;# 
   271  008F                     	;# 
   272  0090                     	;# 
   273  0091                     	;# 
   274  0092                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0093                     	;# 
   278  0094                     	;# 
   279  0095                     	;# 
   280  0096                     	;# 
   281  0097                     	;# 
   282  0098                     	;# 
   283  0099                     	;# 
   284  009A                     	;# 
   285  009B                     	;# 
   286  009C                     	;# 
   287  009D                     	;# 
   288  009E                     	;# 
   289  009F                     	;# 
   290  0105                     	;# 
   291  0107                     	;# 
   292  0108                     	;# 
   293  0109                     	;# 
   294  010C                     	;# 
   295  010C                     	;# 
   296  010D                     	;# 
   297  010E                     	;# 
   298  010F                     	;# 
   299  0185                     	;# 
   300  0187                     	;# 
   301  0188                     	;# 
   302  0189                     	;# 
   303  018C                     	;# 
   304  018D                     	;# 
   305  0000                     	;# 
   306  0001                     	;# 
   307  0002                     	;# 
   308  0003                     	;# 
   309  0004                     	;# 
   310  0005                     	;# 
   311  0006                     	;# 
   312  0007                     	;# 
   313  0008                     	;# 
   314  0009                     	;# 
   315  000A                     	;# 
   316  000B                     	;# 
   317  000C                     	;# 
   318  000D                     	;# 
   319  000E                     	;# 
   320  000E                     	;# 
   321  000F                     	;# 
   322  0010                     	;# 
   323  0011                     	;# 
   324  0012                     	;# 
   325  0013                     	;# 
   326  0014                     	;# 
   327  0015                     	;# 
   328  0015                     	;# 
   329  0016                     	;# 
   330  0017                     	;# 
   331  0018                     	;# 
   332  0019                     	;# 
   333  001A                     	;# 
   334  001B                     	;# 
   335  001B                     	;# 
   336  001C                     	;# 
   337  001D                     	;# 
   338  001E                     	;# 
   339  001F                     	;# 
   340  0081                     	;# 
   341  0085                     	;# 
   342  0086                     	;# 
   343  0087                     	;# 
   344  0088                     	;# 
   345  0089                     	;# 
   346  008C                     	;# 
   347  008D                     	;# 
   348  008E                     	;# 
   349  008F                     	;# 
   350  0090                     	;# 
   351  0091                     	;# 
   352  0092                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0093                     	;# 
   356  0094                     	;# 
   357  0095                     	;# 
   358  0096                     	;# 
   359  0097                     	;# 
   360  0098                     	;# 
   361  0099                     	;# 
   362  009A                     	;# 
   363  009B                     	;# 
   364  009C                     	;# 
   365  009D                     	;# 
   366  009E                     	;# 
   367  009F                     	;# 
   368  0105                     	;# 
   369  0107                     	;# 
   370  0108                     	;# 
   371  0109                     	;# 
   372  010C                     	;# 
   373  010C                     	;# 
   374  010D                     	;# 
   375  010E                     	;# 
   376  010F                     	;# 
   377  0185                     	;# 
   378  0187                     	;# 
   379  0188                     	;# 
   380  0189                     	;# 
   381  018C                     	;# 
   382  018D                     	;# 
   383  0000                     	;# 
   384  0001                     	;# 
   385  0002                     	;# 
   386  0003                     	;# 
   387  0004                     	;# 
   388  0005                     	;# 
   389  0006                     	;# 
   390  0007                     	;# 
   391  0008                     	;# 
   392  0009                     	;# 
   393  000A                     	;# 
   394  000B                     	;# 
   395  000C                     	;# 
   396  000D                     	;# 
   397  000E                     	;# 
   398  000E                     	;# 
   399  000F                     	;# 
   400  0010                     	;# 
   401  0011                     	;# 
   402  0012                     	;# 
   403  0013                     	;# 
   404  0014                     	;# 
   405  0015                     	;# 
   406  0015                     	;# 
   407  0016                     	;# 
   408  0017                     	;# 
   409  0018                     	;# 
   410  0019                     	;# 
   411  001A                     	;# 
   412  001B                     	;# 
   413  001B                     	;# 
   414  001C                     	;# 
   415  001D                     	;# 
   416  001E                     	;# 
   417  001F                     	;# 
   418  0081                     	;# 
   419  0085                     	;# 
   420  0086                     	;# 
   421  0087                     	;# 
   422  0088                     	;# 
   423  0089                     	;# 
   424  008C                     	;# 
   425  008D                     	;# 
   426  008E                     	;# 
   427  008F                     	;# 
   428  0090                     	;# 
   429  0091                     	;# 
   430  0092                     	;# 
   431  0093                     	;# 
   432  0093                     	;# 
   433  0093                     	;# 
   434  0094                     	;# 
   435  0095                     	;# 
   436  0096                     	;# 
   437  0097                     	;# 
   438  0098                     	;# 
   439  0099                     	;# 
   440  009A                     	;# 
   441  009B                     	;# 
   442  009C                     	;# 
   443  009D                     	;# 
   444  009E                     	;# 
   445  009F                     	;# 
   446  0105                     	;# 
   447  0107                     	;# 
   448  0108                     	;# 
   449  0109                     	;# 
   450  010C                     	;# 
   451  010C                     	;# 
   452  010D                     	;# 
   453  010E                     	;# 
   454  010F                     	;# 
   455  0185                     	;# 
   456  0187                     	;# 
   457  0188                     	;# 
   458  0189                     	;# 
   459  018C                     	;# 
   460  018D                     	;# 
   461                           
   462                           	psect	strings
   463  03A9                     __pstrings:
   464  03A9                     stringtab:
   465  03A9                     __stringtab:
   466                           
   467                           ;	String table - string pointers are 1 byte each
   468  03A9  1BFF               	btfsc	btemp+1,7
   469  03AA  2BB3               	ljmp	stringcode
   470  03AB  1383               	bcf	3,7
   471  03AC  187F               	btfsc	btemp+1,0
   472  03AD  1783               	bsf	3,7
   473  03AE  0800               	movf	0,w
   474  03AF  0A84               	incf	4,f
   475  03B0  1903               	skipnz
   476  03B1  0AFF               	incf	btemp+1,f
   477  03B2  0008               	return
   478  03B3                     stringcode:
   479  03B3                     stringdir:
   480  03B3  3003               	movlw	high stringdir
   481  03B4  008A               	movwf	10
   482  03B5  0804               	movf	4,w
   483  03B6  0A84               	incf	4,f
   484  03B7  0782               	addwf	2,f
   485  03B8                     __stringbase:
   486  03B8  3400               	retlw	0
   487  03B9                     __end_of__stringtab:
   488  03B9                     _dpowers:
   489  03B9  3401               	retlw	1
   490  03BA  3400               	retlw	0
   491  03BB  340A               	retlw	10
   492  03BC  3400               	retlw	0
   493  03BD  3464               	retlw	100
   494  03BE  3400               	retlw	0
   495  03BF  34E8               	retlw	232
   496  03C0  3403               	retlw	3
   497  03C1  3410               	retlw	16
   498  03C2  3427               	retlw	39
   499  03C3                     __end_of_dpowers:
   500  001A                     _RCREG	set	26
   501  0019                     _TXREG	set	25
   502  001E                     _ADRESH	set	30
   503  001F                     _ADCON0bits	set	31
   504  0018                     _RCSTAbits	set	24
   505  000B                     _INTCONbits	set	11
   506  000B                     _INTCON	set	11
   507  000C                     _PIR1bits	set	12
   508  0009                     _PORTE	set	9
   509  0008                     _PORTD	set	8
   510  0007                     _PORTC	set	7
   511  0006                     _PORTB	set	6
   512  0005                     _PORTA	set	5
   513  0049                     _RE1	set	73
   514  0048                     _RE0	set	72
   515  0065                     _RCIF	set	101
   516  009E                     _ADRESL	set	158
   517  0098                     _TXSTAbits	set	152
   518  0099                     _SPBRG	set	153
   519  0081                     _OPTION_REG	set	129
   520  008C                     _PIE1bits	set	140
   521  009F                     _ADCON1	set	159
   522  0089                     _TRISE	set	137
   523  0087                     _TRISC	set	135
   524  0086                     _TRISB	set	134
   525  0085                     _TRISA	set	133
   526  0088                     _TRISD	set	136
   527  04C1                     _TRMT	set	1217
   528  0189                     _ANSELH	set	393
   529  0188                     _ANSEL	set	392
   530  03C3                     STR_5:
   531  03C3  3425               	retlw	37	;'%'
   532  03C4  3464               	retlw	100	;'d'
   533  03C5  3456               	retlw	86	;'V'
   534  03C6  3420               	retlw	32	;' '
   535  03C7  3420               	retlw	32	;' '
   536  03C8  3420               	retlw	32	;' '
   537  03C9  3425               	retlw	37	;'%'
   538  03CA  3464               	retlw	100	;'d'
   539  03CB  3456               	retlw	86	;'V'
   540  03CC  3420               	retlw	32	;' '
   541  03CD  3420               	retlw	32	;' '
   542  03CE  3420               	retlw	32	;' '
   543  03CF  3420               	retlw	32	;' '
   544  03D0  3425               	retlw	37	;'%'
   545  03D1  3464               	retlw	100	;'d'
   546  03D2  3400               	retlw	0
   547  03D3                     STR_4:
   548  03D3  3425               	retlw	37	;'%'
   549  03D4  3464               	retlw	100	;'d'
   550  03D5  3456               	retlw	86	;'V'
   551  03D6  3420               	retlw	32	;' '
   552  03D7  3420               	retlw	32	;' '
   553  03D8  3420               	retlw	32	;' '
   554  03D9  3425               	retlw	37	;'%'
   555  03DA  3464               	retlw	100	;'d'
   556  03DB  3456               	retlw	86	;'V'
   557  03DC  3420               	retlw	32	;' '
   558  03DD  3420               	retlw	32	;' '
   559  03DE  3420               	retlw	32	;' '
   560  03DF  3425               	retlw	37	;'%'
   561  03E0  3464               	retlw	100	;'d'
   562  03E1  3400               	retlw	0
   563  03E2                     STR_1:
   564  03E2  3453               	retlw	83	;'S'
   565  03E3  3431               	retlw	49	;'1'
   566  03E4  343A               	retlw	58	;':'
   567  03E5  3400               	retlw	0
   568  03E6                     STR_2:
   569  03E6  3453               	retlw	83	;'S'
   570  03E7  3432               	retlw	50	;'2'
   571  03E8  343A               	retlw	58	;':'
   572  03E9  3400               	retlw	0
   573  03EA                     STR_3:
   574  03EA  3453               	retlw	83	;'S'
   575  03EB  3433               	retlw	51	;'3'
   576  03EC  343A               	retlw	58	;':'
   577  03ED  3400               	retlw	0
   578                           
   579                           	psect	cinit
   580  000F                     start_initialization:	
   581                           ; #config settings
   582                           
   583  000F                     __initialization:
   584                           
   585                           ; Clear objects allocated to COMMON
   586  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   587  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   588  0011  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   589                           
   590                           ; Clear objects allocated to BANK0
   591  0012  1383               	bcf	3,7	;select IRP bank0
   592  0013  3020               	movlw	low __pbssBANK0
   593  0014  0084               	movwf	4
   594  0015  304C               	movlw	low (__pbssBANK0+44)
   595  0016  120A  118A  256C  120A  118A  	fcall	clear_ram0
   596  001B                     end_of_initialization:	
   597                           ;End of C runtime variable initialization code
   598                           
   599  001B                     __end_of__initialization:
   600  001B  0183               	clrf	3
   601  001C  120A  118A  2909   	ljmp	_main	;jump to C main() function
   602                           
   603                           	psect	bssCOMMON
   604  0078                     __pbssCOMMON:
   605  0078                     _USART_LEER:
   606  0078                     	ds	1
   607  0079                     _ADC_res2:
   608  0079                     	ds	1
   609  007A                     _ADC_res1:
   610  007A                     	ds	1
   611                           
   612                           	psect	bssBANK0
   613  0020                     __pbssBANK0:
   614  0020                     _channel:
   615  0020                     	ds	2
   616  0022                     _VAL2:
   617  0022                     	ds	2
   618  0024                     _VAL1:
   619  0024                     	ds	2
   620  0026                     _VALOR_ADC:
   621  0026                     	ds	1
   622  0027                     _cont:
   623  0027                     	ds	1
   624  0028                     _data1:
   625  0028                     	ds	20
   626  003C                     _data2:
   627  003C                     	ds	16
   628                           
   629                           	psect	clrtext
   630  056C                     clear_ram0:	
   631                           ;	Called with FSR containing the base address, and
   632                           ;	W with the last address+1
   633                           
   634  056C  0064               	clrwdt	;clear the watchdog before getting into this loop
   635  056D                     clrloop0:
   636  056D  0180               	clrf	0	;clear RAM location pointed to by FSR
   637  056E  0A84               	incf	4,f	;increment pointer
   638  056F  0604               	xorwf	4,w	;XOR with final address
   639  0570  1903               	btfsc	3,2	;have we reached the end yet?
   640  0571  3400               	retlw	0	;all done for this memory range, return
   641  0572  0604               	xorwf	4,w	;XOR again to restore value
   642  0573  2D6D               	goto	clrloop0	;do the next byte
   643                           
   644                           	psect	cstackCOMMON
   645  0070                     __pcstackCOMMON:
   646  0070                     ?_USART_LECTURA:
   647  0070                     ??_USART_LECTURA:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  0070                     ?_setup:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  0070                     ?_Lcd_Init:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  0070                     ?_Lcd_Clear:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  0070                     ?_ADC_CH0:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  0070                     ?_ADC_CH1:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_USART_STRING:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_USART_ESCRITURA:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_ISR:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ??_ISR:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?_main:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_Lcd_Port:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0070                     ?_Lcd_Cmd:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ?_Lcd_Write_Char:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ADC_val@ADRES_L:	
   690                           ; 1 bytes @ 0x0
   691                           
   692                           
   693                           ; 1 bytes @ 0x0
   694  0070                     	ds	3
   695  0073                     ??_setup:
   696  0073                     ??_USART_ESCRITURA:	
   697                           ; 1 bytes @ 0x3
   698                           
   699  0073                     ?_ADC_val:	
   700                           ; 1 bytes @ 0x3
   701                           
   702  0073                     ??_Lcd_Port:	
   703                           ; 1 bytes @ 0x3
   704                           
   705  0073                     ?_ADC_ch:	
   706                           ; 1 bytes @ 0x3
   707                           
   708  0073                     ?___wmul:	
   709                           ; 2 bytes @ 0x3
   710                           
   711  0073                     ?___lwdiv:	
   712                           ; 2 bytes @ 0x3
   713                           
   714  0073                     ADC_val@ADRES_H:	
   715                           ; 2 bytes @ 0x3
   716                           
   717  0073                     Lcd_Port@a:	
   718                           ; 1 bytes @ 0x3
   719                           
   720  0073                     USART_ESCRITURA@a:	
   721                           ; 1 bytes @ 0x3
   722                           
   723  0073                     ADC_ch@channel:	
   724                           ; 1 bytes @ 0x3
   725                           
   726  0073                     ___wmul@multiplier:	
   727                           ; 2 bytes @ 0x3
   728                           
   729  0073                     ___lwdiv@divisor:	
   730                           ; 2 bytes @ 0x3
   731                           
   732                           
   733                           ; 2 bytes @ 0x3
   734  0073                     	ds	1
   735  0074                     ??_USART_STRING:
   736  0074                     ??_ADC_val:	
   737                           ; 1 bytes @ 0x4
   738                           
   739  0074                     ??_Lcd_Cmd:	
   740                           ; 1 bytes @ 0x4
   741                           
   742  0074                     ??_Lcd_Write_Char:	
   743                           ; 1 bytes @ 0x4
   744                           
   745                           
   746                           ; 1 bytes @ 0x4
   747  0074                     	ds	1
   748  0075                     ??_ADC_ch:
   749  0075                     Lcd_Write_Char@a:	
   750                           ; 1 bytes @ 0x5
   751                           
   752  0075                     USART_STRING@a:	
   753                           ; 1 bytes @ 0x5
   754                           
   755  0075                     ___wmul@multiplicand:	
   756                           ; 1 bytes @ 0x5
   757                           
   758  0075                     ___lwdiv@dividend:	
   759                           ; 2 bytes @ 0x5
   760                           
   761                           
   762                           ; 2 bytes @ 0x5
   763  0075                     	ds	1
   764  0076                     ?_Lcd_Write_String:
   765  0076                     Lcd_Cmd@a:	
   766                           ; 1 bytes @ 0x6
   767                           
   768  0076                     USART_STRING@i:	
   769                           ; 1 bytes @ 0x6
   770                           
   771  0076                     Lcd_Write_String@a:	
   772                           ; 1 bytes @ 0x6
   773                           
   774                           
   775                           ; 2 bytes @ 0x6
   776  0076                     	ds	1
   777  0077                     ??_Lcd_Clear:
   778  0077                     ?_Lcd_Set_Cursor:	
   779                           ; 1 bytes @ 0x7
   780                           
   781  0077                     ??___wmul:	
   782                           ; 1 bytes @ 0x7
   783                           
   784  0077                     ??___awdiv:	
   785                           ; 1 bytes @ 0x7
   786                           
   787  0077                     ??___lwdiv:	
   788                           ; 1 bytes @ 0x7
   789                           
   790  0077                     Lcd_Set_Cursor@b:	
   791                           ; 1 bytes @ 0x7
   792                           
   793                           
   794                           ; 1 bytes @ 0x7
   795  0077                     	ds	1
   796                           
   797                           	psect	cstackBANK0
   798  004C                     __pcstackBANK0:
   799  004C                     ??_Lcd_Init:
   800  004C                     ??_Lcd_Set_Cursor:	
   801                           ; 1 bytes @ 0x0
   802                           
   803  004C                     ??_Lcd_Write_String:	
   804                           ; 1 bytes @ 0x0
   805                           
   806  004C                     ___lwdiv@counter:	
   807                           ; 1 bytes @ 0x0
   808                           
   809  004C                     ___wmul@product:	
   810                           ; 1 bytes @ 0x0
   811                           
   812                           
   813                           ; 2 bytes @ 0x0
   814  004C                     	ds	1
   815  004D                     Lcd_Set_Cursor@a:
   816  004D                     ___lwdiv@quotient:	
   817                           ; 1 bytes @ 0x1
   818                           
   819                           
   820                           ; 2 bytes @ 0x1
   821  004D                     	ds	1
   822  004E                     ?___awdiv:
   823  004E                     Lcd_Set_Cursor@temp:	
   824                           ; 2 bytes @ 0x2
   825                           
   826  004E                     ___awdiv@divisor:	
   827                           ; 1 bytes @ 0x2
   828                           
   829                           
   830                           ; 2 bytes @ 0x2
   831  004E                     	ds	1
   832  004F                     ?___lwmod:
   833  004F                     Lcd_Write_String@i:	
   834                           ; 2 bytes @ 0x3
   835                           
   836  004F                     ___lwmod@divisor:	
   837                           ; 2 bytes @ 0x3
   838                           
   839                           
   840                           ; 2 bytes @ 0x3
   841  004F                     	ds	1
   842  0050                     ___awdiv@dividend:
   843                           
   844                           ; 2 bytes @ 0x4
   845  0050                     	ds	1
   846  0051                     ___lwmod@dividend:
   847                           
   848                           ; 2 bytes @ 0x5
   849  0051                     	ds	1
   850  0052                     ___awdiv@counter:
   851                           
   852                           ; 1 bytes @ 0x6
   853  0052                     	ds	1
   854  0053                     ??___lwmod:
   855  0053                     ___awdiv@sign:	
   856                           ; 1 bytes @ 0x7
   857                           
   858                           
   859                           ; 1 bytes @ 0x7
   860  0053                     	ds	1
   861  0054                     ___lwmod@counter:
   862  0054                     ___awdiv@quotient:	
   863                           ; 1 bytes @ 0x8
   864                           
   865                           
   866                           ; 2 bytes @ 0x8
   867  0054                     	ds	1
   868  0055                     ?_sprintf:
   869  0055                     sprintf@f:	
   870                           ; 2 bytes @ 0x9
   871                           
   872                           
   873                           ; 1 bytes @ 0x9
   874  0055                     	ds	1
   875  0056                     ??_ADC_CH0:
   876  0056                     ??_ADC_CH1:	
   877                           ; 1 bytes @ 0xA
   878                           
   879                           
   880                           ; 1 bytes @ 0xA
   881  0056                     	ds	6
   882  005C                     ??_sprintf:
   883                           
   884                           ; 1 bytes @ 0x10
   885  005C                     	ds	3
   886  005F                     sprintf@ap:
   887                           
   888                           ; 1 bytes @ 0x13
   889  005F                     	ds	1
   890  0060                     sprintf@flag:
   891                           
   892                           ; 1 bytes @ 0x14
   893  0060                     	ds	1
   894  0061                     sprintf@prec:
   895                           
   896                           ; 1 bytes @ 0x15
   897  0061                     	ds	1
   898  0062                     sprintf@val:
   899                           
   900                           ; 2 bytes @ 0x16
   901  0062                     	ds	2
   902  0064                     sprintf@sp:
   903                           
   904                           ; 1 bytes @ 0x18
   905  0064                     	ds	1
   906  0065                     sprintf@c:
   907                           
   908                           ; 1 bytes @ 0x19
   909  0065                     	ds	1
   910  0066                     ??_main:
   911                           
   912                           ; 1 bytes @ 0x1A
   913  0066                     	ds	3
   914                           
   915                           	psect	maintext
   916  0109                     __pmaintext:	
   917 ;;
   918 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   919 ;;
   920 ;; *************** function _main *****************
   921 ;; Defined at:
   922 ;;		line 96 in file "main.c"
   923 ;; Parameters:    Size  Location     Type
   924 ;;		None
   925 ;; Auto vars:     Size  Location     Type
   926 ;;		None
   927 ;; Return value:  Size  Location     Type
   928 ;;                  1    wreg      void 
   929 ;; Registers used:
   930 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   931 ;; Tracked objects:
   932 ;;		On entry : B00/0
   933 ;;		On exit  : 0/0
   934 ;;		Unchanged: 0/0
   935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   936 ;;      Params:         0       0       0       0       0
   937 ;;      Locals:         0       0       0       0       0
   938 ;;      Temps:          0       3       0       0       0
   939 ;;      Totals:         0       3       0       0       0
   940 ;;Total ram usage:        3 bytes
   941 ;; Hardware stack levels required when called:    5
   942 ;; This function calls:
   943 ;;		_ADC_CH0
   944 ;;		_ADC_CH1
   945 ;;		_Lcd_Clear
   946 ;;		_Lcd_Init
   947 ;;		_Lcd_Set_Cursor
   948 ;;		_Lcd_Write_String
   949 ;;		_USART_ESCRITURA
   950 ;;		_USART_STRING
   951 ;;		_setup
   952 ;;		_sprintf
   953 ;; This function is called by:
   954 ;;		Startup code after reset
   955 ;; This function uses a non-reentrant model
   956 ;;
   957                           
   958                           
   959                           ;psect for function _main
   960  0109                     _main:
   961  0109                     l1860:	
   962                           ;incstack = 0
   963                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   964                           
   965                           
   966                           ;main.c: 97:     setup();
   967  0109  120A  118A  242A  120A  118A  	fcall	_setup
   968  010E                     l1862:
   969                           
   970                           ;main.c: 99:     TRISD = 0x00;
   971  010E  1683               	bsf	3,5	;RP0=1, select bank1
   972  010F  1303               	bcf	3,6	;RP1=0, select bank1
   973  0110  0188               	clrf	8	;volatile
   974  0111                     l1864:
   975                           
   976                           ;main.c: 100:     Lcd_Init();
   977  0111  120A  118A  22CD  120A  118A  	fcall	_Lcd_Init
   978  0116                     l1866:
   979                           
   980                           ;main.c: 102:     Lcd_Clear();
   981  0116  120A  118A  2553  120A  118A  	fcall	_Lcd_Clear
   982  011B                     l1868:
   983                           
   984                           ;main.c: 103:     Lcd_Set_Cursor(1, 1);
   985  011B  01F7               	clrf	Lcd_Set_Cursor@b
   986  011C  0AF7               	incf	Lcd_Set_Cursor@b,f
   987  011D  3001               	movlw	1
   988  011E  120A  118A  24BB  120A  118A  	fcall	_Lcd_Set_Cursor
   989  0123                     l1870:
   990                           
   991                           ;main.c: 104:     Lcd_Write_String("S1:");
   992  0123  302A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   993  0124  00F6               	movwf	Lcd_Write_String@a
   994  0125  3080               	movlw	128
   995  0126  00F7               	movwf	Lcd_Write_String@a+1
   996  0127  120A  118A  2363  120A  118A  	fcall	_Lcd_Write_String
   997  012C                     l1872:
   998                           
   999                           ;main.c: 105:     Lcd_Set_Cursor(1, 7);
  1000  012C  3007               	movlw	7
  1001  012D  1283               	bcf	3,5	;RP0=0, select bank0
  1002  012E  1303               	bcf	3,6	;RP1=0, select bank0
  1003  012F  00E6               	movwf	??_main
  1004  0130  0866               	movf	??_main,w
  1005  0131  00F7               	movwf	Lcd_Set_Cursor@b
  1006  0132  3001               	movlw	1
  1007  0133  120A  118A  24BB  120A  118A  	fcall	_Lcd_Set_Cursor
  1008  0138                     l1874:
  1009                           
  1010                           ;main.c: 106:     Lcd_Write_String("S2:");
  1011  0138  302E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1012  0139  00F6               	movwf	Lcd_Write_String@a
  1013  013A  3080               	movlw	128
  1014  013B  00F7               	movwf	Lcd_Write_String@a+1
  1015  013C  120A  118A  2363  120A  118A  	fcall	_Lcd_Write_String
  1016  0141                     l1876:
  1017                           
  1018                           ;main.c: 107:     Lcd_Set_Cursor(1, 14);
  1019  0141  300E               	movlw	14
  1020  0142  1283               	bcf	3,5	;RP0=0, select bank0
  1021  0143  1303               	bcf	3,6	;RP1=0, select bank0
  1022  0144  00E6               	movwf	??_main
  1023  0145  0866               	movf	??_main,w
  1024  0146  00F7               	movwf	Lcd_Set_Cursor@b
  1025  0147  3001               	movlw	1
  1026  0148  120A  118A  24BB  120A  118A  	fcall	_Lcd_Set_Cursor
  1027  014D                     l1878:
  1028                           
  1029                           ;main.c: 108:     Lcd_Write_String("S3:");
  1030  014D  3032               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1031  014E  00F6               	movwf	Lcd_Write_String@a
  1032  014F  3080               	movlw	128
  1033  0150  00F7               	movwf	Lcd_Write_String@a+1
  1034  0151  120A  118A  2363  120A  118A  	fcall	_Lcd_Write_String
  1035  0156                     l1880:
  1036                           
  1037                           ;main.c: 110:         ADC_CH0();
  1038  0156  120A  118A  227A  120A  118A  	fcall	_ADC_CH0
  1039  015B                     l1882:
  1040                           
  1041                           ;main.c: 111:         ADC_CH1();
  1042  015B  120A  118A  2226  120A  118A  	fcall	_ADC_CH1
  1043  0160                     l1884:
  1044                           
  1045                           ;main.c: 114:         sprintf(data1, "%dV   %dV   %d", VAL1, VAL2, cont);
  1046  0160  301B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1047  0161  1283               	bcf	3,5	;RP0=0, select bank0
  1048  0162  1303               	bcf	3,6	;RP1=0, select bank0
  1049  0163  00E6               	movwf	??_main
  1050  0164  0866               	movf	??_main,w
  1051  0165  00D5               	movwf	sprintf@f
  1052  0166  0825               	movf	_VAL1+1,w
  1053  0167  00D7               	movwf	?_sprintf+2
  1054  0168  0824               	movf	_VAL1,w
  1055  0169  00D6               	movwf	?_sprintf+1
  1056  016A  0823               	movf	_VAL2+1,w
  1057  016B  00D9               	movwf	?_sprintf+4
  1058  016C  0822               	movf	_VAL2,w
  1059  016D  00D8               	movwf	?_sprintf+3
  1060  016E  0827               	movf	_cont,w
  1061  016F  00E7               	movwf	??_main+1
  1062  0170  01E8               	clrf	??_main+2
  1063  0171  0867               	movf	??_main+1,w
  1064  0172  00DA               	movwf	?_sprintf+5
  1065  0173  0868               	movf	??_main+2,w
  1066  0174  00DB               	movwf	?_sprintf+6
  1067  0175  3028               	movlw	(low (_data1| 0))& (0+255)
  1068  0176  120A  118A  201F  120A  118A  	fcall	_sprintf
  1069  017B                     l1886:
  1070                           
  1071                           ;main.c: 115:         USART_STRING(data1);
  1072  017B  3028               	movlw	(low (_data1| 0))& (0+255)
  1073  017C  120A  118A  2505  120A  118A  	fcall	_USART_STRING
  1074  0181                     l1888:
  1075                           
  1076                           ;main.c: 116:         USART_ESCRITURA(13);
  1077  0181  300D               	movlw	13
  1078  0182  120A  118A  2560  120A  118A  	fcall	_USART_ESCRITURA
  1079  0187                     l1890:
  1080                           
  1081                           ;main.c: 117:         USART_ESCRITURA(10);
  1082  0187  300A               	movlw	10
  1083  0188  120A  118A  2560  120A  118A  	fcall	_USART_ESCRITURA
  1084  018D                     l1892:
  1085                           
  1086                           ;main.c: 119:         sprintf(data2, "%dV   %dV    %d", VAL1, VAL2, cont);
  1087  018D  300B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1088  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1089  018F  1303               	bcf	3,6	;RP1=0, select bank0
  1090  0190  00E6               	movwf	??_main
  1091  0191  0866               	movf	??_main,w
  1092  0192  00D5               	movwf	sprintf@f
  1093  0193  0825               	movf	_VAL1+1,w
  1094  0194  00D7               	movwf	?_sprintf+2
  1095  0195  0824               	movf	_VAL1,w
  1096  0196  00D6               	movwf	?_sprintf+1
  1097  0197  0823               	movf	_VAL2+1,w
  1098  0198  00D9               	movwf	?_sprintf+4
  1099  0199  0822               	movf	_VAL2,w
  1100  019A  00D8               	movwf	?_sprintf+3
  1101  019B  0827               	movf	_cont,w
  1102  019C  00E7               	movwf	??_main+1
  1103  019D  01E8               	clrf	??_main+2
  1104  019E  0867               	movf	??_main+1,w
  1105  019F  00DA               	movwf	?_sprintf+5
  1106  01A0  0868               	movf	??_main+2,w
  1107  01A1  00DB               	movwf	?_sprintf+6
  1108  01A2  303C               	movlw	(low (_data2| 0))& (0+255)
  1109  01A3  120A  118A  201F  120A  118A  	fcall	_sprintf
  1110  01A8                     l1894:
  1111                           
  1112                           ;main.c: 120:         Lcd_Set_Cursor(2, 1);
  1113  01A8  01F7               	clrf	Lcd_Set_Cursor@b
  1114  01A9  0AF7               	incf	Lcd_Set_Cursor@b,f
  1115  01AA  3002               	movlw	2
  1116  01AB  120A  118A  24BB  120A  118A  	fcall	_Lcd_Set_Cursor
  1117  01B0                     l1896:
  1118                           
  1119                           ;main.c: 121:         Lcd_Write_String(data2);
  1120  01B0  303C               	movlw	(low (_data2| 0))& (0+255)
  1121  01B1  00F6               	movwf	Lcd_Write_String@a
  1122  01B2  3000               	movlw	0
  1123  01B3  00F7               	movwf	Lcd_Write_String@a+1
  1124  01B4  120A  118A  2363  120A  118A  	fcall	_Lcd_Write_String
  1125  01B9  2956               	goto	l1880
  1126  01BA  120A  118A  280C   	ljmp	start
  1127  01BD                     __end_of_main:
  1128                           
  1129                           	psect	text1
  1130  001F                     __ptext1:	
  1131 ;; *************** function _sprintf *****************
  1132 ;; Defined at:
  1133 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;  sp              1    wreg     PTR unsigned char 
  1136 ;;		 -> data2(16), data1(20), 
  1137 ;;  f               1    9[BANK0 ] PTR const unsigned char 
  1138 ;;		 -> STR_5(16), STR_4(15), 
  1139 ;; Auto vars:     Size  Location     Type
  1140 ;;  sp              1   24[BANK0 ] PTR unsigned char 
  1141 ;;		 -> data2(16), data1(20), 
  1142 ;;  tmpval          4    0        struct .
  1143 ;;  val             2   22[BANK0 ] unsigned int 
  1144 ;;  cp              2    0        PTR const unsigned char 
  1145 ;;  len             2    0        unsigned int 
  1146 ;;  c               1   25[BANK0 ] unsigned char 
  1147 ;;  prec            1   21[BANK0 ] char 
  1148 ;;  flag            1   20[BANK0 ] unsigned char 
  1149 ;;  ap              1   19[BANK0 ] PTR void [1]
  1150 ;;		 -> ?_sprintf(2), 
  1151 ;; Return value:  Size  Location     Type
  1152 ;;                  2    9[BANK0 ] int 
  1153 ;; Registers used:
  1154 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1155 ;; Tracked objects:
  1156 ;;		On entry : 0/0
  1157 ;;		On exit  : 0/0
  1158 ;;		Unchanged: 0/0
  1159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1160 ;;      Params:         0       7       0       0       0
  1161 ;;      Locals:         0       7       0       0       0
  1162 ;;      Temps:          0       3       0       0       0
  1163 ;;      Totals:         0      17       0       0       0
  1164 ;;Total ram usage:       17 bytes
  1165 ;; Hardware stack levels used:    1
  1166 ;; Hardware stack levels required when called:    3
  1167 ;; This function calls:
  1168 ;;		___lwdiv
  1169 ;;		___lwmod
  1170 ;; This function is called by:
  1171 ;;		_main
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175                           
  1176                           ;psect for function _sprintf
  1177  001F                     _sprintf:
  1178                           
  1179                           ;incstack = 0
  1180                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1181                           ;sprintf@sp stored from wreg
  1182  001F  1283               	bcf	3,5	;RP0=0, select bank0
  1183  0020  1303               	bcf	3,6	;RP1=0, select bank0
  1184  0021  00E4               	movwf	sprintf@sp
  1185  0022                     l1798:
  1186                           
  1187                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1188  0022  3056               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1189  0023  00DC               	movwf	??_sprintf
  1190  0024  085C               	movf	??_sprintf,w
  1191  0025  00DF               	movwf	sprintf@ap
  1192                           
  1193                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1194  0026  28F2               	goto	l1850
  1195  0027                     l1800:
  1196                           
  1197                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1198  0027  3025               	movlw	37
  1199  0028  0665               	xorwf	sprintf@c,w
  1200  0029  1903               	btfsc	3,2
  1201  002A  282C               	goto	u1131
  1202  002B  282D               	goto	u1130
  1203  002C                     u1131:
  1204  002C  2839               	goto	l1806
  1205  002D                     u1130:
  1206  002D                     l1802:
  1207                           
  1208                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1209  002D  0865               	movf	sprintf@c,w
  1210  002E  00DC               	movwf	??_sprintf
  1211  002F  0864               	movf	sprintf@sp,w
  1212  0030  0084               	movwf	4
  1213  0031  085C               	movf	??_sprintf,w
  1214  0032  1383               	bcf	3,7	;select IRP bank0
  1215  0033  0080               	movwf	0
  1216  0034                     l1804:
  1217  0034  3001               	movlw	1
  1218  0035  00DC               	movwf	??_sprintf
  1219  0036  085C               	movf	??_sprintf,w
  1220  0037  07E4               	addwf	sprintf@sp,f
  1221                           
  1222                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  1223  0038  28F2               	goto	l1850
  1224  0039                     l1806:
  1225                           
  1226                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1227  0039  01E0               	clrf	sprintf@flag
  1228  003A                     l1810:	
  1229                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1230                           
  1231  003A  3001               	movlw	1
  1232  003B  07D5               	addwf	sprintf@f,f
  1233  003C  30FF               	movlw	-1
  1234  003D  0755               	addwf	sprintf@f,w
  1235  003E  0084               	movwf	4
  1236  003F  120A  118A  23B3  120A  118A  	fcall	stringdir
  1237  0044  00E5               	movwf	sprintf@c
  1238  0045  00DC               	movwf	??_sprintf
  1239  0046  01DD               	clrf	??_sprintf+1
  1240                           
  1241                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1242                           ; Switch size 1, requested type "simple"
  1243                           ; Number of cases is 1, Range of values is 0 to 0
  1244                           ; switch strategies available:
  1245                           ; Name         Instructions Cycles
  1246                           ; simple_byte            4     3 (average)
  1247                           ; direct_byte           11     8 (fixed)
  1248                           ; jumptable            260     6 (fixed)
  1249                           ;	Chosen strategy is simple_byte
  1250  0047  085D               	movf	??_sprintf+1,w
  1251  0048  3A00               	xorlw	0	; case 0
  1252  0049  1903               	skipnz
  1253  004A  284C               	goto	l1938
  1254  004B  28F2               	goto	l1850
  1255  004C                     l1938:
  1256                           
  1257                           ; Switch size 1, requested type "simple"
  1258                           ; Number of cases is 3, Range of values is 0 to 105
  1259                           ; switch strategies available:
  1260                           ; Name         Instructions Cycles
  1261                           ; simple_byte           10     6 (average)
  1262                           ; jumptable            260     6 (fixed)
  1263                           ;	Chosen strategy is simple_byte
  1264  004C  085C               	movf	??_sprintf,w
  1265  004D  3A00               	xorlw	0	; case 0
  1266  004E  1903               	skipnz
  1267  004F  2904               	goto	l1852
  1268  0050  3A64               	xorlw	100	; case 100
  1269  0051  1903               	skipnz
  1270  0052  2857               	goto	l1812
  1271  0053  3A0D               	xorlw	13	; case 105
  1272  0054  1903               	skipnz
  1273  0055  2857               	goto	l1812
  1274  0056  28F2               	goto	l1850
  1275  0057                     l1812:
  1276                           
  1277                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1278  0057  085F               	movf	sprintf@ap,w
  1279  0058  0084               	movwf	4
  1280  0059  1383               	bcf	3,7	;select IRP bank0
  1281  005A  0800               	movf	0,w
  1282  005B  00E2               	movwf	sprintf@val
  1283  005C  0A84               	incf	4,f
  1284  005D  0800               	movf	0,w
  1285  005E  00E3               	movwf	sprintf@val+1
  1286  005F                     l1814:
  1287  005F  3002               	movlw	2
  1288  0060  00DC               	movwf	??_sprintf
  1289  0061  085C               	movf	??_sprintf,w
  1290  0062  07DF               	addwf	sprintf@ap,f
  1291  0063                     l1816:
  1292                           
  1293                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1294  0063  1FE3               	btfss	sprintf@val+1,7
  1295  0064  2866               	goto	u1141
  1296  0065  2867               	goto	u1140
  1297  0066                     u1141:
  1298  0066  2870               	goto	l1822
  1299  0067                     u1140:
  1300  0067                     l1818:
  1301                           
  1302                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1303  0067  3003               	movlw	3
  1304  0068  00DC               	movwf	??_sprintf
  1305  0069  085C               	movf	??_sprintf,w
  1306  006A  04E0               	iorwf	sprintf@flag,f
  1307  006B                     l1820:
  1308                           
  1309                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1310  006B  09E2               	comf	sprintf@val,f
  1311  006C  09E3               	comf	sprintf@val+1,f
  1312  006D  0AE2               	incf	sprintf@val,f
  1313  006E  1903               	skipnz
  1314  006F  0AE3               	incf	sprintf@val+1,f
  1315  0070                     l1822:
  1316                           
  1317                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1318  0070  01E5               	clrf	sprintf@c
  1319  0071  0AE5               	incf	sprintf@c,f
  1320  0072                     l1828:
  1321                           
  1322                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1323  0072  0865               	movf	sprintf@c,w
  1324  0073  00DC               	movwf	??_sprintf
  1325  0074  075C               	addwf	??_sprintf,w
  1326  0075  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1327  0076  0084               	movwf	4
  1328  0077  120A  118A  23B3  120A  118A  	fcall	stringdir
  1329  007C  00DD               	movwf	??_sprintf+1
  1330  007D  120A  118A  23B3  120A  118A  	fcall	stringdir
  1331  0082  00DE               	movwf	??_sprintf+2
  1332  0083  085E               	movf	??_sprintf+2,w
  1333  0084  0263               	subwf	sprintf@val+1,w
  1334  0085  1D03               	skipz
  1335  0086  2889               	goto	u1155
  1336  0087  085D               	movf	??_sprintf+1,w
  1337  0088  0262               	subwf	sprintf@val,w
  1338  0089                     u1155:
  1339  0089  1803               	skipnc
  1340  008A  288C               	goto	u1151
  1341  008B  288D               	goto	u1150
  1342  008C                     u1151:
  1343  008C  288E               	goto	l1832
  1344  008D                     u1150:
  1345  008D  2898               	goto	l1834
  1346  008E                     l1832:
  1347  008E  3001               	movlw	1
  1348  008F  00DC               	movwf	??_sprintf
  1349  0090  085C               	movf	??_sprintf,w
  1350  0091  07E5               	addwf	sprintf@c,f
  1351  0092  3005               	movlw	5
  1352  0093  0665               	xorwf	sprintf@c,w
  1353  0094  1D03               	btfss	3,2
  1354  0095  2897               	goto	u1161
  1355  0096  2898               	goto	u1160
  1356  0097                     u1161:
  1357  0097  2872               	goto	l1828
  1358  0098                     u1160:
  1359  0098                     l1834:
  1360                           
  1361                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1362  0098  0860               	movf	sprintf@flag,w
  1363  0099  3903               	andlw	3
  1364  009A  1903               	btfsc	3,2
  1365  009B  289D               	goto	u1171
  1366  009C  289E               	goto	u1170
  1367  009D                     u1171:
  1368  009D  28A9               	goto	l1840
  1369  009E                     u1170:
  1370  009E                     l1836:
  1371                           
  1372                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1373  009E  302D               	movlw	45
  1374  009F  00DC               	movwf	??_sprintf
  1375  00A0  0864               	movf	sprintf@sp,w
  1376  00A1  0084               	movwf	4
  1377  00A2  085C               	movf	??_sprintf,w
  1378  00A3  1383               	bcf	3,7	;select IRP bank0
  1379  00A4  0080               	movwf	0
  1380  00A5                     l1838:
  1381  00A5  3001               	movlw	1
  1382  00A6  00DC               	movwf	??_sprintf
  1383  00A7  085C               	movf	??_sprintf,w
  1384  00A8  07E4               	addwf	sprintf@sp,f
  1385  00A9                     l1840:
  1386                           
  1387                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1388  00A9  0865               	movf	sprintf@c,w
  1389  00AA  00DC               	movwf	??_sprintf
  1390  00AB  085C               	movf	??_sprintf,w
  1391  00AC  00E1               	movwf	sprintf@prec
  1392                           
  1393                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1394  00AD  28E9               	goto	l1848
  1395  00AE                     l1842:
  1396                           
  1397                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1398  00AE  300A               	movlw	10
  1399  00AF  00CF               	movwf	___lwmod@divisor
  1400  00B0  3000               	movlw	0
  1401  00B1  00D0               	movwf	___lwmod@divisor+1
  1402  00B2  0861               	movf	sprintf@prec,w
  1403  00B3  00DC               	movwf	??_sprintf
  1404  00B4  075C               	addwf	??_sprintf,w
  1405  00B5  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1406  00B6  0084               	movwf	4
  1407  00B7  120A  118A  23B3  120A  118A  	fcall	stringdir
  1408  00BC  00F3               	movwf	___lwdiv@divisor
  1409  00BD  120A  118A  23B3  120A  118A  	fcall	stringdir
  1410  00C2  00F4               	movwf	___lwdiv@divisor+1
  1411  00C3  0863               	movf	sprintf@val+1,w
  1412  00C4  00F6               	movwf	___lwdiv@dividend+1
  1413  00C5  0862               	movf	sprintf@val,w
  1414  00C6  00F5               	movwf	___lwdiv@dividend
  1415  00C7  120A  118A  231D  120A  118A  	fcall	___lwdiv
  1416  00CC  0874               	movf	?___lwdiv+1,w
  1417  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1418  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1419  00CF  00D2               	movwf	___lwmod@dividend+1
  1420  00D0  0873               	movf	?___lwdiv,w
  1421  00D1  00D1               	movwf	___lwmod@dividend
  1422  00D2  120A  118A  23EE  120A  118A  	fcall	___lwmod
  1423  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  1424  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  1425  00D9  084F               	movf	?___lwmod,w
  1426  00DA  3E30               	addlw	48
  1427  00DB  00DD               	movwf	??_sprintf+1
  1428  00DC  085D               	movf	??_sprintf+1,w
  1429  00DD  00E5               	movwf	sprintf@c
  1430  00DE                     l1844:
  1431                           
  1432                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1433  00DE  0865               	movf	sprintf@c,w
  1434  00DF  00DC               	movwf	??_sprintf
  1435  00E0  0864               	movf	sprintf@sp,w
  1436  00E1  0084               	movwf	4
  1437  00E2  085C               	movf	??_sprintf,w
  1438  00E3  1383               	bcf	3,7	;select IRP bank0
  1439  00E4  0080               	movwf	0
  1440  00E5                     l1846:
  1441  00E5  3001               	movlw	1
  1442  00E6  00DC               	movwf	??_sprintf
  1443  00E7  085C               	movf	??_sprintf,w
  1444  00E8  07E4               	addwf	sprintf@sp,f
  1445  00E9                     l1848:
  1446                           
  1447                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1448  00E9  30FF               	movlw	255
  1449  00EA  00DC               	movwf	??_sprintf
  1450  00EB  085C               	movf	??_sprintf,w
  1451  00EC  07E1               	addwf	sprintf@prec,f
  1452  00ED  0A61               	incf	sprintf@prec,w
  1453  00EE  1D03               	btfss	3,2
  1454  00EF  28F1               	goto	u1181
  1455  00F0  28F2               	goto	u1180
  1456  00F1                     u1181:
  1457  00F1  28AE               	goto	l1842
  1458  00F2                     u1180:
  1459  00F2                     l1850:
  1460                           
  1461                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1462  00F2  3001               	movlw	1
  1463  00F3  07D5               	addwf	sprintf@f,f
  1464  00F4  30FF               	movlw	-1
  1465  00F5  0755               	addwf	sprintf@f,w
  1466  00F6  0084               	movwf	4
  1467  00F7  120A  118A  23B3  120A  118A  	fcall	stringdir
  1468  00FC  00DC               	movwf	??_sprintf
  1469  00FD  085C               	movf	??_sprintf,w
  1470  00FE  00E5               	movwf	sprintf@c
  1471  00FF  0865               	movf	sprintf@c,w
  1472  0100  1D03               	btfss	3,2
  1473  0101  2903               	goto	u1191
  1474  0102  2904               	goto	u1190
  1475  0103                     u1191:
  1476  0103  2827               	goto	l1800
  1477  0104                     u1190:
  1478  0104                     l1852:
  1479                           
  1480                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1481  0104  0864               	movf	sprintf@sp,w
  1482  0105  0084               	movwf	4
  1483  0106  1383               	bcf	3,7	;select IRP bank0
  1484  0107  0180               	clrf	0
  1485  0108                     l318:
  1486  0108  0008               	return
  1487  0109                     __end_of_sprintf:
  1488                           
  1489                           	psect	text2
  1490  03EE                     __ptext2:	
  1491 ;; *************** function ___lwmod *****************
  1492 ;; Defined at:
  1493 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1494 ;; Parameters:    Size  Location     Type
  1495 ;;  divisor         2    3[BANK0 ] unsigned int 
  1496 ;;  dividend        2    5[BANK0 ] unsigned int 
  1497 ;; Auto vars:     Size  Location     Type
  1498 ;;  counter         1    8[BANK0 ] unsigned char 
  1499 ;; Return value:  Size  Location     Type
  1500 ;;                  2    3[BANK0 ] unsigned int 
  1501 ;; Registers used:
  1502 ;;		wreg, status,2, status,0
  1503 ;; Tracked objects:
  1504 ;;		On entry : 0/0
  1505 ;;		On exit  : 0/0
  1506 ;;		Unchanged: 0/0
  1507 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1508 ;;      Params:         0       4       0       0       0
  1509 ;;      Locals:         0       1       0       0       0
  1510 ;;      Temps:          0       1       0       0       0
  1511 ;;      Totals:         0       6       0       0       0
  1512 ;;Total ram usage:        6 bytes
  1513 ;; Hardware stack levels used:    1
  1514 ;; Hardware stack levels required when called:    2
  1515 ;; This function calls:
  1516 ;;		Nothing
  1517 ;; This function is called by:
  1518 ;;		_sprintf
  1519 ;; This function uses a non-reentrant model
  1520 ;;
  1521                           
  1522                           
  1523                           ;psect for function ___lwmod
  1524  03EE                     ___lwmod:
  1525  03EE                     l1372:	
  1526                           ;incstack = 0
  1527                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1528                           
  1529  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  1530  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  1531  03F0  084F               	movf	___lwmod@divisor,w
  1532  03F1  0450               	iorwf	___lwmod@divisor+1,w
  1533  03F2  1903               	btfsc	3,2
  1534  03F3  2BF5               	goto	u701
  1535  03F4  2BF6               	goto	u700
  1536  03F5                     u701:
  1537  03F5  2C25               	goto	l1390
  1538  03F6                     u700:
  1539  03F6                     l1374:
  1540  03F6  01D4               	clrf	___lwmod@counter
  1541  03F7  0AD4               	incf	___lwmod@counter,f
  1542  03F8  2C04               	goto	l1380
  1543  03F9                     l1376:
  1544  03F9  3001               	movlw	1
  1545  03FA                     u715:
  1546  03FA  1003               	clrc
  1547  03FB  0DCF               	rlf	___lwmod@divisor,f
  1548  03FC  0DD0               	rlf	___lwmod@divisor+1,f
  1549  03FD  3EFF               	addlw	-1
  1550  03FE  1D03               	skipz
  1551  03FF  2BFA               	goto	u715
  1552  0400                     l1378:
  1553  0400  3001               	movlw	1
  1554  0401  00D3               	movwf	??___lwmod
  1555  0402  0853               	movf	??___lwmod,w
  1556  0403  07D4               	addwf	___lwmod@counter,f
  1557  0404                     l1380:
  1558  0404  1FD0               	btfss	___lwmod@divisor+1,7
  1559  0405  2C07               	goto	u721
  1560  0406  2C08               	goto	u720
  1561  0407                     u721:
  1562  0407  2BF9               	goto	l1376
  1563  0408                     u720:
  1564  0408                     l1382:
  1565  0408  0850               	movf	___lwmod@divisor+1,w
  1566  0409  0252               	subwf	___lwmod@dividend+1,w
  1567  040A  1D03               	skipz
  1568  040B  2C0E               	goto	u735
  1569  040C  084F               	movf	___lwmod@divisor,w
  1570  040D  0251               	subwf	___lwmod@dividend,w
  1571  040E                     u735:
  1572  040E  1C03               	skipc
  1573  040F  2C11               	goto	u731
  1574  0410  2C12               	goto	u730
  1575  0411                     u731:
  1576  0411  2C18               	goto	l1386
  1577  0412                     u730:
  1578  0412                     l1384:
  1579  0412  084F               	movf	___lwmod@divisor,w
  1580  0413  02D1               	subwf	___lwmod@dividend,f
  1581  0414  0850               	movf	___lwmod@divisor+1,w
  1582  0415  1C03               	skipc
  1583  0416  03D2               	decf	___lwmod@dividend+1,f
  1584  0417  02D2               	subwf	___lwmod@dividend+1,f
  1585  0418                     l1386:
  1586  0418  3001               	movlw	1
  1587  0419                     u745:
  1588  0419  1003               	clrc
  1589  041A  0CD0               	rrf	___lwmod@divisor+1,f
  1590  041B  0CCF               	rrf	___lwmod@divisor,f
  1591  041C  3EFF               	addlw	-1
  1592  041D  1D03               	skipz
  1593  041E  2C19               	goto	u745
  1594  041F                     l1388:
  1595  041F  3001               	movlw	1
  1596  0420  02D4               	subwf	___lwmod@counter,f
  1597  0421  1D03               	btfss	3,2
  1598  0422  2C24               	goto	u751
  1599  0423  2C25               	goto	u750
  1600  0424                     u751:
  1601  0424  2C08               	goto	l1382
  1602  0425                     u750:
  1603  0425                     l1390:
  1604  0425  0852               	movf	___lwmod@dividend+1,w
  1605  0426  00D0               	movwf	?___lwmod+1
  1606  0427  0851               	movf	___lwmod@dividend,w
  1607  0428  00CF               	movwf	?___lwmod
  1608  0429                     l604:
  1609  0429  0008               	return
  1610  042A                     __end_of___lwmod:
  1611                           
  1612                           	psect	text3
  1613  031D                     __ptext3:	
  1614 ;; *************** function ___lwdiv *****************
  1615 ;; Defined at:
  1616 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1617 ;; Parameters:    Size  Location     Type
  1618 ;;  divisor         2    3[COMMON] unsigned int 
  1619 ;;  dividend        2    5[COMMON] unsigned int 
  1620 ;; Auto vars:     Size  Location     Type
  1621 ;;  quotient        2    1[BANK0 ] unsigned int 
  1622 ;;  counter         1    0[BANK0 ] unsigned char 
  1623 ;; Return value:  Size  Location     Type
  1624 ;;                  2    3[COMMON] unsigned int 
  1625 ;; Registers used:
  1626 ;;		wreg, status,2, status,0
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: 0/0
  1631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1632 ;;      Params:         4       0       0       0       0
  1633 ;;      Locals:         0       3       0       0       0
  1634 ;;      Temps:          1       0       0       0       0
  1635 ;;      Totals:         5       3       0       0       0
  1636 ;;Total ram usage:        8 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    2
  1639 ;; This function calls:
  1640 ;;		Nothing
  1641 ;; This function is called by:
  1642 ;;		_sprintf
  1643 ;; This function uses a non-reentrant model
  1644 ;;
  1645                           
  1646                           
  1647                           ;psect for function ___lwdiv
  1648  031D                     ___lwdiv:
  1649  031D                     l1704:	
  1650                           ;incstack = 0
  1651                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1652                           
  1653  031D  1283               	bcf	3,5	;RP0=0, select bank0
  1654  031E  1303               	bcf	3,6	;RP1=0, select bank0
  1655  031F  01CD               	clrf	___lwdiv@quotient
  1656  0320  01CE               	clrf	___lwdiv@quotient+1
  1657  0321                     l1706:
  1658  0321  0873               	movf	___lwdiv@divisor,w
  1659  0322  0474               	iorwf	___lwdiv@divisor+1,w
  1660  0323  1903               	btfsc	3,2
  1661  0324  2B26               	goto	u991
  1662  0325  2B27               	goto	u990
  1663  0326                     u991:
  1664  0326  2B5E               	goto	l1726
  1665  0327                     u990:
  1666  0327                     l1708:
  1667  0327  01CC               	clrf	___lwdiv@counter
  1668  0328  0ACC               	incf	___lwdiv@counter,f
  1669  0329  2B35               	goto	l1714
  1670  032A                     l1710:
  1671  032A  3001               	movlw	1
  1672  032B                     u1005:
  1673  032B  1003               	clrc
  1674  032C  0DF3               	rlf	___lwdiv@divisor,f
  1675  032D  0DF4               	rlf	___lwdiv@divisor+1,f
  1676  032E  3EFF               	addlw	-1
  1677  032F  1D03               	skipz
  1678  0330  2B2B               	goto	u1005
  1679  0331                     l1712:
  1680  0331  3001               	movlw	1
  1681  0332  00F7               	movwf	??___lwdiv
  1682  0333  0877               	movf	??___lwdiv,w
  1683  0334  07CC               	addwf	___lwdiv@counter,f
  1684  0335                     l1714:
  1685  0335  1FF4               	btfss	___lwdiv@divisor+1,7
  1686  0336  2B38               	goto	u1011
  1687  0337  2B39               	goto	u1010
  1688  0338                     u1011:
  1689  0338  2B2A               	goto	l1710
  1690  0339                     u1010:
  1691  0339                     l1716:
  1692  0339  3001               	movlw	1
  1693  033A                     u1025:
  1694  033A  1003               	clrc
  1695  033B  0DCD               	rlf	___lwdiv@quotient,f
  1696  033C  0DCE               	rlf	___lwdiv@quotient+1,f
  1697  033D  3EFF               	addlw	-1
  1698  033E  1D03               	skipz
  1699  033F  2B3A               	goto	u1025
  1700  0340  0874               	movf	___lwdiv@divisor+1,w
  1701  0341  0276               	subwf	___lwdiv@dividend+1,w
  1702  0342  1D03               	skipz
  1703  0343  2B46               	goto	u1035
  1704  0344  0873               	movf	___lwdiv@divisor,w
  1705  0345  0275               	subwf	___lwdiv@dividend,w
  1706  0346                     u1035:
  1707  0346  1C03               	skipc
  1708  0347  2B49               	goto	u1031
  1709  0348  2B4A               	goto	u1030
  1710  0349                     u1031:
  1711  0349  2B51               	goto	l1722
  1712  034A                     u1030:
  1713  034A                     l1718:
  1714  034A  0873               	movf	___lwdiv@divisor,w
  1715  034B  02F5               	subwf	___lwdiv@dividend,f
  1716  034C  0874               	movf	___lwdiv@divisor+1,w
  1717  034D  1C03               	skipc
  1718  034E  03F6               	decf	___lwdiv@dividend+1,f
  1719  034F  02F6               	subwf	___lwdiv@dividend+1,f
  1720  0350                     l1720:
  1721  0350  144D               	bsf	___lwdiv@quotient,0
  1722  0351                     l1722:
  1723  0351  3001               	movlw	1
  1724  0352                     u1045:
  1725  0352  1003               	clrc
  1726  0353  0CF4               	rrf	___lwdiv@divisor+1,f
  1727  0354  0CF3               	rrf	___lwdiv@divisor,f
  1728  0355  3EFF               	addlw	-1
  1729  0356  1D03               	skipz
  1730  0357  2B52               	goto	u1045
  1731  0358                     l1724:
  1732  0358  3001               	movlw	1
  1733  0359  02CC               	subwf	___lwdiv@counter,f
  1734  035A  1D03               	btfss	3,2
  1735  035B  2B5D               	goto	u1051
  1736  035C  2B5E               	goto	u1050
  1737  035D                     u1051:
  1738  035D  2B39               	goto	l1716
  1739  035E                     u1050:
  1740  035E                     l1726:
  1741  035E  084E               	movf	___lwdiv@quotient+1,w
  1742  035F  00F4               	movwf	?___lwdiv+1
  1743  0360  084D               	movf	___lwdiv@quotient,w
  1744  0361  00F3               	movwf	?___lwdiv
  1745  0362                     l594:
  1746  0362  0008               	return
  1747  0363                     __end_of___lwdiv:
  1748                           
  1749                           	psect	text4
  1750  042A                     __ptext4:	
  1751 ;; *************** function _setup *****************
  1752 ;; Defined at:
  1753 ;;		line 133 in file "main.c"
  1754 ;; Parameters:    Size  Location     Type
  1755 ;;		None
  1756 ;; Auto vars:     Size  Location     Type
  1757 ;;		None
  1758 ;; Return value:  Size  Location     Type
  1759 ;;                  1    wreg      void 
  1760 ;; Registers used:
  1761 ;;		wreg, status,2
  1762 ;; Tracked objects:
  1763 ;;		On entry : 0/0
  1764 ;;		On exit  : 0/0
  1765 ;;		Unchanged: 0/0
  1766 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1767 ;;      Params:         0       0       0       0       0
  1768 ;;      Locals:         0       0       0       0       0
  1769 ;;      Temps:          0       0       0       0       0
  1770 ;;      Totals:         0       0       0       0       0
  1771 ;;Total ram usage:        0 bytes
  1772 ;; Hardware stack levels used:    1
  1773 ;; Hardware stack levels required when called:    2
  1774 ;; This function calls:
  1775 ;;		Nothing
  1776 ;; This function is called by:
  1777 ;;		_main
  1778 ;; This function uses a non-reentrant model
  1779 ;;
  1780                           
  1781                           
  1782                           ;psect for function _setup
  1783  042A                     _setup:
  1784  042A                     l1400:	
  1785                           ;incstack = 0
  1786                           ; Regs used in _setup: [wreg+status,2]
  1787                           
  1788                           
  1789                           ;main.c: 134:     ANSEL = 0b00000011;
  1790  042A  3003               	movlw	3
  1791  042B  1683               	bsf	3,5	;RP0=1, select bank3
  1792  042C  1703               	bsf	3,6	;RP1=1, select bank3
  1793  042D  0088               	movwf	8	;volatile
  1794  042E                     l1402:
  1795                           
  1796                           ;main.c: 135:     ANSELH = 0;
  1797  042E  0189               	clrf	9	;volatile
  1798  042F                     l1404:
  1799                           
  1800                           ;main.c: 136:     TRISA = 0b00000011;
  1801  042F  3003               	movlw	3
  1802  0430  1683               	bsf	3,5	;RP0=1, select bank1
  1803  0431  1303               	bcf	3,6	;RP1=0, select bank1
  1804  0432  0085               	movwf	5	;volatile
  1805                           
  1806                           ;main.c: 137:     TRISB = 0;
  1807  0433  0186               	clrf	6	;volatile
  1808                           
  1809                           ;main.c: 138:     TRISC = 0;
  1810  0434  0187               	clrf	7	;volatile
  1811                           
  1812                           ;main.c: 139:     TRISD = 0;
  1813  0435  0188               	clrf	8	;volatile
  1814                           
  1815                           ;main.c: 140:     TRISE = 0;
  1816  0436  0189               	clrf	9	;volatile
  1817                           
  1818                           ;main.c: 141:     PORTA = 0;
  1819  0437  1283               	bcf	3,5	;RP0=0, select bank0
  1820  0438  1303               	bcf	3,6	;RP1=0, select bank0
  1821  0439  0185               	clrf	5	;volatile
  1822                           
  1823                           ;main.c: 142:     PORTB = 0;
  1824  043A  0186               	clrf	6	;volatile
  1825                           
  1826                           ;main.c: 143:     PORTC = 0;
  1827  043B  0187               	clrf	7	;volatile
  1828                           
  1829                           ;main.c: 144:     PORTD = 0;
  1830  043C  0188               	clrf	8	;volatile
  1831                           
  1832                           ;main.c: 145:     PORTE = 0;
  1833  043D  0189               	clrf	9	;volatile
  1834                           
  1835                           ;main.c: 147:     ADCON1 = 0b00000000;
  1836  043E  1683               	bsf	3,5	;RP0=1, select bank1
  1837  043F  1303               	bcf	3,6	;RP1=0, select bank1
  1838  0440  019F               	clrf	31	;volatile
  1839  0441                     l1406:
  1840                           
  1841                           ;main.c: 148:     PIE1bits.ADIE = 0;
  1842  0441  130C               	bcf	12,6	;volatile
  1843  0442                     l1408:
  1844                           
  1845                           ;main.c: 149:     PIR1bits.ADIF = 0;
  1846  0442  1283               	bcf	3,5	;RP0=0, select bank0
  1847  0443  1303               	bcf	3,6	;RP1=0, select bank0
  1848  0444  130C               	bcf	12,6	;volatile
  1849                           
  1850                           ;main.c: 150:     OPTION_REG = 0b00000000;
  1851  0445  1683               	bsf	3,5	;RP0=1, select bank1
  1852  0446  1303               	bcf	3,6	;RP1=0, select bank1
  1853  0447  0181               	clrf	1	;volatile
  1854                           
  1855                           ;main.c: 151:     INTCON = 0b00000000;
  1856  0448  018B               	clrf	11	;volatile
  1857  0449                     l1410:
  1858                           
  1859                           ;main.c: 154:     INTCONbits.PEIE = 1;
  1860  0449  170B               	bsf	11,6	;volatile
  1861  044A                     l1412:
  1862                           
  1863                           ;main.c: 155:     PIE1bits.RCIE = 1;
  1864  044A  168C               	bsf	12,5	;volatile
  1865  044B                     l1414:
  1866                           
  1867                           ;main.c: 156:     PIR1bits.RCIF = 0;
  1868  044B  1283               	bcf	3,5	;RP0=0, select bank0
  1869  044C  1303               	bcf	3,6	;RP1=0, select bank0
  1870  044D  128C               	bcf	12,5	;volatile
  1871  044E                     l1416:
  1872                           
  1873                           ;main.c: 157:     INTCONbits.GIE = 1;
  1874  044E  178B               	bsf	11,7	;volatile
  1875  044F                     l1418:
  1876                           
  1877                           ;main.c: 160:     SPBRG = 12;
  1878  044F  300C               	movlw	12
  1879  0450  1683               	bsf	3,5	;RP0=1, select bank1
  1880  0451  1303               	bcf	3,6	;RP1=0, select bank1
  1881  0452  0099               	movwf	25	;volatile
  1882  0453                     l1420:
  1883                           
  1884                           ;main.c: 161:     TXSTAbits.CSRC = 0;
  1885  0453  1398               	bcf	24,7	;volatile
  1886  0454                     l1422:
  1887                           
  1888                           ;main.c: 162:     TXSTAbits.TX9 = 0;
  1889  0454  1318               	bcf	24,6	;volatile
  1890  0455                     l1424:
  1891                           
  1892                           ;main.c: 163:     TXSTAbits.TXEN = 1;
  1893  0455  1698               	bsf	24,5	;volatile
  1894  0456                     l1426:
  1895                           
  1896                           ;main.c: 164:     TXSTAbits.SYNC = 0;
  1897  0456  1218               	bcf	24,4	;volatile
  1898  0457                     l1428:
  1899                           
  1900                           ;main.c: 165:     TXSTAbits.BRGH = 0;
  1901  0457  1118               	bcf	24,2	;volatile
  1902  0458                     l1430:
  1903                           
  1904                           ;main.c: 166:     TXSTAbits.TRMT = 0;
  1905  0458  1098               	bcf	24,1	;volatile
  1906  0459                     l1432:
  1907                           
  1908                           ;main.c: 168:     RCSTAbits.SPEN = 1;
  1909  0459  1283               	bcf	3,5	;RP0=0, select bank0
  1910  045A  1303               	bcf	3,6	;RP1=0, select bank0
  1911  045B  1798               	bsf	24,7	;volatile
  1912  045C                     l1434:
  1913                           
  1914                           ;main.c: 169:     RCSTAbits.RX9 = 0;
  1915  045C  1318               	bcf	24,6	;volatile
  1916  045D                     l1436:
  1917                           
  1918                           ;main.c: 170:     RCSTAbits.CREN = 1;
  1919  045D  1618               	bsf	24,4	;volatile
  1920  045E                     l114:
  1921  045E  0008               	return
  1922  045F                     __end_of_setup:
  1923                           
  1924                           	psect	text5
  1925  0505                     __ptext5:	
  1926 ;; *************** function _USART_STRING *****************
  1927 ;; Defined at:
  1928 ;;		line 32 in file "USART.c"
  1929 ;; Parameters:    Size  Location     Type
  1930 ;;  a               1    wreg     PTR unsigned char 
  1931 ;;		 -> data1(20), 
  1932 ;; Auto vars:     Size  Location     Type
  1933 ;;  a               1    5[COMMON] PTR unsigned char 
  1934 ;;		 -> data1(20), 
  1935 ;;  i               1    6[COMMON] unsigned char 
  1936 ;; Return value:  Size  Location     Type
  1937 ;;                  1    wreg      void 
  1938 ;; Registers used:
  1939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1940 ;; Tracked objects:
  1941 ;;		On entry : 0/0
  1942 ;;		On exit  : 0/0
  1943 ;;		Unchanged: 0/0
  1944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1945 ;;      Params:         0       0       0       0       0
  1946 ;;      Locals:         2       0       0       0       0
  1947 ;;      Temps:          1       0       0       0       0
  1948 ;;      Totals:         3       0       0       0       0
  1949 ;;Total ram usage:        3 bytes
  1950 ;; Hardware stack levels used:    1
  1951 ;; Hardware stack levels required when called:    3
  1952 ;; This function calls:
  1953 ;;		_USART_ESCRITURA
  1954 ;; This function is called by:
  1955 ;;		_main
  1956 ;; This function uses a non-reentrant model
  1957 ;;
  1958                           
  1959                           
  1960                           ;psect for function _USART_STRING
  1961  0505                     _USART_STRING:
  1962                           
  1963                           ;incstack = 0
  1964                           ; Regs used in _USART_STRING: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1965                           ;USART_STRING@a stored from wreg
  1966  0505  00F5               	movwf	USART_STRING@a
  1967  0506                     l1568:
  1968                           
  1969                           ;USART.c: 33:     uint8_t i;;USART.c: 34:     for(i=0;a[i]!='\0';i++){
  1970  0506  01F6               	clrf	USART_STRING@i
  1971  0507  2D17               	goto	l1574
  1972  0508                     l1570:
  1973                           
  1974                           ;USART.c: 35:         USART_ESCRITURA(a[i]);
  1975  0508  0876               	movf	USART_STRING@i,w
  1976  0509  0775               	addwf	USART_STRING@a,w
  1977  050A  00F4               	movwf	??_USART_STRING
  1978  050B  0874               	movf	??_USART_STRING,w
  1979  050C  0084               	movwf	4
  1980  050D  0800               	movf	0,w
  1981  050E  120A  118A  2560  120A  118A  	fcall	_USART_ESCRITURA
  1982  0513                     l1572:
  1983                           
  1984                           ;USART.c: 36:     }
  1985  0513  3001               	movlw	1
  1986  0514  00F4               	movwf	??_USART_STRING
  1987  0515  0874               	movf	??_USART_STRING,w
  1988  0516  07F6               	addwf	USART_STRING@i,f
  1989  0517                     l1574:
  1990  0517  0876               	movf	USART_STRING@i,w
  1991  0518  0775               	addwf	USART_STRING@a,w
  1992  0519  00F4               	movwf	??_USART_STRING
  1993  051A  0874               	movf	??_USART_STRING,w
  1994  051B  0084               	movwf	4
  1995  051C  1383               	bcf	3,7	;select IRP bank0
  1996  051D  0800               	movf	0,w
  1997  051E  1D03               	btfss	3,2
  1998  051F  2D21               	goto	u911
  1999  0520  2D22               	goto	u910
  2000  0521                     u911:
  2001  0521  2D08               	goto	l1570
  2002  0522                     u910:
  2003  0522                     l202:
  2004  0522  0008               	return
  2005  0523                     __end_of_USART_STRING:
  2006                           
  2007                           	psect	text6
  2008  0560                     __ptext6:	
  2009 ;; *************** function _USART_ESCRITURA *****************
  2010 ;; Defined at:
  2011 ;;		line 28 in file "USART.c"
  2012 ;; Parameters:    Size  Location     Type
  2013 ;;  a               1    wreg     unsigned char 
  2014 ;; Auto vars:     Size  Location     Type
  2015 ;;  a               1    3[COMMON] unsigned char 
  2016 ;; Return value:  Size  Location     Type
  2017 ;;                  1    wreg      void 
  2018 ;; Registers used:
  2019 ;;		wreg
  2020 ;; Tracked objects:
  2021 ;;		On entry : 0/0
  2022 ;;		On exit  : 0/0
  2023 ;;		Unchanged: 0/0
  2024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2025 ;;      Params:         0       0       0       0       0
  2026 ;;      Locals:         1       0       0       0       0
  2027 ;;      Temps:          0       0       0       0       0
  2028 ;;      Totals:         1       0       0       0       0
  2029 ;;Total ram usage:        1 bytes
  2030 ;; Hardware stack levels used:    1
  2031 ;; Hardware stack levels required when called:    2
  2032 ;; This function calls:
  2033 ;;		Nothing
  2034 ;; This function is called by:
  2035 ;;		_main
  2036 ;;		_USART_STRING
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           
  2041                           ;psect for function _USART_ESCRITURA
  2042  0560                     _USART_ESCRITURA:
  2043                           
  2044                           ;incstack = 0
  2045                           ; Regs used in _USART_ESCRITURA: [wreg]
  2046                           ;USART_ESCRITURA@a stored from wreg
  2047  0560  00F3               	movwf	USART_ESCRITURA@a
  2048  0561                     l1250:
  2049  0561                     l193:	
  2050                           ;USART.c: 29:     while(!TRMT);
  2051                           
  2052  0561  1683               	bsf	3,5	;RP0=1, select bank1
  2053  0562  1303               	bcf	3,6	;RP1=0, select bank1
  2054  0563  1C98               	btfss	24,1	;volatile
  2055  0564  2D66               	goto	u481
  2056  0565  2D67               	goto	u480
  2057  0566                     u481:
  2058  0566  2D61               	goto	l193
  2059  0567                     u480:
  2060  0567                     l1252:
  2061                           
  2062                           ;USART.c: 30:     TXREG = a;
  2063  0567  0873               	movf	USART_ESCRITURA@a,w
  2064  0568  1283               	bcf	3,5	;RP0=0, select bank0
  2065  0569  1303               	bcf	3,6	;RP1=0, select bank0
  2066  056A  0099               	movwf	25	;volatile
  2067  056B                     l196:
  2068  056B  0008               	return
  2069  056C                     __end_of_USART_ESCRITURA:
  2070                           
  2071                           	psect	text7
  2072  0363                     __ptext7:	
  2073 ;; *************** function _Lcd_Write_String *****************
  2074 ;; Defined at:
  2075 ;;		line 132 in file "LCD.c"
  2076 ;; Parameters:    Size  Location     Type
  2077 ;;  a               2    6[COMMON] PTR unsigned char 
  2078 ;;		 -> data2(16), STR_3(4), STR_2(4), STR_1(4), 
  2079 ;; Auto vars:     Size  Location     Type
  2080 ;;  i               2    3[BANK0 ] int 
  2081 ;; Return value:  Size  Location     Type
  2082 ;;                  1    wreg      void 
  2083 ;; Registers used:
  2084 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2085 ;; Tracked objects:
  2086 ;;		On entry : 0/0
  2087 ;;		On exit  : 0/0
  2088 ;;		Unchanged: 0/0
  2089 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2090 ;;      Params:         2       0       0       0       0
  2091 ;;      Locals:         0       2       0       0       0
  2092 ;;      Temps:          0       3       0       0       0
  2093 ;;      Totals:         2       5       0       0       0
  2094 ;;Total ram usage:        7 bytes
  2095 ;; Hardware stack levels used:    1
  2096 ;; Hardware stack levels required when called:    4
  2097 ;; This function calls:
  2098 ;;		_Lcd_Write_Char
  2099 ;; This function is called by:
  2100 ;;		_main
  2101 ;; This function uses a non-reentrant model
  2102 ;;
  2103                           
  2104                           
  2105                           ;psect for function _Lcd_Write_String
  2106  0363                     _Lcd_Write_String:
  2107  0363                     l1754:	
  2108                           ;incstack = 0
  2109                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2110                           
  2111                           
  2112                           ;LCD.c: 132: void Lcd_Write_String(char *a);LCD.c: 133: {;LCD.c: 134:  int i;;LCD.c: 135
      +                          :  for(i=0;a[i]!='\0';i++)
  2113  0363  1283               	bcf	3,5	;RP0=0, select bank0
  2114  0364  1303               	bcf	3,6	;RP1=0, select bank0
  2115  0365  01CF               	clrf	Lcd_Write_String@i
  2116  0366  01D0               	clrf	Lcd_Write_String@i+1
  2117  0367  2B8C               	goto	l1760
  2118  0368                     l1756:
  2119                           
  2120                           ;LCD.c: 136:     Lcd_Write_Char(a[i]);
  2121  0368  084F               	movf	Lcd_Write_String@i,w
  2122  0369  0776               	addwf	Lcd_Write_String@a,w
  2123  036A  00CD               	movwf	??_Lcd_Write_String+1
  2124  036B  0877               	movf	Lcd_Write_String@a+1,w
  2125  036C  00CC               	movwf	??_Lcd_Write_String
  2126  036D  1803               	skipnc
  2127  036E  0ACC               	incf	??_Lcd_Write_String,f
  2128  036F  1FCF               	btfss	Lcd_Write_String@i,7
  2129  0370  2B72               	goto	u1080
  2130  0371  03CC               	decf	??_Lcd_Write_String,f
  2131  0372                     u1080:
  2132  0372  1283               	bcf	3,5	;RP0=0, select bank0
  2133  0373  1303               	bcf	3,6	;RP1=0, select bank0
  2134  0374  084C               	movf	??_Lcd_Write_String,w
  2135  0375  00CE               	movwf	??_Lcd_Write_String+2
  2136  0376  084E               	movf	??_Lcd_Write_String+2,w
  2137  0377  00FF               	movwf	btemp+1
  2138  0378  084D               	movf	??_Lcd_Write_String+1,w
  2139  0379  0084               	movwf	4
  2140  037A  120A  118A  23A9  120A  118A  	fcall	stringtab
  2141  037F  120A  118A  253D  120A  118A  	fcall	_Lcd_Write_Char
  2142  0384                     l1758:
  2143  0384  3001               	movlw	1
  2144  0385  1283               	bcf	3,5	;RP0=0, select bank0
  2145  0386  1303               	bcf	3,6	;RP1=0, select bank0
  2146  0387  07CF               	addwf	Lcd_Write_String@i,f
  2147  0388  1803               	skipnc
  2148  0389  0AD0               	incf	Lcd_Write_String@i+1,f
  2149  038A  3000               	movlw	0
  2150  038B  07D0               	addwf	Lcd_Write_String@i+1,f
  2151  038C                     l1760:
  2152  038C  084F               	movf	Lcd_Write_String@i,w
  2153  038D  0776               	addwf	Lcd_Write_String@a,w
  2154  038E  00CD               	movwf	??_Lcd_Write_String+1
  2155  038F  0877               	movf	Lcd_Write_String@a+1,w
  2156  0390  00CC               	movwf	??_Lcd_Write_String
  2157  0391  1803               	skipnc
  2158  0392  0ACC               	incf	??_Lcd_Write_String,f
  2159  0393  1FCF               	btfss	Lcd_Write_String@i,7
  2160  0394  2B96               	goto	u1090
  2161  0395  03CC               	decf	??_Lcd_Write_String,f
  2162  0396                     u1090:
  2163  0396  1283               	bcf	3,5	;RP0=0, select bank0
  2164  0397  1303               	bcf	3,6	;RP1=0, select bank0
  2165  0398  084C               	movf	??_Lcd_Write_String,w
  2166  0399  00CE               	movwf	??_Lcd_Write_String+2
  2167  039A  084E               	movf	??_Lcd_Write_String+2,w
  2168  039B  00FF               	movwf	btemp+1
  2169  039C  084D               	movf	??_Lcd_Write_String+1,w
  2170  039D  0084               	movwf	4
  2171  039E  120A  118A  23A9  120A  118A  	fcall	stringtab
  2172  03A3  3A00               	xorlw	0
  2173  03A4  1D03               	skipz
  2174  03A5  2BA7               	goto	u1101
  2175  03A6  2BA8               	goto	u1100
  2176  03A7                     u1101:
  2177  03A7  2B68               	goto	l1756
  2178  03A8                     u1100:
  2179  03A8                     l182:
  2180  03A8  0008               	return
  2181  03A9                     __end_of_Lcd_Write_String:
  2182                           
  2183                           	psect	text8
  2184  053D                     __ptext8:	
  2185 ;; *************** function _Lcd_Write_Char *****************
  2186 ;; Defined at:
  2187 ;;		line 115 in file "LCD.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;  a               1    wreg     unsigned char 
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;  a               1    5[COMMON] unsigned char 
  2192 ;; Return value:  Size  Location     Type
  2193 ;;                  1    wreg      void 
  2194 ;; Registers used:
  2195 ;;		wreg, status,2, status,0, pclath, cstack
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: 0/0
  2200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2201 ;;      Params:         0       0       0       0       0
  2202 ;;      Locals:         1       0       0       0       0
  2203 ;;      Temps:          1       0       0       0       0
  2204 ;;      Totals:         2       0       0       0       0
  2205 ;;Total ram usage:        2 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    3
  2208 ;; This function calls:
  2209 ;;		_Lcd_Port
  2210 ;; This function is called by:
  2211 ;;		_Lcd_Write_String
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214                           
  2215                           
  2216                           ;psect for function _Lcd_Write_Char
  2217  053D                     _Lcd_Write_Char:
  2218                           
  2219                           ;incstack = 0
  2220                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2221                           ;Lcd_Write_Char@a stored from wreg
  2222  053D  00F5               	movwf	Lcd_Write_Char@a
  2223  053E                     l1680:
  2224                           
  2225                           ;LCD.c: 115: void Lcd_Write_Char(char a);LCD.c: 116: {;LCD.c: 121:    RE0 = 1;
  2226  053E  1283               	bcf	3,5	;RP0=0, select bank0
  2227  053F  1303               	bcf	3,6	;RP1=0, select bank0
  2228  0540  1409               	bsf	9,0	;volatile
  2229  0541                     l1682:
  2230                           
  2231                           ;LCD.c: 126:    Lcd_Port(a);
  2232  0541  0875               	movf	Lcd_Write_Char@a,w
  2233  0542  120A  118A  2584  120A  118A  	fcall	_Lcd_Port
  2234  0547                     l1684:
  2235                           
  2236                           ;LCD.c: 127:    RE1 = 1;
  2237  0547  1283               	bcf	3,5	;RP0=0, select bank0
  2238  0548  1303               	bcf	3,6	;RP1=0, select bank0
  2239  0549  1489               	bsf	9,1	;volatile
  2240  054A                     l1686:
  2241                           
  2242                           ;LCD.c: 128:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2243  054A  301A               	movlw	26
  2244  054B  00F4               	movwf	??_Lcd_Write_Char
  2245  054C                     u1207:
  2246  054C  0BF4               	decfsz	??_Lcd_Write_Char,f
  2247  054D  2D4C               	goto	u1207
  2248  054E  0000               	nop
  2249  054F                     l1688:
  2250                           
  2251                           ;LCD.c: 129:    RE1 = 0;
  2252  054F  1283               	bcf	3,5	;RP0=0, select bank0
  2253  0550  1303               	bcf	3,6	;RP1=0, select bank0
  2254  0551  1089               	bcf	9,1	;volatile
  2255  0552                     l176:
  2256  0552  0008               	return
  2257  0553                     __end_of_Lcd_Write_Char:
  2258                           
  2259                           	psect	text9
  2260  04BB                     __ptext9:	
  2261 ;; *************** function _Lcd_Set_Cursor *****************
  2262 ;; Defined at:
  2263 ;;		line 75 in file "LCD.c"
  2264 ;; Parameters:    Size  Location     Type
  2265 ;;  a               1    wreg     unsigned char 
  2266 ;;  b               1    7[COMMON] unsigned char 
  2267 ;; Auto vars:     Size  Location     Type
  2268 ;;  a               1    1[BANK0 ] unsigned char 
  2269 ;;  temp            1    2[BANK0 ] unsigned char 
  2270 ;; Return value:  Size  Location     Type
  2271 ;;                  1    wreg      void 
  2272 ;; Registers used:
  2273 ;;		wreg, status,2, status,0, pclath, cstack
  2274 ;; Tracked objects:
  2275 ;;		On entry : 0/0
  2276 ;;		On exit  : 0/0
  2277 ;;		Unchanged: 0/0
  2278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2279 ;;      Params:         1       0       0       0       0
  2280 ;;      Locals:         0       2       0       0       0
  2281 ;;      Temps:          0       1       0       0       0
  2282 ;;      Totals:         1       3       0       0       0
  2283 ;;Total ram usage:        4 bytes
  2284 ;; Hardware stack levels used:    1
  2285 ;; Hardware stack levels required when called:    4
  2286 ;; This function calls:
  2287 ;;		_Lcd_Cmd
  2288 ;; This function is called by:
  2289 ;;		_main
  2290 ;; This function uses a non-reentrant model
  2291 ;;
  2292                           
  2293                           
  2294                           ;psect for function _Lcd_Set_Cursor
  2295  04BB                     _Lcd_Set_Cursor:
  2296                           
  2297                           ;incstack = 0
  2298                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2299                           ;Lcd_Set_Cursor@a stored from wreg
  2300  04BB  1283               	bcf	3,5	;RP0=0, select bank0
  2301  04BC  1303               	bcf	3,6	;RP1=0, select bank0
  2302  04BD  00CD               	movwf	Lcd_Set_Cursor@a
  2303  04BE                     l1742:
  2304                           
  2305                           ;LCD.c: 75: void Lcd_Set_Cursor(char a, char b);LCD.c: 76: {;LCD.c: 77:  char temp;;LCD.
      +                          c: 78:  if(a == 1)
  2306  04BE  034D               	decf	Lcd_Set_Cursor@a,w
  2307  04BF  1D03               	btfss	3,2
  2308  04C0  2CC2               	goto	u1061
  2309  04C1  2CC3               	goto	u1060
  2310  04C2                     u1061:
  2311  04C2  2CCF               	goto	l1748
  2312  04C3                     u1060:
  2313  04C3                     l1744:
  2314                           
  2315                           ;LCD.c: 79:  {;LCD.c: 80:    temp = 0x80 + b - 1;
  2316  04C3  0877               	movf	Lcd_Set_Cursor@b,w
  2317  04C4  3E7F               	addlw	127
  2318  04C5  00CC               	movwf	??_Lcd_Set_Cursor
  2319  04C6  084C               	movf	??_Lcd_Set_Cursor,w
  2320  04C7  00CE               	movwf	Lcd_Set_Cursor@temp
  2321  04C8                     l1746:
  2322                           
  2323                           ;LCD.c: 84:   Lcd_Cmd(temp);
  2324  04C8  084E               	movf	Lcd_Set_Cursor@temp,w
  2325  04C9  120A  118A  2523  120A  118A  	fcall	_Lcd_Cmd
  2326                           
  2327                           ;LCD.c: 85:  }
  2328  04CE  2CE0               	goto	l170
  2329  04CF                     l1748:
  2330  04CF  3002               	movlw	2
  2331  04D0  064D               	xorwf	Lcd_Set_Cursor@a,w
  2332  04D1  1D03               	btfss	3,2
  2333  04D2  2CD4               	goto	u1071
  2334  04D3  2CD5               	goto	u1070
  2335  04D4                     u1071:
  2336  04D4  2CE0               	goto	l170
  2337  04D5                     u1070:
  2338  04D5                     l1750:
  2339                           
  2340                           ;LCD.c: 87:  {;LCD.c: 88:   temp = 0xC0 + b - 1;
  2341  04D5  0877               	movf	Lcd_Set_Cursor@b,w
  2342  04D6  3EBF               	addlw	191
  2343  04D7  00CC               	movwf	??_Lcd_Set_Cursor
  2344  04D8  084C               	movf	??_Lcd_Set_Cursor,w
  2345  04D9  00CE               	movwf	Lcd_Set_Cursor@temp
  2346  04DA                     l1752:
  2347                           
  2348                           ;LCD.c: 92:   Lcd_Cmd(temp);
  2349  04DA  084E               	movf	Lcd_Set_Cursor@temp,w
  2350  04DB  120A  118A  2523  120A  118A  	fcall	_Lcd_Cmd
  2351  04E0                     l170:
  2352  04E0  0008               	return
  2353  04E1                     __end_of_Lcd_Set_Cursor:
  2354                           
  2355                           	psect	text10
  2356  02CD                     __ptext10:	
  2357 ;; *************** function _Lcd_Init *****************
  2358 ;; Defined at:
  2359 ;;		line 96 in file "LCD.c"
  2360 ;; Parameters:    Size  Location     Type
  2361 ;;		None
  2362 ;; Auto vars:     Size  Location     Type
  2363 ;;		None
  2364 ;; Return value:  Size  Location     Type
  2365 ;;                  1    wreg      void 
  2366 ;; Registers used:
  2367 ;;		wreg, status,2, status,0, pclath, cstack
  2368 ;; Tracked objects:
  2369 ;;		On entry : 0/0
  2370 ;;		On exit  : 0/0
  2371 ;;		Unchanged: 0/0
  2372 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2373 ;;      Params:         0       0       0       0       0
  2374 ;;      Locals:         0       0       0       0       0
  2375 ;;      Temps:          0       2       0       0       0
  2376 ;;      Totals:         0       2       0       0       0
  2377 ;;Total ram usage:        2 bytes
  2378 ;; Hardware stack levels used:    1
  2379 ;; Hardware stack levels required when called:    4
  2380 ;; This function calls:
  2381 ;;		_Lcd_Cmd
  2382 ;;		_Lcd_Port
  2383 ;; This function is called by:
  2384 ;;		_main
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387                           
  2388                           
  2389                           ;psect for function _Lcd_Init
  2390  02CD                     _Lcd_Init:
  2391  02CD                     l1730:	
  2392                           ;incstack = 0
  2393                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2394                           
  2395                           
  2396                           ;LCD.c: 98:   Lcd_Port(0x00);
  2397  02CD  3000               	movlw	0
  2398  02CE  120A  118A  2584  120A  118A  	fcall	_Lcd_Port
  2399  02D3                     l1732:
  2400                           
  2401                           ;LCD.c: 99:    _delay((unsigned long)((20)*(8000000/4000.0)));
  2402  02D3  3034               	movlw	52
  2403  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  2404  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  2405  02D6  00CD               	movwf	??_Lcd_Init+1
  2406  02D7  30F1               	movlw	241
  2407  02D8  00CC               	movwf	??_Lcd_Init
  2408  02D9                     u1217:
  2409  02D9  0BCC               	decfsz	??_Lcd_Init,f
  2410  02DA  2AD9               	goto	u1217
  2411  02DB  0BCD               	decfsz	??_Lcd_Init+1,f
  2412  02DC  2AD9               	goto	u1217
  2413  02DD                     l1734:
  2414                           
  2415                           ;LCD.c: 100:   Lcd_Cmd(0x30);
  2416  02DD  3030               	movlw	48
  2417  02DE  120A  118A  2523  120A  118A  	fcall	_Lcd_Cmd
  2418                           
  2419                           ;LCD.c: 101:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2420  02E3  300D               	movlw	13
  2421  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  2422  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  2423  02E6  00CD               	movwf	??_Lcd_Init+1
  2424  02E7  30FB               	movlw	251
  2425  02E8  00CC               	movwf	??_Lcd_Init
  2426  02E9                     u1227:
  2427  02E9  0BCC               	decfsz	??_Lcd_Init,f
  2428  02EA  2AE9               	goto	u1227
  2429  02EB  0BCD               	decfsz	??_Lcd_Init+1,f
  2430  02EC  2AE9               	goto	u1227
  2431  02ED                     l1736:
  2432                           
  2433                           ;LCD.c: 102:   Lcd_Cmd(0x30);
  2434  02ED  3030               	movlw	48
  2435  02EE  120A  118A  2523  120A  118A  	fcall	_Lcd_Cmd
  2436  02F3                     l1738:
  2437                           
  2438                           ;LCD.c: 103:  _delay((unsigned long)((11)*(8000000/4000.0)));
  2439  02F3  301D               	movlw	29
  2440  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  2441  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  2442  02F6  00CD               	movwf	??_Lcd_Init+1
  2443  02F7  3090               	movlw	144
  2444  02F8  00CC               	movwf	??_Lcd_Init
  2445  02F9                     u1237:
  2446  02F9  0BCC               	decfsz	??_Lcd_Init,f
  2447  02FA  2AF9               	goto	u1237
  2448  02FB  0BCD               	decfsz	??_Lcd_Init+1,f
  2449  02FC  2AF9               	goto	u1237
  2450  02FD  0000               	nop
  2451                           
  2452                           ;LCD.c: 104:   Lcd_Cmd(0x30);
  2453  02FE  3030               	movlw	48
  2454  02FF  120A  118A  2523  120A  118A  	fcall	_Lcd_Cmd
  2455                           
  2456                           ;LCD.c: 106:   Lcd_Cmd(0x38);
  2457  0304  3038               	movlw	56
  2458  0305  120A  118A  2523  120A  118A  	fcall	_Lcd_Cmd
  2459                           
  2460                           ;LCD.c: 107:   Lcd_Cmd(0x0C);
  2461  030A  300C               	movlw	12
  2462  030B  120A  118A  2523  120A  118A  	fcall	_Lcd_Cmd
  2463                           
  2464                           ;LCD.c: 108:   Lcd_Cmd(0x01);
  2465  0310  3001               	movlw	1
  2466  0311  120A  118A  2523  120A  118A  	fcall	_Lcd_Cmd
  2467                           
  2468                           ;LCD.c: 109:   Lcd_Cmd(0x06);
  2469  0316  3006               	movlw	6
  2470  0317  120A  118A  2523  120A  118A  	fcall	_Lcd_Cmd
  2471  031C                     l173:
  2472  031C  0008               	return
  2473  031D                     __end_of_Lcd_Init:
  2474                           
  2475                           	psect	text11
  2476  0553                     __ptext11:	
  2477 ;; *************** function _Lcd_Clear *****************
  2478 ;; Defined at:
  2479 ;;		line 69 in file "LCD.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;		None
  2482 ;; Auto vars:     Size  Location     Type
  2483 ;;		None
  2484 ;; Return value:  Size  Location     Type
  2485 ;;                  1    wreg      void 
  2486 ;; Registers used:
  2487 ;;		wreg, status,2, status,0, pclath, cstack
  2488 ;; Tracked objects:
  2489 ;;		On entry : 0/0
  2490 ;;		On exit  : 0/0
  2491 ;;		Unchanged: 0/0
  2492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2493 ;;      Params:         0       0       0       0       0
  2494 ;;      Locals:         0       0       0       0       0
  2495 ;;      Temps:          0       0       0       0       0
  2496 ;;      Totals:         0       0       0       0       0
  2497 ;;Total ram usage:        0 bytes
  2498 ;; Hardware stack levels used:    1
  2499 ;; Hardware stack levels required when called:    4
  2500 ;; This function calls:
  2501 ;;		_Lcd_Cmd
  2502 ;; This function is called by:
  2503 ;;		_main
  2504 ;; This function uses a non-reentrant model
  2505 ;;
  2506                           
  2507                           
  2508                           ;psect for function _Lcd_Clear
  2509  0553                     _Lcd_Clear:
  2510  0553                     l1740:	
  2511                           ;incstack = 0
  2512                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2513                           
  2514                           
  2515                           ;LCD.c: 71:  Lcd_Cmd(0);
  2516  0553  3000               	movlw	0
  2517  0554  120A  118A  2523  120A  118A  	fcall	_Lcd_Cmd
  2518                           
  2519                           ;LCD.c: 72:  Lcd_Cmd(1);
  2520  0559  3001               	movlw	1
  2521  055A  120A  118A  2523  120A  118A  	fcall	_Lcd_Cmd
  2522  055F                     l164:
  2523  055F  0008               	return
  2524  0560                     __end_of_Lcd_Clear:
  2525                           
  2526                           	psect	text12
  2527  0523                     __ptext12:	
  2528 ;; *************** function _Lcd_Cmd *****************
  2529 ;; Defined at:
  2530 ;;		line 60 in file "LCD.c"
  2531 ;; Parameters:    Size  Location     Type
  2532 ;;  a               1    wreg     unsigned char 
  2533 ;; Auto vars:     Size  Location     Type
  2534 ;;  a               1    6[COMMON] unsigned char 
  2535 ;; Return value:  Size  Location     Type
  2536 ;;                  1    wreg      void 
  2537 ;; Registers used:
  2538 ;;		wreg, status,2, status,0, pclath, cstack
  2539 ;; Tracked objects:
  2540 ;;		On entry : 0/0
  2541 ;;		On exit  : 0/0
  2542 ;;		Unchanged: 0/0
  2543 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2544 ;;      Params:         0       0       0       0       0
  2545 ;;      Locals:         1       0       0       0       0
  2546 ;;      Temps:          2       0       0       0       0
  2547 ;;      Totals:         3       0       0       0       0
  2548 ;;Total ram usage:        3 bytes
  2549 ;; Hardware stack levels used:    1
  2550 ;; Hardware stack levels required when called:    3
  2551 ;; This function calls:
  2552 ;;		_Lcd_Port
  2553 ;; This function is called by:
  2554 ;;		_Lcd_Clear
  2555 ;;		_Lcd_Set_Cursor
  2556 ;;		_Lcd_Init
  2557 ;; This function uses a non-reentrant model
  2558 ;;
  2559                           
  2560                           
  2561                           ;psect for function _Lcd_Cmd
  2562  0523                     _Lcd_Cmd:
  2563                           
  2564                           ;incstack = 0
  2565                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2566                           ;Lcd_Cmd@a stored from wreg
  2567  0523  00F6               	movwf	Lcd_Cmd@a
  2568  0524                     l1670:
  2569                           
  2570                           ;LCD.c: 60: void Lcd_Cmd(char a);LCD.c: 61: {;LCD.c: 62:  RE0 = 0;
  2571  0524  1283               	bcf	3,5	;RP0=0, select bank0
  2572  0525  1303               	bcf	3,6	;RP1=0, select bank0
  2573  0526  1009               	bcf	9,0	;volatile
  2574  0527                     l1672:
  2575                           
  2576                           ;LCD.c: 63:  Lcd_Port(a);
  2577  0527  0876               	movf	Lcd_Cmd@a,w
  2578  0528  120A  118A  2584  120A  118A  	fcall	_Lcd_Port
  2579  052D                     l1674:
  2580                           
  2581                           ;LCD.c: 64:  RE1 = 1;
  2582  052D  1283               	bcf	3,5	;RP0=0, select bank0
  2583  052E  1303               	bcf	3,6	;RP1=0, select bank0
  2584  052F  1489               	bsf	9,1	;volatile
  2585  0530                     l1676:
  2586                           
  2587                           ;LCD.c: 65:         _delay((unsigned long)((4)*(8000000/4000.0)));
  2588  0530  300B               	movlw	11
  2589  0531  00F5               	movwf	??_Lcd_Cmd+1
  2590  0532  3062               	movlw	98
  2591  0533  00F4               	movwf	??_Lcd_Cmd
  2592  0534                     u1247:
  2593  0534  0BF4               	decfsz	??_Lcd_Cmd,f
  2594  0535  2D34               	goto	u1247
  2595  0536  0BF5               	decfsz	??_Lcd_Cmd+1,f
  2596  0537  2D34               	goto	u1247
  2597  0538  0000               	nop
  2598  0539                     l1678:
  2599                           
  2600                           ;LCD.c: 66:         RE1 = 0;
  2601  0539  1283               	bcf	3,5	;RP0=0, select bank0
  2602  053A  1303               	bcf	3,6	;RP1=0, select bank0
  2603  053B  1089               	bcf	9,1	;volatile
  2604  053C                     l161:
  2605  053C  0008               	return
  2606  053D                     __end_of_Lcd_Cmd:
  2607                           
  2608                           	psect	text13
  2609  0584                     __ptext13:	
  2610 ;; *************** function _Lcd_Port *****************
  2611 ;; Defined at:
  2612 ;;		line 17 in file "LCD.c"
  2613 ;; Parameters:    Size  Location     Type
  2614 ;;  a               1    wreg     unsigned char 
  2615 ;; Auto vars:     Size  Location     Type
  2616 ;;  a               1    3[COMMON] unsigned char 
  2617 ;; Return value:  Size  Location     Type
  2618 ;;                  1    wreg      void 
  2619 ;; Registers used:
  2620 ;;		wreg
  2621 ;; Tracked objects:
  2622 ;;		On entry : 0/0
  2623 ;;		On exit  : 0/0
  2624 ;;		Unchanged: 0/0
  2625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2626 ;;      Params:         0       0       0       0       0
  2627 ;;      Locals:         1       0       0       0       0
  2628 ;;      Temps:          0       0       0       0       0
  2629 ;;      Totals:         1       0       0       0       0
  2630 ;;Total ram usage:        1 bytes
  2631 ;; Hardware stack levels used:    1
  2632 ;; Hardware stack levels required when called:    2
  2633 ;; This function calls:
  2634 ;;		Nothing
  2635 ;; This function is called by:
  2636 ;;		_Lcd_Cmd
  2637 ;;		_Lcd_Init
  2638 ;;		_Lcd_Write_Char
  2639 ;; This function uses a non-reentrant model
  2640 ;;
  2641                           
  2642                           
  2643                           ;psect for function _Lcd_Port
  2644  0584                     _Lcd_Port:
  2645                           
  2646                           ;incstack = 0
  2647                           ; Regs used in _Lcd_Port: [wreg]
  2648                           ;Lcd_Port@a stored from wreg
  2649  0584  00F3               	movwf	Lcd_Port@a
  2650  0585                     l1668:
  2651                           
  2652                           ;LCD.c: 17: void Lcd_Port(char a);LCD.c: 18: {;LCD.c: 19:     PORTD = a;
  2653  0585  0873               	movf	Lcd_Port@a,w
  2654  0586  1283               	bcf	3,5	;RP0=0, select bank0
  2655  0587  1303               	bcf	3,6	;RP1=0, select bank0
  2656  0588  0088               	movwf	8	;volatile
  2657  0589                     l158:
  2658  0589  0008               	return
  2659  058A                     __end_of_Lcd_Port:
  2660                           
  2661                           	psect	text14
  2662  0226                     __ptext14:	
  2663 ;; *************** function _ADC_CH1 *****************
  2664 ;; Defined at:
  2665 ;;		line 191 in file "main.c"
  2666 ;; Parameters:    Size  Location     Type
  2667 ;;		None
  2668 ;; Auto vars:     Size  Location     Type
  2669 ;;		None
  2670 ;; Return value:  Size  Location     Type
  2671 ;;                  1    wreg      void 
  2672 ;; Registers used:
  2673 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2674 ;; Tracked objects:
  2675 ;;		On entry : 0/0
  2676 ;;		On exit  : 0/0
  2677 ;;		Unchanged: 0/0
  2678 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2679 ;;      Params:         0       0       0       0       0
  2680 ;;      Locals:         0       0       0       0       0
  2681 ;;      Temps:          0       2       0       0       0
  2682 ;;      Totals:         0       2       0       0       0
  2683 ;;Total ram usage:        2 bytes
  2684 ;; Hardware stack levels used:    1
  2685 ;; Hardware stack levels required when called:    3
  2686 ;; This function calls:
  2687 ;;		_ADC_ch
  2688 ;;		_ADC_val
  2689 ;;		___awdiv
  2690 ;;		___wmul
  2691 ;; This function is called by:
  2692 ;;		_main
  2693 ;; This function uses a non-reentrant model
  2694 ;;
  2695                           
  2696                           
  2697                           ;psect for function _ADC_CH1
  2698  0226                     _ADC_CH1:
  2699  0226                     l1780:	
  2700                           ;incstack = 0
  2701                           ; Regs used in _ADC_CH1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2702                           
  2703                           
  2704                           ;main.c: 192:     ADC_ch(1);
  2705  0226  3001               	movlw	1
  2706  0227  00F3               	movwf	ADC_ch@channel
  2707  0228  3000               	movlw	0
  2708  0229  00F4               	movwf	ADC_ch@channel+1
  2709  022A  120A  118A  24E1  120A  118A  	fcall	_ADC_ch
  2710  022F                     l1782:
  2711                           
  2712                           ;main.c: 193:     ADCON0bits.ADCS0 = 1;
  2713  022F  1283               	bcf	3,5	;RP0=0, select bank0
  2714  0230  1303               	bcf	3,6	;RP1=0, select bank0
  2715  0231  171F               	bsf	31,6	;volatile
  2716  0232                     l1784:
  2717                           
  2718                           ;main.c: 194:     ADCON0bits.ADCS1 = 0;
  2719  0232  139F               	bcf	31,7	;volatile
  2720  0233                     l1786:
  2721                           
  2722                           ;main.c: 195:     ADCON0bits.ADON = 1;
  2723  0233  141F               	bsf	31,0	;volatile
  2724  0234                     l1788:
  2725                           
  2726                           ;main.c: 196:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2727  0234  3019               	movlw	25
  2728  0235  1283               	bcf	3,5	;RP0=0, select bank0
  2729  0236  1303               	bcf	3,6	;RP1=0, select bank0
  2730  0237  00D6               	movwf	??_ADC_CH1
  2731  0238                     u1257:
  2732  0238  0BD6               	decfsz	??_ADC_CH1,f
  2733  0239  2A38               	goto	u1257
  2734  023A  2A3B               	nop2
  2735  023B                     l1790:
  2736                           
  2737                           ;main.c: 197:     ADCON0bits.GO = 1;
  2738  023B  1283               	bcf	3,5	;RP0=0, select bank0
  2739  023C  1303               	bcf	3,6	;RP1=0, select bank0
  2740  023D  149F               	bsf	31,1	;volatile
  2741                           
  2742                           ;main.c: 198:     while (ADCON0bits.GO != 0) {
  2743  023E  2A75               	goto	l1796
  2744  023F                     l1792:
  2745                           
  2746                           ;main.c: 199:         ADC_res2 = ADC_val(ADRESL, ADRESH);
  2747  023F  081E               	movf	30,w	;volatile
  2748  0240  00D6               	movwf	??_ADC_CH1
  2749  0241  0856               	movf	??_ADC_CH1,w
  2750  0242  00F3               	movwf	ADC_val@ADRES_H
  2751  0243  1683               	bsf	3,5	;RP0=1, select bank1
  2752  0244  1303               	bcf	3,6	;RP1=0, select bank1
  2753  0245  081E               	movf	30,w	;volatile
  2754  0246  120A  118A  2574  120A  118A  	fcall	_ADC_val
  2755  024B  1283               	bcf	3,5	;RP0=0, select bank0
  2756  024C  1303               	bcf	3,6	;RP1=0, select bank0
  2757  024D  00D7               	movwf	??_ADC_CH1+1
  2758  024E  0857               	movf	??_ADC_CH1+1,w
  2759  024F  00F9               	movwf	_ADC_res2
  2760  0250                     l1794:
  2761                           
  2762                           ;main.c: 200:         VAL2 = ((ADC_res2 * 50) / 255);
  2763  0250  30FF               	movlw	255
  2764  0251  00CE               	movwf	___awdiv@divisor
  2765  0252  3000               	movlw	0
  2766  0253  00CF               	movwf	___awdiv@divisor+1
  2767  0254  0879               	movf	_ADC_res2,w
  2768  0255  00D6               	movwf	??_ADC_CH1
  2769  0256  01D7               	clrf	??_ADC_CH1+1
  2770  0257  0856               	movf	??_ADC_CH1,w
  2771  0258  00F3               	movwf	___wmul@multiplier
  2772  0259  0857               	movf	??_ADC_CH1+1,w
  2773  025A  00F4               	movwf	___wmul@multiplier+1
  2774  025B  3032               	movlw	50
  2775  025C  00F5               	movwf	___wmul@multiplicand
  2776  025D  3000               	movlw	0
  2777  025E  00F6               	movwf	___wmul@multiplicand+1
  2778  025F  120A  118A  2490  120A  118A  	fcall	___wmul
  2779  0264  0874               	movf	?___wmul+1,w
  2780  0265  1283               	bcf	3,5	;RP0=0, select bank0
  2781  0266  1303               	bcf	3,6	;RP1=0, select bank0
  2782  0267  00D1               	movwf	___awdiv@dividend+1
  2783  0268  0873               	movf	?___wmul,w
  2784  0269  00D0               	movwf	___awdiv@dividend
  2785  026A  120A  118A  21BD  120A  118A  	fcall	___awdiv
  2786  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2787  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2788  0271  084F               	movf	?___awdiv+1,w
  2789  0272  00A3               	movwf	_VAL2+1
  2790  0273  084E               	movf	?___awdiv,w
  2791  0274  00A2               	movwf	_VAL2
  2792  0275                     l1796:
  2793                           
  2794                           ;main.c: 198:     while (ADCON0bits.GO != 0) {
  2795  0275  189F               	btfsc	31,1	;volatile
  2796  0276  2A78               	goto	u1121
  2797  0277  2A79               	goto	u1120
  2798  0278                     u1121:
  2799  0278  2A3F               	goto	l1792
  2800  0279                     u1120:
  2801  0279                     l126:
  2802  0279  0008               	return
  2803  027A                     __end_of_ADC_CH1:
  2804                           
  2805                           	psect	text15
  2806  027A                     __ptext15:	
  2807 ;; *************** function _ADC_CH0 *****************
  2808 ;; Defined at:
  2809 ;;		line 176 in file "main.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;		None
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;		None
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2823 ;;      Params:         0       0       0       0       0
  2824 ;;      Locals:         0       0       0       0       0
  2825 ;;      Temps:          0       2       0       0       0
  2826 ;;      Totals:         0       2       0       0       0
  2827 ;;Total ram usage:        2 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    3
  2830 ;; This function calls:
  2831 ;;		_ADC_ch
  2832 ;;		_ADC_val
  2833 ;;		___awdiv
  2834 ;;		___wmul
  2835 ;; This function is called by:
  2836 ;;		_main
  2837 ;; This function uses a non-reentrant model
  2838 ;;
  2839                           
  2840                           
  2841                           ;psect for function _ADC_CH0
  2842  027A                     _ADC_CH0:
  2843  027A                     l1762:	
  2844                           ;incstack = 0
  2845                           ; Regs used in _ADC_CH0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2846                           
  2847                           
  2848                           ;main.c: 177:     ADC_ch(0);
  2849  027A  3000               	movlw	0
  2850  027B  00F3               	movwf	ADC_ch@channel
  2851  027C  00F4               	movwf	ADC_ch@channel+1
  2852  027D  120A  118A  24E1  120A  118A  	fcall	_ADC_ch
  2853  0282                     l1764:
  2854                           
  2855                           ;main.c: 179:     ADCON0bits.ADCS0 = 1;
  2856  0282  1283               	bcf	3,5	;RP0=0, select bank0
  2857  0283  1303               	bcf	3,6	;RP1=0, select bank0
  2858  0284  171F               	bsf	31,6	;volatile
  2859  0285                     l1766:
  2860                           
  2861                           ;main.c: 180:     ADCON0bits.ADCS1 = 0;
  2862  0285  139F               	bcf	31,7	;volatile
  2863  0286                     l1768:
  2864                           
  2865                           ;main.c: 181:     ADCON0bits.ADON = 1;
  2866  0286  141F               	bsf	31,0	;volatile
  2867  0287                     l1770:
  2868                           
  2869                           ;main.c: 182:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2870  0287  3019               	movlw	25
  2871  0288  1283               	bcf	3,5	;RP0=0, select bank0
  2872  0289  1303               	bcf	3,6	;RP1=0, select bank0
  2873  028A  00D6               	movwf	??_ADC_CH0
  2874  028B                     u1267:
  2875  028B  0BD6               	decfsz	??_ADC_CH0,f
  2876  028C  2A8B               	goto	u1267
  2877  028D  2A8E               	nop2
  2878  028E                     l1772:
  2879                           
  2880                           ;main.c: 183:     ADCON0bits.GO = 1;
  2881  028E  1283               	bcf	3,5	;RP0=0, select bank0
  2882  028F  1303               	bcf	3,6	;RP1=0, select bank0
  2883  0290  149F               	bsf	31,1	;volatile
  2884                           
  2885                           ;main.c: 184:     while (ADCON0bits.GO != 0) {
  2886  0291  2AC8               	goto	l1778
  2887  0292                     l1774:
  2888                           
  2889                           ;main.c: 185:         ADC_res1 = ADC_val(ADRESL, ADRESH);
  2890  0292  081E               	movf	30,w	;volatile
  2891  0293  00D6               	movwf	??_ADC_CH0
  2892  0294  0856               	movf	??_ADC_CH0,w
  2893  0295  00F3               	movwf	ADC_val@ADRES_H
  2894  0296  1683               	bsf	3,5	;RP0=1, select bank1
  2895  0297  1303               	bcf	3,6	;RP1=0, select bank1
  2896  0298  081E               	movf	30,w	;volatile
  2897  0299  120A  118A  2574  120A  118A  	fcall	_ADC_val
  2898  029E  1283               	bcf	3,5	;RP0=0, select bank0
  2899  029F  1303               	bcf	3,6	;RP1=0, select bank0
  2900  02A0  00D7               	movwf	??_ADC_CH0+1
  2901  02A1  0857               	movf	??_ADC_CH0+1,w
  2902  02A2  00FA               	movwf	_ADC_res1
  2903  02A3                     l1776:
  2904                           
  2905                           ;main.c: 186:         VAL1 = ((ADC_res1 * 50) / 255);
  2906  02A3  30FF               	movlw	255
  2907  02A4  00CE               	movwf	___awdiv@divisor
  2908  02A5  3000               	movlw	0
  2909  02A6  00CF               	movwf	___awdiv@divisor+1
  2910  02A7  087A               	movf	_ADC_res1,w
  2911  02A8  00D6               	movwf	??_ADC_CH0
  2912  02A9  01D7               	clrf	??_ADC_CH0+1
  2913  02AA  0856               	movf	??_ADC_CH0,w
  2914  02AB  00F3               	movwf	___wmul@multiplier
  2915  02AC  0857               	movf	??_ADC_CH0+1,w
  2916  02AD  00F4               	movwf	___wmul@multiplier+1
  2917  02AE  3032               	movlw	50
  2918  02AF  00F5               	movwf	___wmul@multiplicand
  2919  02B0  3000               	movlw	0
  2920  02B1  00F6               	movwf	___wmul@multiplicand+1
  2921  02B2  120A  118A  2490  120A  118A  	fcall	___wmul
  2922  02B7  0874               	movf	?___wmul+1,w
  2923  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  2924  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  2925  02BA  00D1               	movwf	___awdiv@dividend+1
  2926  02BB  0873               	movf	?___wmul,w
  2927  02BC  00D0               	movwf	___awdiv@dividend
  2928  02BD  120A  118A  21BD  120A  118A  	fcall	___awdiv
  2929  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  2930  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  2931  02C4  084F               	movf	?___awdiv+1,w
  2932  02C5  00A5               	movwf	_VAL1+1
  2933  02C6  084E               	movf	?___awdiv,w
  2934  02C7  00A4               	movwf	_VAL1
  2935  02C8                     l1778:
  2936                           
  2937                           ;main.c: 184:     while (ADCON0bits.GO != 0) {
  2938  02C8  189F               	btfsc	31,1	;volatile
  2939  02C9  2ACB               	goto	u1111
  2940  02CA  2ACC               	goto	u1110
  2941  02CB                     u1111:
  2942  02CB  2A92               	goto	l1774
  2943  02CC                     u1110:
  2944  02CC                     l120:
  2945  02CC  0008               	return
  2946  02CD                     __end_of_ADC_CH0:
  2947                           
  2948                           	psect	text16
  2949  0490                     __ptext16:	
  2950 ;; *************** function ___wmul *****************
  2951 ;; Defined at:
  2952 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  2953 ;; Parameters:    Size  Location     Type
  2954 ;;  multiplier      2    3[COMMON] unsigned int 
  2955 ;;  multiplicand    2    5[COMMON] unsigned int 
  2956 ;; Auto vars:     Size  Location     Type
  2957 ;;  product         2    0[BANK0 ] unsigned int 
  2958 ;; Return value:  Size  Location     Type
  2959 ;;                  2    3[COMMON] unsigned int 
  2960 ;; Registers used:
  2961 ;;		wreg, status,2, status,0
  2962 ;; Tracked objects:
  2963 ;;		On entry : 0/0
  2964 ;;		On exit  : 0/0
  2965 ;;		Unchanged: 0/0
  2966 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2967 ;;      Params:         4       0       0       0       0
  2968 ;;      Locals:         0       2       0       0       0
  2969 ;;      Temps:          0       0       0       0       0
  2970 ;;      Totals:         4       2       0       0       0
  2971 ;;Total ram usage:        6 bytes
  2972 ;; Hardware stack levels used:    1
  2973 ;; Hardware stack levels required when called:    2
  2974 ;; This function calls:
  2975 ;;		Nothing
  2976 ;; This function is called by:
  2977 ;;		_ADC_CH0
  2978 ;;		_ADC_CH1
  2979 ;; This function uses a non-reentrant model
  2980 ;;
  2981                           
  2982                           
  2983                           ;psect for function ___wmul
  2984  0490                     ___wmul:
  2985  0490                     l1690:	
  2986                           ;incstack = 0
  2987                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2988                           
  2989  0490  1283               	bcf	3,5	;RP0=0, select bank0
  2990  0491  1303               	bcf	3,6	;RP1=0, select bank0
  2991  0492  01CC               	clrf	___wmul@product
  2992  0493  01CD               	clrf	___wmul@product+1
  2993  0494                     l1692:
  2994  0494  1C73               	btfss	___wmul@multiplier,0
  2995  0495  2C97               	goto	u951
  2996  0496  2C98               	goto	u950
  2997  0497                     u951:
  2998  0497  2CA0               	goto	l322
  2999  0498                     u950:
  3000  0498                     l1694:
  3001  0498  0875               	movf	___wmul@multiplicand,w
  3002  0499  1283               	bcf	3,5	;RP0=0, select bank0
  3003  049A  1303               	bcf	3,6	;RP1=0, select bank0
  3004  049B  07CC               	addwf	___wmul@product,f
  3005  049C  1803               	skipnc
  3006  049D  0ACD               	incf	___wmul@product+1,f
  3007  049E  0876               	movf	___wmul@multiplicand+1,w
  3008  049F  07CD               	addwf	___wmul@product+1,f
  3009  04A0                     l322:
  3010  04A0  3001               	movlw	1
  3011  04A1                     u965:
  3012  04A1  1003               	clrc
  3013  04A2  0DF5               	rlf	___wmul@multiplicand,f
  3014  04A3  0DF6               	rlf	___wmul@multiplicand+1,f
  3015  04A4  3EFF               	addlw	-1
  3016  04A5  1D03               	skipz
  3017  04A6  2CA1               	goto	u965
  3018  04A7                     l1696:
  3019  04A7  3001               	movlw	1
  3020  04A8                     u975:
  3021  04A8  1003               	clrc
  3022  04A9  0CF4               	rrf	___wmul@multiplier+1,f
  3023  04AA  0CF3               	rrf	___wmul@multiplier,f
  3024  04AB  3EFF               	addlw	-1
  3025  04AC  1D03               	skipz
  3026  04AD  2CA8               	goto	u975
  3027  04AE                     l1698:
  3028  04AE  0873               	movf	___wmul@multiplier,w
  3029  04AF  0474               	iorwf	___wmul@multiplier+1,w
  3030  04B0  1D03               	btfss	3,2
  3031  04B1  2CB3               	goto	u981
  3032  04B2  2CB4               	goto	u980
  3033  04B3                     u981:
  3034  04B3  2C94               	goto	l1692
  3035  04B4                     u980:
  3036  04B4                     l1700:
  3037  04B4  1283               	bcf	3,5	;RP0=0, select bank0
  3038  04B5  1303               	bcf	3,6	;RP1=0, select bank0
  3039  04B6  084D               	movf	___wmul@product+1,w
  3040  04B7  00F4               	movwf	?___wmul+1
  3041  04B8  084C               	movf	___wmul@product,w
  3042  04B9  00F3               	movwf	?___wmul
  3043  04BA                     l324:
  3044  04BA  0008               	return
  3045  04BB                     __end_of___wmul:
  3046                           
  3047                           	psect	text17
  3048  01BD                     __ptext17:	
  3049 ;; *************** function ___awdiv *****************
  3050 ;; Defined at:
  3051 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
  3052 ;; Parameters:    Size  Location     Type
  3053 ;;  divisor         2    2[BANK0 ] int 
  3054 ;;  dividend        2    4[BANK0 ] int 
  3055 ;; Auto vars:     Size  Location     Type
  3056 ;;  quotient        2    8[BANK0 ] int 
  3057 ;;  sign            1    7[BANK0 ] unsigned char 
  3058 ;;  counter         1    6[BANK0 ] unsigned char 
  3059 ;; Return value:  Size  Location     Type
  3060 ;;                  2    2[BANK0 ] int 
  3061 ;; Registers used:
  3062 ;;		wreg, status,2, status,0
  3063 ;; Tracked objects:
  3064 ;;		On entry : 0/0
  3065 ;;		On exit  : 0/0
  3066 ;;		Unchanged: 0/0
  3067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3068 ;;      Params:         0       4       0       0       0
  3069 ;;      Locals:         0       4       0       0       0
  3070 ;;      Temps:          1       0       0       0       0
  3071 ;;      Totals:         1       8       0       0       0
  3072 ;;Total ram usage:        9 bytes
  3073 ;; Hardware stack levels used:    1
  3074 ;; Hardware stack levels required when called:    2
  3075 ;; This function calls:
  3076 ;;		Nothing
  3077 ;; This function is called by:
  3078 ;;		_ADC_CH0
  3079 ;;		_ADC_CH1
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082                           
  3083                           
  3084                           ;psect for function ___awdiv
  3085  01BD                     ___awdiv:
  3086  01BD                     l1302:	
  3087                           ;incstack = 0
  3088                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3089                           
  3090  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  3091  01BE  1303               	bcf	3,6	;RP1=0, select bank0
  3092  01BF  01D3               	clrf	___awdiv@sign
  3093  01C0                     l1304:
  3094  01C0  1FCF               	btfss	___awdiv@divisor+1,7
  3095  01C1  29C3               	goto	u531
  3096  01C2  29C4               	goto	u530
  3097  01C3                     u531:
  3098  01C3  29CB               	goto	l1310
  3099  01C4                     u530:
  3100  01C4                     l1306:
  3101  01C4  09CE               	comf	___awdiv@divisor,f
  3102  01C5  09CF               	comf	___awdiv@divisor+1,f
  3103  01C6  0ACE               	incf	___awdiv@divisor,f
  3104  01C7  1903               	skipnz
  3105  01C8  0ACF               	incf	___awdiv@divisor+1,f
  3106  01C9                     l1308:
  3107  01C9  01D3               	clrf	___awdiv@sign
  3108  01CA  0AD3               	incf	___awdiv@sign,f
  3109  01CB                     l1310:
  3110  01CB  1FD1               	btfss	___awdiv@dividend+1,7
  3111  01CC  29CE               	goto	u541
  3112  01CD  29CF               	goto	u540
  3113  01CE                     u541:
  3114  01CE  29D8               	goto	l1316
  3115  01CF                     u540:
  3116  01CF                     l1312:
  3117  01CF  09D0               	comf	___awdiv@dividend,f
  3118  01D0  09D1               	comf	___awdiv@dividend+1,f
  3119  01D1  0AD0               	incf	___awdiv@dividend,f
  3120  01D2  1903               	skipnz
  3121  01D3  0AD1               	incf	___awdiv@dividend+1,f
  3122  01D4                     l1314:
  3123  01D4  3001               	movlw	1
  3124  01D5  00F7               	movwf	??___awdiv
  3125  01D6  0877               	movf	??___awdiv,w
  3126  01D7  06D3               	xorwf	___awdiv@sign,f
  3127  01D8                     l1316:
  3128  01D8  01D4               	clrf	___awdiv@quotient
  3129  01D9  01D5               	clrf	___awdiv@quotient+1
  3130  01DA                     l1318:
  3131  01DA  084E               	movf	___awdiv@divisor,w
  3132  01DB  044F               	iorwf	___awdiv@divisor+1,w
  3133  01DC  1903               	btfsc	3,2
  3134  01DD  29DF               	goto	u551
  3135  01DE  29E0               	goto	u550
  3136  01DF                     u551:
  3137  01DF  2A17               	goto	l1338
  3138  01E0                     u550:
  3139  01E0                     l1320:
  3140  01E0  01D2               	clrf	___awdiv@counter
  3141  01E1  0AD2               	incf	___awdiv@counter,f
  3142  01E2  29EE               	goto	l1326
  3143  01E3                     l1322:
  3144  01E3  3001               	movlw	1
  3145  01E4                     u565:
  3146  01E4  1003               	clrc
  3147  01E5  0DCE               	rlf	___awdiv@divisor,f
  3148  01E6  0DCF               	rlf	___awdiv@divisor+1,f
  3149  01E7  3EFF               	addlw	-1
  3150  01E8  1D03               	skipz
  3151  01E9  29E4               	goto	u565
  3152  01EA                     l1324:
  3153  01EA  3001               	movlw	1
  3154  01EB  00F7               	movwf	??___awdiv
  3155  01EC  0877               	movf	??___awdiv,w
  3156  01ED  07D2               	addwf	___awdiv@counter,f
  3157  01EE                     l1326:
  3158  01EE  1FCF               	btfss	___awdiv@divisor+1,7
  3159  01EF  29F1               	goto	u571
  3160  01F0  29F2               	goto	u570
  3161  01F1                     u571:
  3162  01F1  29E3               	goto	l1322
  3163  01F2                     u570:
  3164  01F2                     l1328:
  3165  01F2  3001               	movlw	1
  3166  01F3                     u585:
  3167  01F3  1003               	clrc
  3168  01F4  0DD4               	rlf	___awdiv@quotient,f
  3169  01F5  0DD5               	rlf	___awdiv@quotient+1,f
  3170  01F6  3EFF               	addlw	-1
  3171  01F7  1D03               	skipz
  3172  01F8  29F3               	goto	u585
  3173  01F9  084F               	movf	___awdiv@divisor+1,w
  3174  01FA  0251               	subwf	___awdiv@dividend+1,w
  3175  01FB  1D03               	skipz
  3176  01FC  29FF               	goto	u595
  3177  01FD  084E               	movf	___awdiv@divisor,w
  3178  01FE  0250               	subwf	___awdiv@dividend,w
  3179  01FF                     u595:
  3180  01FF  1C03               	skipc
  3181  0200  2A02               	goto	u591
  3182  0201  2A03               	goto	u590
  3183  0202                     u591:
  3184  0202  2A0A               	goto	l1334
  3185  0203                     u590:
  3186  0203                     l1330:
  3187  0203  084E               	movf	___awdiv@divisor,w
  3188  0204  02D0               	subwf	___awdiv@dividend,f
  3189  0205  084F               	movf	___awdiv@divisor+1,w
  3190  0206  1C03               	skipc
  3191  0207  03D1               	decf	___awdiv@dividend+1,f
  3192  0208  02D1               	subwf	___awdiv@dividend+1,f
  3193  0209                     l1332:
  3194  0209  1454               	bsf	___awdiv@quotient,0
  3195  020A                     l1334:
  3196  020A  3001               	movlw	1
  3197  020B                     u605:
  3198  020B  1003               	clrc
  3199  020C  0CCF               	rrf	___awdiv@divisor+1,f
  3200  020D  0CCE               	rrf	___awdiv@divisor,f
  3201  020E  3EFF               	addlw	-1
  3202  020F  1D03               	skipz
  3203  0210  2A0B               	goto	u605
  3204  0211                     l1336:
  3205  0211  3001               	movlw	1
  3206  0212  02D2               	subwf	___awdiv@counter,f
  3207  0213  1D03               	btfss	3,2
  3208  0214  2A16               	goto	u611
  3209  0215  2A17               	goto	u610
  3210  0216                     u611:
  3211  0216  29F2               	goto	l1328
  3212  0217                     u610:
  3213  0217                     l1338:
  3214  0217  0853               	movf	___awdiv@sign,w
  3215  0218  1903               	btfsc	3,2
  3216  0219  2A1B               	goto	u621
  3217  021A  2A1C               	goto	u620
  3218  021B                     u621:
  3219  021B  2A21               	goto	l1342
  3220  021C                     u620:
  3221  021C                     l1340:
  3222  021C  09D4               	comf	___awdiv@quotient,f
  3223  021D  09D5               	comf	___awdiv@quotient+1,f
  3224  021E  0AD4               	incf	___awdiv@quotient,f
  3225  021F  1903               	skipnz
  3226  0220  0AD5               	incf	___awdiv@quotient+1,f
  3227  0221                     l1342:
  3228  0221  0855               	movf	___awdiv@quotient+1,w
  3229  0222  00CF               	movwf	?___awdiv+1
  3230  0223  0854               	movf	___awdiv@quotient,w
  3231  0224  00CE               	movwf	?___awdiv
  3232  0225                     l475:
  3233  0225  0008               	return
  3234  0226                     __end_of___awdiv:
  3235                           
  3236                           	psect	text18
  3237  0574                     __ptext18:	
  3238 ;; *************** function _ADC_val *****************
  3239 ;; Defined at:
  3240 ;;		line 12 in file "ADC.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  ADRES_L         1    wreg     unsigned char 
  3243 ;;  ADRES_H         1    3[COMMON] unsigned char 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  ADRES_L         1    0[COMMON] unsigned char 
  3246 ;; Return value:  Size  Location     Type
  3247 ;;                  1    wreg      unsigned char 
  3248 ;; Registers used:
  3249 ;;		wreg
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3255 ;;      Params:         1       0       0       0       0
  3256 ;;      Locals:         0       0       0       0       0
  3257 ;;      Temps:          1       0       0       0       0
  3258 ;;      Totals:         2       0       0       0       0
  3259 ;;Total ram usage:        2 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; Hardware stack levels required when called:    2
  3262 ;; This function calls:
  3263 ;;		Nothing
  3264 ;; This function is called by:
  3265 ;;		_ADC_CH0
  3266 ;;		_ADC_CH1
  3267 ;; This function uses a non-reentrant model
  3268 ;;
  3269                           
  3270                           
  3271                           ;psect for function _ADC_val
  3272  0574                     _ADC_val:
  3273  0574                     l1264:	
  3274                           ;incstack = 0
  3275                           ; Regs used in _ADC_val: [wreg]
  3276                           
  3277                           
  3278                           ;ADC.c: 13:     VALOR_ADC = ((ADRESL << 8) | ADRESH);
  3279  0574  1283               	bcf	3,5	;RP0=0, select bank0
  3280  0575  1303               	bcf	3,6	;RP1=0, select bank0
  3281  0576  081E               	movf	30,w	;volatile
  3282  0577  00F4               	movwf	??_ADC_val
  3283  0578  0874               	movf	??_ADC_val,w
  3284  0579  00A6               	movwf	_VALOR_ADC
  3285                           
  3286                           ;ADC.c: 15:     return VALOR_ADC;
  3287  057A  0826               	movf	_VALOR_ADC,w
  3288  057B                     l139:
  3289  057B  0008               	return
  3290  057C                     __end_of_ADC_val:
  3291                           
  3292                           	psect	text19
  3293  04E1                     __ptext19:	
  3294 ;; *************** function _ADC_ch *****************
  3295 ;; Defined at:
  3296 ;;		line 18 in file "ADC.c"
  3297 ;; Parameters:    Size  Location     Type
  3298 ;;  channel         2    3[COMMON] unsigned short 
  3299 ;; Auto vars:     Size  Location     Type
  3300 ;;		None
  3301 ;; Return value:  Size  Location     Type
  3302 ;;                  2    3[COMMON] unsigned int 
  3303 ;; Registers used:
  3304 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3305 ;; Tracked objects:
  3306 ;;		On entry : 0/0
  3307 ;;		On exit  : 0/0
  3308 ;;		Unchanged: 0/0
  3309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3310 ;;      Params:         2       0       0       0       0
  3311 ;;      Locals:         0       0       0       0       0
  3312 ;;      Temps:          0       0       0       0       0
  3313 ;;      Totals:         2       0       0       0       0
  3314 ;;Total ram usage:        2 bytes
  3315 ;; Hardware stack levels used:    1
  3316 ;; Hardware stack levels required when called:    2
  3317 ;; This function calls:
  3318 ;;		Nothing
  3319 ;; This function is called by:
  3320 ;;		_ADC_CH0
  3321 ;;		_ADC_CH1
  3322 ;; This function uses a non-reentrant model
  3323 ;;
  3324                           
  3325                           
  3326                           ;psect for function _ADC_ch
  3327  04E1                     _ADC_ch:
  3328  04E1                     l1254:	
  3329                           ;incstack = 0
  3330                           ; Regs used in _ADC_ch: [wreg-fsr0h+status,2+status,0]
  3331                           
  3332                           
  3333                           ;ADC.c: 19:      switch (channel) {
  3334  04E1  2CF7               	goto	l1258
  3335  04E2                     l143:	
  3336                           ;ADC.c: 20:         case 0:
  3337                           
  3338                           
  3339                           ;ADC.c: 21:             ADCON0bits.CHS3 = 0;
  3340  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  3341  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  3342  04E4  129F               	bcf	31,5	;volatile
  3343                           
  3344                           ;ADC.c: 22:             ADCON0bits.CHS2 = 0;
  3345  04E5  121F               	bcf	31,4	;volatile
  3346                           
  3347                           ;ADC.c: 23:             ADCON0bits.CHS1 = 0;
  3348  04E6  119F               	bcf	31,3	;volatile
  3349                           
  3350                           ;ADC.c: 24:             ADCON0bits.CHS0 = 0;
  3351  04E7  111F               	bcf	31,2	;volatile
  3352                           
  3353                           ;ADC.c: 26:             break;
  3354  04E8  2D04               	goto	l147
  3355  04E9                     l145:	
  3356                           ;ADC.c: 27:         case 1:
  3357                           
  3358                           
  3359                           ;ADC.c: 28:             ADCON0bits.CHS3 = 0;
  3360  04E9  1283               	bcf	3,5	;RP0=0, select bank0
  3361  04EA  1303               	bcf	3,6	;RP1=0, select bank0
  3362  04EB  129F               	bcf	31,5	;volatile
  3363                           
  3364                           ;ADC.c: 29:             ADCON0bits.CHS2 = 0;
  3365  04EC  121F               	bcf	31,4	;volatile
  3366                           
  3367                           ;ADC.c: 30:             ADCON0bits.CHS1 = 0;
  3368  04ED  119F               	bcf	31,3	;volatile
  3369                           
  3370                           ;ADC.c: 31:             ADCON0bits.CHS0 = 1;
  3371  04EE  151F               	bsf	31,2	;volatile
  3372                           
  3373                           ;ADC.c: 32:             break;
  3374  04EF  2D04               	goto	l147
  3375  04F0                     l146:	
  3376                           ;ADC.c: 33:         default:
  3377                           
  3378                           
  3379                           ;ADC.c: 34:             ADCON0bits.CHS3 = 0;
  3380  04F0  1283               	bcf	3,5	;RP0=0, select bank0
  3381  04F1  1303               	bcf	3,6	;RP1=0, select bank0
  3382  04F2  129F               	bcf	31,5	;volatile
  3383                           
  3384                           ;ADC.c: 35:             ADCON0bits.CHS2 = 0;
  3385  04F3  121F               	bcf	31,4	;volatile
  3386                           
  3387                           ;ADC.c: 36:             ADCON0bits.CHS1 = 0;
  3388  04F4  119F               	bcf	31,3	;volatile
  3389                           
  3390                           ;ADC.c: 37:             ADCON0bits.CHS0 = 0;
  3391  04F5  111F               	bcf	31,2	;volatile
  3392                           
  3393                           ;ADC.c: 38:             break;
  3394  04F6  2D04               	goto	l147
  3395  04F7                     l1258:
  3396                           
  3397                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3398                           ; Switch size 1, requested type "simple"
  3399                           ; Number of cases is 1, Range of values is 0 to 0
  3400                           ; switch strategies available:
  3401                           ; Name         Instructions Cycles
  3402                           ; simple_byte            4     3 (average)
  3403                           ; direct_byte           11     8 (fixed)
  3404                           ; jumptable            260     6 (fixed)
  3405                           ;	Chosen strategy is simple_byte
  3406  04F7  0874               	movf	ADC_ch@channel+1,w
  3407  04F8  3A00               	xorlw	0	; case 0
  3408  04F9  1903               	skipnz
  3409  04FA  2CFC               	goto	l1940
  3410  04FB  2CF0               	goto	l146
  3411  04FC                     l1940:
  3412                           
  3413                           ; Switch size 1, requested type "simple"
  3414                           ; Number of cases is 2, Range of values is 0 to 1
  3415                           ; switch strategies available:
  3416                           ; Name         Instructions Cycles
  3417                           ; simple_byte            7     4 (average)
  3418                           ; direct_byte           14     8 (fixed)
  3419                           ; jumptable            260     6 (fixed)
  3420                           ;	Chosen strategy is simple_byte
  3421  04FC  0873               	movf	ADC_ch@channel,w
  3422  04FD  3A00               	xorlw	0	; case 0
  3423  04FE  1903               	skipnz
  3424  04FF  2CE2               	goto	l143
  3425  0500  3A01               	xorlw	1	; case 1
  3426  0501  1903               	skipnz
  3427  0502  2CE9               	goto	l145
  3428  0503  2CF0               	goto	l146
  3429  0504                     l147:
  3430  0504  0008               	return
  3431  0505                     __end_of_ADC_ch:
  3432                           
  3433                           	psect	text20
  3434  045F                     __ptext20:	
  3435 ;; *************** function _ISR *****************
  3436 ;; Defined at:
  3437 ;;		line 66 in file "main.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;		None
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;		None
  3442 ;; Return value:  Size  Location     Type
  3443 ;;                  1    wreg      void 
  3444 ;; Registers used:
  3445 ;;		wreg, status,2, status,0, pclath, cstack
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 0/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3451 ;;      Params:         0       0       0       0       0
  3452 ;;      Locals:         0       0       0       0       0
  3453 ;;      Temps:          3       0       0       0       0
  3454 ;;      Totals:         3       0       0       0       0
  3455 ;;Total ram usage:        3 bytes
  3456 ;; Hardware stack levels used:    1
  3457 ;; Hardware stack levels required when called:    1
  3458 ;; This function calls:
  3459 ;;		_USART_LECTURA
  3460 ;; This function is called by:
  3461 ;;		Interrupt level 1
  3462 ;; This function uses a non-reentrant model
  3463 ;;
  3464                           
  3465                           
  3466                           ;psect for function _ISR
  3467  045F                     _ISR:
  3468  045F                     i1l1576:
  3469                           
  3470                           ;main.c: 67:     if (RCIF == 1) {
  3471  045F  1283               	bcf	3,5	;RP0=0, select bank0
  3472  0460  1303               	bcf	3,6	;RP1=0, select bank0
  3473  0461  1E8C               	btfss	12,5	;volatile
  3474  0462  2C64               	goto	u92_21
  3475  0463  2C65               	goto	u92_20
  3476  0464                     u92_21:
  3477  0464  2C89               	goto	i1l103
  3478  0465                     u92_20:
  3479  0465                     i1l1578:
  3480                           
  3481                           ;main.c: 68:         RCIF = 0;
  3482  0465  128C               	bcf	12,5	;volatile
  3483  0466                     i1l1580:
  3484                           
  3485                           ;main.c: 69:         USART_LEER = USART_LECTURA();
  3486  0466  120A  118A  257C  120A  118A  	fcall	_USART_LECTURA
  3487  046B  00F0               	movwf	??_ISR
  3488  046C  0870               	movf	??_ISR,w
  3489  046D  00F8               	movwf	_USART_LEER
  3490  046E                     i1l1582:
  3491                           
  3492                           ;main.c: 70:         if (USART_LEER == '+') {
  3493  046E  302B               	movlw	43
  3494  046F  0678               	xorwf	_USART_LEER,w
  3495  0470  1D03               	btfss	3,2
  3496  0471  2C73               	goto	u93_21
  3497  0472  2C74               	goto	u93_20
  3498  0473                     u93_21:
  3499  0473  2C7C               	goto	i1l1586
  3500  0474                     u93_20:
  3501  0474                     i1l1584:
  3502                           
  3503                           ;main.c: 71:             cont = cont + 1;
  3504  0474  1283               	bcf	3,5	;RP0=0, select bank0
  3505  0475  1303               	bcf	3,6	;RP1=0, select bank0
  3506  0476  0827               	movf	_cont,w
  3507  0477  3E01               	addlw	1
  3508  0478  00F0               	movwf	??_ISR
  3509  0479  0870               	movf	??_ISR,w
  3510  047A  00A7               	movwf	_cont
  3511                           
  3512                           ;main.c: 72:         }
  3513  047B  2C89               	goto	i1l103
  3514  047C                     i1l1586:
  3515  047C  302D               	movlw	45
  3516  047D  0678               	xorwf	_USART_LEER,w
  3517  047E  1D03               	btfss	3,2
  3518  047F  2C81               	goto	u94_21
  3519  0480  2C82               	goto	u94_20
  3520  0481                     u94_21:
  3521  0481  2C89               	goto	i1l103
  3522  0482                     u94_20:
  3523  0482                     i1l1588:
  3524                           
  3525                           ;main.c: 74:             cont = cont - 1;
  3526  0482  1283               	bcf	3,5	;RP0=0, select bank0
  3527  0483  1303               	bcf	3,6	;RP1=0, select bank0
  3528  0484  0827               	movf	_cont,w
  3529  0485  3EFF               	addlw	255
  3530  0486  00F0               	movwf	??_ISR
  3531  0487  0870               	movf	??_ISR,w
  3532  0488  00A7               	movwf	_cont
  3533  0489                     i1l103:
  3534  0489  0872               	movf	??_ISR+2,w
  3535  048A  008A               	movwf	10
  3536  048B  0E71               	swapf	??_ISR+1,w
  3537  048C  0083               	movwf	3
  3538  048D  0EFE               	swapf	btemp,f
  3539  048E  0E7E               	swapf	btemp,w
  3540  048F  0009               	retfie
  3541  0490                     __end_of_ISR:
  3542                           
  3543                           	psect	intentry
  3544  0004                     __pintentry:	
  3545                           ;incstack = 0
  3546                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  3547                           
  3548  0004                     interrupt_function:
  3549  007E                     saved_w	set	btemp
  3550  0004  00FE               	movwf	btemp
  3551  0005  0E03               	swapf	3,w
  3552  0006  00F1               	movwf	??_ISR+1
  3553  0007  080A               	movf	10,w
  3554  0008  00F2               	movwf	??_ISR+2
  3555  0009  120A  118A  2C5F   	ljmp	_ISR
  3556                           
  3557                           	psect	text21
  3558  057C                     __ptext21:	
  3559 ;; *************** function _USART_LECTURA *****************
  3560 ;; Defined at:
  3561 ;;		line 38 in file "USART.c"
  3562 ;; Parameters:    Size  Location     Type
  3563 ;;		None
  3564 ;; Auto vars:     Size  Location     Type
  3565 ;;		None
  3566 ;; Return value:  Size  Location     Type
  3567 ;;                  1    wreg      unsigned char 
  3568 ;; Registers used:
  3569 ;;		wreg
  3570 ;; Tracked objects:
  3571 ;;		On entry : 0/0
  3572 ;;		On exit  : 0/0
  3573 ;;		Unchanged: 0/0
  3574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3575 ;;      Params:         0       0       0       0       0
  3576 ;;      Locals:         0       0       0       0       0
  3577 ;;      Temps:          0       0       0       0       0
  3578 ;;      Totals:         0       0       0       0       0
  3579 ;;Total ram usage:        0 bytes
  3580 ;; Hardware stack levels used:    1
  3581 ;; This function calls:
  3582 ;;		Nothing
  3583 ;; This function is called by:
  3584 ;;		_ISR
  3585 ;; This function uses a non-reentrant model
  3586 ;;
  3587                           
  3588                           
  3589                           ;psect for function _USART_LECTURA
  3590  057C                     _USART_LECTURA:
  3591  057C                     i1l1394:	
  3592                           ;incstack = 0
  3593                           ; Regs used in _USART_LECTURA: [wreg]
  3594                           
  3595  057C                     i1l205:	
  3596                           ;USART.c: 39:   while(!RCIF);
  3597                           
  3598  057C  1283               	bcf	3,5	;RP0=0, select bank0
  3599  057D  1303               	bcf	3,6	;RP1=0, select bank0
  3600  057E  1E8C               	btfss	12,5	;volatile
  3601  057F  2D81               	goto	u76_21
  3602  0580  2D82               	goto	u76_20
  3603  0581                     u76_21:
  3604  0581  2D7C               	goto	i1l205
  3605  0582                     u76_20:
  3606  0582                     i1l1396:
  3607                           
  3608                           ;USART.c: 40:   return RCREG;
  3609  0582  081A               	movf	26,w	;volatile
  3610  0583                     i1l208:
  3611  0583  0008               	return
  3612  0584                     __end_of_USART_LECTURA:
  3613  007E                     btemp	set	126	;btemp
  3614  007E                     wtemp0	set	126
  3615                           
  3616                           	psect	config
  3617                           
  3618                           ;Config register CONFIG1 @ 0x2007
  3619                           ;	Oscillator Selection bits
  3620                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  3621                           ;	Watchdog Timer Enable bit
  3622                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3623                           ;	Power-up Timer Enable bit
  3624                           ;	PWRTE = OFF, PWRT disabled
  3625                           ;	RE3/MCLR pin function select bit
  3626                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3627                           ;	Code Protection bit
  3628                           ;	CP = OFF, Program memory code protection is disabled
  3629                           ;	Data Code Protection bit
  3630                           ;	CPD = OFF, Data memory code protection is disabled
  3631                           ;	Brown Out Reset Selection bits
  3632                           ;	BOREN = ON, BOR enabled
  3633                           ;	Internal External Switchover bit
  3634                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3635                           ;	Fail-Safe Clock Monitor Enabled bit
  3636                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3637                           ;	Low Voltage Programming Enable bit
  3638                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3639                           ;	In-Circuit Debugger Mode bit
  3640                           ;	DEBUG = 0x1, unprogrammed default
  3641  2007                     	org	8199
  3642  2007  23D2               	dw	9170
  3643                           
  3644                           ;Config register CONFIG2 @ 0x2008
  3645                           ;	Brown-out Reset Selection bit
  3646                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3647                           ;	Flash Program Memory Self Write Enable bits
  3648                           ;	WRT = OFF, Write protection off
  3649  2008                     	org	8200
  3650  2008  3FFF               	dw	16383

Data Sizes:
    Strings     43
    Constant    10
    Data        0
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     29      73
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_5(CODE[16]), STR_4(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> data2(BANK0[16]), data1(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    USART_STRING@a	PTR unsigned char  size(1) Largest target is 20
		 -> data1(BANK0[20]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> data2(BANK0[16]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _USART_STRING->_USART_ESCRITURA
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _ADC_CH1->___awdiv
    _ADC_CH0->___awdiv
    ___awdiv->___wmul

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _ADC_CH1->___awdiv
    _ADC_CH0->___awdiv
    ___awdiv->___wmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    6020
                                             26 BANK0      3     3      0
                            _ADC_CH0
                            _ADC_CH1
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                    _USART_ESCRITURA
                       _USART_STRING
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    18      7    1680
                                              9 BANK0     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USART_STRING                                         3     3      0     145
                                              4 COMMON     3     3      0
                    _USART_ESCRITURA
 ---------------------------------------------------------------------------------
 (2) _USART_ESCRITURA                                      1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     552
                                              6 COMMON     2     0      2
                                              0 BANK0      5     5      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0      62
                                              4 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       4     3      1     614
                                              7 COMMON     1     0      1
                                              0 BANK0      3     3      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      93
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      62
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0      62
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_CH1                                              2     2      0    1426
                                             10 BANK0      2     2      0
                             _ADC_ch
                            _ADC_val
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _ADC_CH0                                              2     2      0    1426
                                             10 BANK0      2     2      0
                             _ADC_ch
                            _ADC_val
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     496
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     604
                                              7 COMMON     1     1      0
                                              2 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADC_val                                              3     2      1     152
                                              3 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ADC_ch                                               2     0      2     174
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
                      _USART_LECTURA
 ---------------------------------------------------------------------------------
 (5) _USART_LECTURA                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CH0
     _ADC_ch
     _ADC_val
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _ADC_CH1
     _ADC_ch
     _ADC_val
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _USART_ESCRITURA
   _USART_STRING
     _USART_ESCRITURA
   _setup
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _ISR (ROOT)
   _USART_LECTURA

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      54       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1D      49       5       91.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      54      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Feb 12 21:49:08 2021

                        pc 0002               ___awdiv@sign 0053                         fsr 0004  
      ___wmul@multiplicand 0075                        l120 02CC                        l202 0522  
                      l114 045E                        l126 0279                        l143 04E2  
                      l145 04E9                        l161 053C                        l146 04F0  
                      l322 04A0                        l170 04E0                        l147 0504  
                      l139 057B                        l324 04BA                        l164 055F  
                      l173 031C                        l158 0589                        l182 03A8  
                      l318 0108                        l176 0552                        l193 0561  
                      l196 056B                        l604 0429                        l475 0225  
                      l594 0362                        _RE0 0048                        _RE1 0049  
                      u610 0217                        u530 01C4                        u611 0216  
                      u531 01C3                        u620 021C                        u540 01CF  
                      u700 03F6                        _ISR 045F                        u621 021B  
                      u605 020B                        u541 01CE                        u701 03F5  
                      u550 01E0                        u551 01DF                        u480 0567  
                      u720 0408                        u481 0566                        u721 0407  
                      u570 01F2                        u730 0412                        u571 01F1  
                      u731 0411                        u715 03FA                        u565 01E4  
                      u590 0203                        u910 0522                        u750 0425  
                      u591 0202                        u911 0521                        u751 0424  
                      u735 040E                        u585 01F3                        u745 0419  
                      u595 01FF                        u950 0498                        u951 0497  
                      u980 04B4                        u981 04B3                        u965 04A1  
                      u990 0327                        u975 04A8                        u991 0326  
          __end_of_ADC_CH0 02CD            __end_of_ADC_CH1 027A                        fsr0 0004  
                      indf 0000            __end_of_ADC_val 057C                       ?_ISR 0070  
                     l1310 01CB                       l1302 01BD                       l1320 01E0  
                     l1312 01CF                       l1304 01C0                       l1400 042A  
                     l1330 0203                       l1322 01E3                       l1314 01D4  
                     l1306 01C4                       l1250 0561                       l1410 0449  
                     l1402 042E                       l1340 021C                       l1332 0209  
                     l1324 01EA                       l1316 01D8                       l1308 01C9  
                     l1252 0567                       l1420 0453                       l1412 044A  
                     l1404 042F                       l1254 04E1                       l1342 0221  
                     l1334 020A                       l1326 01EE                       l1318 01DA  
                     l1430 0458                       l1422 0454                       l1414 044B  
                     l1406 0441                       l1264 0574                       l1336 0211  
                     l1328 01F2                       l1432 0459                       l1424 0455  
                     l1416 044E                       l1408 0442                       l1258 04F7  
                     l1338 0217                       l1434 045C                       l1426 0456  
                     l1418 044F                       l1700 04B4                       l1436 045D  
                     l1428 0457                       l1380 0404                       l1372 03EE  
                     l1710 032A                       l1382 0408                       l1374 03F6  
                     l1390 0425                       l1720 0350                       l1712 0331  
                     l1704 031D                       l1384 0412                       l1376 03F9  
                     l1800 0027                       l1730 02CD                       l1570 0508  
                     l1722 0351                       l1714 0335                       l1706 0321  
                     l1386 0418                       l1378 0400                       l1810 003A  
                     l1802 002D                       l1740 0553                       l1732 02D3  
                     l1572 0513                       l1724 0358                       l1716 0339  
                     l1708 0327                       l1388 041F                       l1820 006B  
                     l1812 0057                       l1804 0034                       l1670 0524  
                     l1734 02DD                       l1750 04D5                       l1742 04BE  
                     l1574 0517                       l1718 034A                       l1726 035E  
                     l1822 0070                       l1814 005F                       l1806 0039  
                     l1672 0527                       l1736 02ED                       l1752 04DA  
                     l1744 04C3                       l1680 053E                       l1760 038C  
                     l1568 0506                       l1840 00A9                       l1832 008E  
                     l1816 0063                       l1690 0490                       l1770 0287  
                     l1762 027A                       l1674 052D                       l1738 02F3  
                     l1746 04C8                       l1682 0541                       l1754 0363  
                     l1842 00AE                       l1834 0098                       l1818 0067  
                     l1850 00F2                       l1940 04FC                       l1692 0494  
                     l1772 028E                       l1764 0282                       l1780 0226  
                     l1668 0585                       l1676 0530                       l1748 04CF  
                     l1684 0547                       l1756 0368                       l1844 00DE  
                     l1836 009E                       l1828 0072                       l1852 0104  
                     l1860 0109                       l1694 0498                       l1774 0292  
                     l1766 0285                       l1790 023B                       l1782 022F  
                     l1678 0539                       l1686 054A                       l1758 0384  
                     l1846 00E5                       l1838 00A5                       l1870 0123  
                     l1862 010E                       l1696 04A7                       l1776 02A3  
                     l1768 0286                       l1792 023F                       l1784 0232  
                     l1688 054F                       l1848 00E9                       l1880 0156  
                     l1872 012C                       l1864 0111                       l1698 04AE  
                     l1778 02C8                       l1794 0250                       l1786 0233  
                     l1938 004C                       l1890 0187                       l1882 015B  
                     l1874 0138                       l1866 0116                       l1796 0275  
                     l1788 0234                       l1892 018D                       l1884 0160  
                     l1876 0141                       l1868 011B                       l1798 0022  
                     l1894 01A8                       l1886 017B                       l1878 014D  
                     l1896 01B0                       l1888 0181                       STR_1 03E2  
                     STR_2 03E6                       STR_3 03EA                       STR_4 03D3  
                     STR_5 03C3                       u1010 0339                       u1011 0338  
                     u1100 03A8                       u1101 03A7                       u1005 032B  
                     u1110 02CC                       u1030 034A                       u1111 02CB  
                     u1031 0349                       u1120 0279                       u1121 0278  
                     u1025 033A                       u1050 035E                       u1130 002D  
                     u1051 035D                       u1035 0346                       u1131 002C  
                     u1060 04C3                       u1140 0067                       u1061 04C2  
                     u1045 0352                       u1141 0066                       u1070 04D5  
                     u1150 008D                       u1071 04D4                       u1207 054C  
                     u1151 008C                       u1080 0372                       u1160 0098  
                     u1217 02D9                       u1161 0097                       u1090 0396  
                     u1170 009E                       u1227 02E9                       u1171 009D  
                     u1155 0089                       u1180 00F2                       u1237 02F9  
                     u1181 00F1                       u1190 0104                       u1247 0534  
                     u1191 0103                       u1257 0238                       u1267 028B  
                     _RCIF 0065                       _VAL1 0024                       _VAL2 0022  
                     _TRMT 04C1          ?_Lcd_Write_String 0076                       _cont 0027  
                     _main 0109                       btemp 007E                       start 000C  
       ??_Lcd_Write_String 004C            __end_of_Lcd_Cmd 053D                      ??_ISR 0070  
                    ?_main 0070            __end_of___awdiv 0226                      _ANSEL 0188  
          ___awdiv@divisor 004E            __end_of___lwdiv 0363                      i1l103 0489  
                    i1l205 057C                      i1l208 0583            __end_of___lwmod 042A  
          ___awdiv@counter 0052                      _RCREG 001A                      _SPBRG 0099  
                    _PORTA 0005                      _PORTB 0006                      _PORTC 0007  
                    _PORTD 0008                      _PORTE 0009    __size_of_Lcd_Set_Cursor 0026  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088                      _TRISE 0089                      u76_20 0582  
                    u92_20 0465                      u76_21 0581                      u92_21 0464  
                    u93_20 0474                      u93_21 0473                      u94_20 0482  
                    u94_21 0481                      _TXREG 0019                      _data1 0028  
                    _data2 003C            __end_of_dpowers 03C3                      _setup 042A  
                    pclath 000A                      status 0003                      wtemp0 007E  
          __end_of_sprintf 0109             ADC_val@ADRES_H 0073             ADC_val@ADRES_L 0070  
          ??_USART_LECTURA 0070           __end_of_Lcd_Init 031D           __end_of_Lcd_Port 058A  
          __initialization 000F               __end_of_main 01BD                  ??_ADC_CH0 0056  
                ??_ADC_CH1 0056                  ??_ADC_val 0074           USART_ESCRITURA@a 0073  
                   ??_main 0066         __size_of_Lcd_Clear 000D                     _ADCON1 009F  
                   _ADRESH 001E                     _ADRESL 009E                     _ADC_ch 04E1  
         ___awdiv@dividend 0050                     ?_setup 0070                     _ANSELH 0189  
                   i1l1394 057C                     i1l1396 0582                     i1l1580 0466  
                   i1l1582 046E              USART_STRING@a 0075                     i1l1584 0474  
                   i1l1576 045F                     i1l1586 047C                     i1l1578 0465  
                   i1l1588 0482              USART_STRING@i 0076                     _INTCON 000B  
                ??_Lcd_Cmd 0074    __size_of_Lcd_Write_Char 0016                     ___wmul 0490  
                ??___awdiv 0077                  ??___lwdiv 0077                  ??___lwmod 0053  
         ___awdiv@quotient 0054                     saved_w 007E                  ??_sprintf 005C  
          Lcd_Set_Cursor@a 004D            Lcd_Set_Cursor@b 0077    __end_of__initialization 001B  
        __end_of_Lcd_Clear 0560             __pcstackCOMMON 0070              __end_of_setup 045F  
           _Lcd_Set_Cursor 04BB                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
                  ?_ADC_ch 0073                    ??_setup 0073                 __pbssBANK0 0020  
               __pmaintext 0109                    ?___wmul 0073                 __pintentry 0004  
                  _ADC_CH0 027A                    _ADC_CH1 0226  __size_of_Lcd_Write_String 0046  
   __end_of_Lcd_Set_Cursor 04E1                    _ADC_val 0574   __size_of_USART_ESCRITURA 000C  
               ??_Lcd_Init 004C                 ??_Lcd_Port 0073            __size_of_ADC_ch 0024  
               __stringtab 03A9             _Lcd_Write_Char 053D                    _Lcd_Cmd 0523  
                  ___awdiv 01BD            __size_of___wmul 002B                    ___lwdiv 031D  
                  ___lwmod 03EE                    _channel 0020            ?_Lcd_Set_Cursor 0077  
                  __ptext1 001F                    __ptext2 03EE                    __ptext3 031D  
                  __ptext4 042A                    __ptext5 0505                    __ptext6 0560  
                  __ptext7 0363                    __ptext8 053D                    __ptext9 04BB  
             __size_of_ISR 0031                    _dpowers 03B9                    _sprintf 001F  
                  clrloop0 056D     __end_of_Lcd_Write_Char 0553       end_of_initialization 001B  
    __end_of_USART_LECTURA 0584                  _RCSTAbits 0018                  _VALOR_ADC 0026  
                Lcd_Port@a 0073          ??_USART_ESCRITURA 0073              ?_USART_STRING 0070  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0076          Lcd_Write_String@i 004F  
           __end_of_ADC_ch 0505                  _TXSTAbits 0098                  _Lcd_Clear 0553  
           __end_of___wmul 04BB           _Lcd_Write_String 0363        start_initialization 000F  
              __end_of_ISR 0490             ??_USART_STRING 0074                   ??_ADC_ch 0075  
        __size_of_Lcd_Init 0050          __size_of_Lcd_Port 0006                 ?_Lcd_Clear 0070  
                 ??___wmul 0077                   ?_ADC_CH0 0070                   ?_ADC_CH1 0070  
          Lcd_Write_Char@a 0075                   ?_ADC_val 0073                __pbssCOMMON 0078  
                ___latbits 0002              __pcstackBANK0 004C                   ?_Lcd_Cmd 0070  
              sprintf@flag 0060                sprintf@prec 0061           ___lwdiv@dividend 0075  
         ??_Lcd_Set_Cursor 004C                   ?___awdiv 004E                   ?___lwdiv 0073  
                 ?___lwmod 004F                  __pstrings 03A9                   _ADC_res1 007A  
                 _ADC_res2 0079           ___lwdiv@quotient 004D                   ?_sprintf 0055  
           __size_of_setup 0035          interrupt_function 0004             ___wmul@product 004C  
                clear_ram0 056C                   _PIE1bits 008C                   Lcd_Cmd@a 0076  
                 _PIR1bits 000C                ??_Lcd_Clear 0077       __end_of_USART_STRING 0523  
          _USART_ESCRITURA 0560           __size_of_ADC_CH0 0053           __size_of_ADC_CH1 0054  
               _ADCON0bits 001F                __stringbase 03B8          ___wmul@multiplier 0073  
         __size_of_ADC_val 0008           ??_Lcd_Write_Char 0074                   _Lcd_Init 02CD  
                 _Lcd_Port 0584   __end_of_Lcd_Write_String 03A9           __size_of_Lcd_Cmd 001A  
         __size_of___awdiv 0069           __size_of___lwdiv 0046           __size_of___lwmod 003C  
       __end_of__stringtab 03B9                 sprintf@val 0062            ___lwdiv@divisor 0073  
          ___lwdiv@counter 004C                   __ptext10 02CD                   __ptext11 0553  
                 __ptext20 045F                   __ptext12 0523                   __ptext21 057C  
                 __ptext13 0584                   __ptext14 0226                   __ptext15 027A  
                 __ptext16 0490                   __ptext17 01BD                   __ptext18 0574  
                 __ptext19 04E1     __size_of_USART_LECTURA 0008           __size_of_sprintf 00EA  
            __size_of_main 00B4    __end_of_USART_ESCRITURA 056C                 _INTCONbits 000B  
            ADC_ch@channel 0073                   intlevel1 0000                  sprintf@ap 005F  
                sprintf@sp 0064           ___lwmod@dividend 0051      __size_of_USART_STRING 001E  
                stringcode 03B3              _USART_LECTURA 057C         Lcd_Set_Cursor@temp 004E  
               _OPTION_REG 0081                   sprintf@c 0065                   sprintf@f 0055  
          ___lwmod@divisor 004F            ___lwmod@counter 0054                   stringdir 03B3  
                 stringtab 03A9               _USART_STRING 0505                 _USART_LEER 0078  
         ?_USART_ESCRITURA 0070             ?_USART_LECTURA 0070  
