

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Feb 12 22:31:52 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	text7,local,class=CODE,merge=1,delta=2
    19                           	psect	text8,local,class=CODE,merge=1,delta=2
    20                           	psect	text9,local,class=CODE,merge=1,delta=2
    21                           	psect	text10,local,class=CODE,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,merge=1,delta=2
    24                           	psect	text13,local,class=CODE,merge=1,delta=2
    25                           	psect	text14,local,class=CODE,merge=1,delta=2
    26                           	psect	text15,local,class=CODE,merge=1,delta=2
    27                           	psect	text16,local,class=CODE,merge=1,delta=2,group=2
    28                           	psect	text17,local,class=CODE,merge=1,delta=2,group=2
    29                           	psect	text18,local,class=CODE,merge=1,delta=2
    30                           	psect	text19,local,class=CODE,merge=1,delta=2
    31                           	psect	text20,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 2.20
    37                           ; Generated 12/02/2020 GMT
    38                           ; 
    39                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0008                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001D                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  0081                     	;# 
   106  0085                     	;# 
   107  0086                     	;# 
   108  0087                     	;# 
   109  0088                     	;# 
   110  0089                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  008F                     	;# 
   115  0090                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0094                     	;# 
   122  0095                     	;# 
   123  0096                     	;# 
   124  0097                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009A                     	;# 
   128  009B                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  0105                     	;# 
   134  0107                     	;# 
   135  0108                     	;# 
   136  0109                     	;# 
   137  010C                     	;# 
   138  010C                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  010F                     	;# 
   142  0185                     	;# 
   143  0187                     	;# 
   144  0188                     	;# 
   145  0189                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  0007                     	;# 
   156  0008                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0088                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  0105                     	;# 
   212  0107                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  0185                     	;# 
   221  0187                     	;# 
   222  0188                     	;# 
   223  0189                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000D                     	;# 
   240  000E                     	;# 
   241  000E                     	;# 
   242  000F                     	;# 
   243  0010                     	;# 
   244  0011                     	;# 
   245  0012                     	;# 
   246  0013                     	;# 
   247  0014                     	;# 
   248  0015                     	;# 
   249  0015                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001D                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  0081                     	;# 
   262  0085                     	;# 
   263  0086                     	;# 
   264  0087                     	;# 
   265  0088                     	;# 
   266  0089                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  008F                     	;# 
   271  0090                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0093                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0095                     	;# 
   279  0096                     	;# 
   280  0097                     	;# 
   281  0098                     	;# 
   282  0099                     	;# 
   283  009A                     	;# 
   284  009B                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009E                     	;# 
   288  009F                     	;# 
   289  0105                     	;# 
   290  0107                     	;# 
   291  0108                     	;# 
   292  0109                     	;# 
   293  010C                     	;# 
   294  010C                     	;# 
   295  010D                     	;# 
   296  010E                     	;# 
   297  010F                     	;# 
   298  0185                     	;# 
   299  0187                     	;# 
   300  0188                     	;# 
   301  0189                     	;# 
   302  018C                     	;# 
   303  018D                     	;# 
   304  0000                     	;# 
   305  0001                     	;# 
   306  0002                     	;# 
   307  0003                     	;# 
   308  0004                     	;# 
   309  0005                     	;# 
   310  0006                     	;# 
   311  0007                     	;# 
   312  0008                     	;# 
   313  0009                     	;# 
   314  000A                     	;# 
   315  000B                     	;# 
   316  000C                     	;# 
   317  000D                     	;# 
   318  000E                     	;# 
   319  000E                     	;# 
   320  000F                     	;# 
   321  0010                     	;# 
   322  0011                     	;# 
   323  0012                     	;# 
   324  0013                     	;# 
   325  0014                     	;# 
   326  0015                     	;# 
   327  0015                     	;# 
   328  0016                     	;# 
   329  0017                     	;# 
   330  0018                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001B                     	;# 
   335  001C                     	;# 
   336  001D                     	;# 
   337  001E                     	;# 
   338  001F                     	;# 
   339  0081                     	;# 
   340  0085                     	;# 
   341  0086                     	;# 
   342  0087                     	;# 
   343  0088                     	;# 
   344  0089                     	;# 
   345  008C                     	;# 
   346  008D                     	;# 
   347  008E                     	;# 
   348  008F                     	;# 
   349  0090                     	;# 
   350  0091                     	;# 
   351  0092                     	;# 
   352  0093                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0094                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0098                     	;# 
   360  0099                     	;# 
   361  009A                     	;# 
   362  009B                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  009F                     	;# 
   367  0105                     	;# 
   368  0107                     	;# 
   369  0108                     	;# 
   370  0109                     	;# 
   371  010C                     	;# 
   372  010C                     	;# 
   373  010D                     	;# 
   374  010E                     	;# 
   375  010F                     	;# 
   376  0185                     	;# 
   377  0187                     	;# 
   378  0188                     	;# 
   379  0189                     	;# 
   380  018C                     	;# 
   381  018D                     	;# 
   382  0000                     	;# 
   383  0001                     	;# 
   384  0002                     	;# 
   385  0003                     	;# 
   386  0004                     	;# 
   387  0005                     	;# 
   388  0006                     	;# 
   389  0007                     	;# 
   390  0008                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  000E                     	;# 
   398  000F                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0014                     	;# 
   404  0015                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  001D                     	;# 
   415  001E                     	;# 
   416  001F                     	;# 
   417  0081                     	;# 
   418  0085                     	;# 
   419  0086                     	;# 
   420  0087                     	;# 
   421  0088                     	;# 
   422  0089                     	;# 
   423  008C                     	;# 
   424  008D                     	;# 
   425  008E                     	;# 
   426  008F                     	;# 
   427  0090                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0093                     	;# 
   431  0093                     	;# 
   432  0093                     	;# 
   433  0094                     	;# 
   434  0095                     	;# 
   435  0096                     	;# 
   436  0097                     	;# 
   437  0098                     	;# 
   438  0099                     	;# 
   439  009A                     	;# 
   440  009B                     	;# 
   441  009C                     	;# 
   442  009D                     	;# 
   443  009E                     	;# 
   444  009F                     	;# 
   445  0105                     	;# 
   446  0107                     	;# 
   447  0108                     	;# 
   448  0109                     	;# 
   449  010C                     	;# 
   450  010C                     	;# 
   451  010D                     	;# 
   452  010E                     	;# 
   453  010F                     	;# 
   454  0185                     	;# 
   455  0187                     	;# 
   456  0188                     	;# 
   457  0189                     	;# 
   458  018C                     	;# 
   459  018D                     	;# 
   460                           
   461                           	psect	strings
   462  03A9                     __pstrings:
   463  03A9                     stringtab:
   464  03A9                     __stringtab:
   465                           
   466                           ;	String table - string pointers are 1 byte each
   467  03A9  1BFF               	btfsc	btemp+1,7
   468  03AA  2BB3               	ljmp	stringcode
   469  03AB  1383               	bcf	3,7
   470  03AC  187F               	btfsc	btemp+1,0
   471  03AD  1783               	bsf	3,7
   472  03AE  0800               	movf	0,w
   473  03AF  0A84               	incf	4,f
   474  03B0  1903               	skipnz
   475  03B1  0AFF               	incf	btemp+1,f
   476  03B2  0008               	return
   477  03B3                     stringcode:
   478  03B3                     stringdir:
   479  03B3  3003               	movlw	high stringdir
   480  03B4  008A               	movwf	10
   481  03B5  0804               	movf	4,w
   482  03B6  0A84               	incf	4,f
   483  03B7  0782               	addwf	2,f
   484  03B8                     __stringbase:
   485  03B8  3400               	retlw	0
   486  03B9                     __end_of__stringtab:
   487  03B9                     _dpowers:
   488  03B9  3401               	retlw	1
   489  03BA  3400               	retlw	0
   490  03BB  340A               	retlw	10
   491  03BC  3400               	retlw	0
   492  03BD  3464               	retlw	100
   493  03BE  3400               	retlw	0
   494  03BF  34E8               	retlw	232
   495  03C0  3403               	retlw	3
   496  03C1  3410               	retlw	16
   497  03C2  3427               	retlw	39
   498  03C3                     __end_of_dpowers:
   499  0019                     _TXREG	set	25
   500  001E                     _ADRESH	set	30
   501  001F                     _ADCON0bits	set	31
   502  0018                     _RCSTAbits	set	24
   503  000B                     _INTCONbits	set	11
   504  000B                     _INTCON	set	11
   505  000C                     _PIR1bits	set	12
   506  0009                     _PORTE	set	9
   507  0008                     _PORTD	set	8
   508  0007                     _PORTC	set	7
   509  0006                     _PORTB	set	6
   510  0005                     _PORTA	set	5
   511  001A                     _RCREG	set	26
   512  0049                     _RE1	set	73
   513  0048                     _RE0	set	72
   514  0065                     _RCIF	set	101
   515  009E                     _ADRESL	set	158
   516  0098                     _TXSTAbits	set	152
   517  0099                     _SPBRG	set	153
   518  009A                     _SPBRGH	set	154
   519  0081                     _OPTION_REG	set	129
   520  008C                     _PIE1bits	set	140
   521  009F                     _ADCON1	set	159
   522  0089                     _TRISE	set	137
   523  0087                     _TRISC	set	135
   524  0086                     _TRISB	set	134
   525  0085                     _TRISA	set	133
   526  0088                     _TRISD	set	136
   527  04C1                     _TRMT	set	1217
   528  043F                     _TRISC7	set	1087
   529  0189                     _ANSELH	set	393
   530  0188                     _ANSEL	set	392
   531  03C3                     STR_5:
   532  03C3  3425               	retlw	37	;'%'
   533  03C4  3464               	retlw	100	;'d'
   534  03C5  3456               	retlw	86	;'V'
   535  03C6  3420               	retlw	32	;' '
   536  03C7  3420               	retlw	32	;' '
   537  03C8  3420               	retlw	32	;' '
   538  03C9  3425               	retlw	37	;'%'
   539  03CA  3464               	retlw	100	;'d'
   540  03CB  3456               	retlw	86	;'V'
   541  03CC  3420               	retlw	32	;' '
   542  03CD  3420               	retlw	32	;' '
   543  03CE  3420               	retlw	32	;' '
   544  03CF  3420               	retlw	32	;' '
   545  03D0  3425               	retlw	37	;'%'
   546  03D1  3464               	retlw	100	;'d'
   547  03D2  3400               	retlw	0
   548  03D3                     STR_4:
   549  03D3  3425               	retlw	37	;'%'
   550  03D4  3464               	retlw	100	;'d'
   551  03D5  3456               	retlw	86	;'V'
   552  03D6  3420               	retlw	32	;' '
   553  03D7  3420               	retlw	32	;' '
   554  03D8  3420               	retlw	32	;' '
   555  03D9  3425               	retlw	37	;'%'
   556  03DA  3464               	retlw	100	;'d'
   557  03DB  3456               	retlw	86	;'V'
   558  03DC  3420               	retlw	32	;' '
   559  03DD  3420               	retlw	32	;' '
   560  03DE  3420               	retlw	32	;' '
   561  03DF  3425               	retlw	37	;'%'
   562  03E0  3464               	retlw	100	;'d'
   563  03E1  3400               	retlw	0
   564  03E2                     STR_1:
   565  03E2  3453               	retlw	83	;'S'
   566  03E3  3431               	retlw	49	;'1'
   567  03E4  343A               	retlw	58	;':'
   568  03E5  3400               	retlw	0
   569  03E6                     STR_2:
   570  03E6  3453               	retlw	83	;'S'
   571  03E7  3432               	retlw	50	;'2'
   572  03E8  343A               	retlw	58	;':'
   573  03E9  3400               	retlw	0
   574  03EA                     STR_3:
   575  03EA  3453               	retlw	83	;'S'
   576  03EB  3433               	retlw	51	;'3'
   577  03EC  343A               	retlw	58	;':'
   578  03ED  3400               	retlw	0
   579                           
   580                           	psect	cinit
   581  000F                     start_initialization:	
   582                           ; #config settings
   583                           
   584  000F                     __initialization:
   585                           
   586                           ; Clear objects allocated to COMMON
   587  000F  01F8               	clrf	__pbssCOMMON& (0+127)
   588  0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   589  0011  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   590                           
   591                           ; Clear objects allocated to BANK0
   592  0012  1383               	bcf	3,7	;select IRP bank0
   593  0013  3020               	movlw	low __pbssBANK0
   594  0014  0084               	movwf	4
   595  0015  304C               	movlw	low (__pbssBANK0+44)
   596  0016  120A  118A  255D  120A  118A  	fcall	clear_ram0
   597  001B                     end_of_initialization:	
   598                           ;End of C runtime variable initialization code
   599                           
   600  001B                     __end_of__initialization:
   601  001B  0183               	clrf	3
   602  001C  120A  118A  2909   	ljmp	_main	;jump to C main() function
   603                           
   604                           	psect	bssCOMMON
   605  0078                     __pbssCOMMON:
   606  0078                     _USART_LEER:
   607  0078                     	ds	1
   608  0079                     _ADC_res2:
   609  0079                     	ds	1
   610  007A                     _ADC_res1:
   611  007A                     	ds	1
   612                           
   613                           	psect	bssBANK0
   614  0020                     __pbssBANK0:
   615  0020                     _channel:
   616  0020                     	ds	2
   617  0022                     _VAL2:
   618  0022                     	ds	2
   619  0024                     _VAL1:
   620  0024                     	ds	2
   621  0026                     _VALOR_ADC:
   622  0026                     	ds	1
   623  0027                     _cont:
   624  0027                     	ds	1
   625  0028                     _data1:
   626  0028                     	ds	20
   627  003C                     _data2:
   628  003C                     	ds	16
   629                           
   630                           	psect	clrtext
   631  055D                     clear_ram0:	
   632                           ;	Called with FSR containing the base address, and
   633                           ;	W with the last address+1
   634                           
   635  055D  0064               	clrwdt	;clear the watchdog before getting into this loop
   636  055E                     clrloop0:
   637  055E  0180               	clrf	0	;clear RAM location pointed to by FSR
   638  055F  0A84               	incf	4,f	;increment pointer
   639  0560  0604               	xorwf	4,w	;XOR with final address
   640  0561  1903               	btfsc	3,2	;have we reached the end yet?
   641  0562  3400               	retlw	0	;all done for this memory range, return
   642  0563  0604               	xorwf	4,w	;XOR again to restore value
   643  0564  2D5E               	goto	clrloop0	;do the next byte
   644                           
   645                           	psect	cstackCOMMON
   646  0070                     __pcstackCOMMON:
   647  0070                     ?_setup:
   648  0070                     ?_Lcd_Init:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0070                     ?_Lcd_Clear:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0070                     ?_ADC_CH0:	
   655                           ; 1 bytes @ 0x0
   656                           
   657  0070                     ?_ADC_CH1:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0070                     ?_USART_STRING:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0070                     ?_USART_ESCRITURA:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0070                     ?_ISR:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0070                     ??_ISR:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0070                     ?_main:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0070                     ?_Lcd_Port:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0070                     ?_Lcd_Cmd:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0070                     ?_Lcd_Write_Char:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0070                     ADC_val@ADRES_L:	
   685                           ; 1 bytes @ 0x0
   686                           
   687                           
   688                           ; 1 bytes @ 0x0
   689  0070                     	ds	3
   690  0073                     ??_setup:
   691  0073                     ??_USART_ESCRITURA:	
   692                           ; 1 bytes @ 0x3
   693                           
   694  0073                     ?_ADC_val:	
   695                           ; 1 bytes @ 0x3
   696                           
   697  0073                     ??_Lcd_Port:	
   698                           ; 1 bytes @ 0x3
   699                           
   700  0073                     ?_ADC_ch:	
   701                           ; 1 bytes @ 0x3
   702                           
   703  0073                     ?___wmul:	
   704                           ; 2 bytes @ 0x3
   705                           
   706  0073                     ?___lwdiv:	
   707                           ; 2 bytes @ 0x3
   708                           
   709  0073                     ADC_val@ADRES_H:	
   710                           ; 2 bytes @ 0x3
   711                           
   712  0073                     Lcd_Port@a:	
   713                           ; 1 bytes @ 0x3
   714                           
   715  0073                     USART_ESCRITURA@a:	
   716                           ; 1 bytes @ 0x3
   717                           
   718  0073                     ADC_ch@channel:	
   719                           ; 1 bytes @ 0x3
   720                           
   721  0073                     ___wmul@multiplier:	
   722                           ; 2 bytes @ 0x3
   723                           
   724  0073                     ___lwdiv@divisor:	
   725                           ; 2 bytes @ 0x3
   726                           
   727                           
   728                           ; 2 bytes @ 0x3
   729  0073                     	ds	1
   730  0074                     ??_USART_STRING:
   731  0074                     ??_ADC_val:	
   732                           ; 1 bytes @ 0x4
   733                           
   734  0074                     ??_Lcd_Cmd:	
   735                           ; 1 bytes @ 0x4
   736                           
   737  0074                     ??_Lcd_Write_Char:	
   738                           ; 1 bytes @ 0x4
   739                           
   740                           
   741                           ; 1 bytes @ 0x4
   742  0074                     	ds	1
   743  0075                     ??_ADC_ch:
   744  0075                     Lcd_Write_Char@a:	
   745                           ; 1 bytes @ 0x5
   746                           
   747  0075                     USART_STRING@a:	
   748                           ; 1 bytes @ 0x5
   749                           
   750  0075                     ___wmul@multiplicand:	
   751                           ; 1 bytes @ 0x5
   752                           
   753  0075                     ___lwdiv@dividend:	
   754                           ; 2 bytes @ 0x5
   755                           
   756                           
   757                           ; 2 bytes @ 0x5
   758  0075                     	ds	1
   759  0076                     ?_Lcd_Write_String:
   760  0076                     Lcd_Cmd@a:	
   761                           ; 1 bytes @ 0x6
   762                           
   763  0076                     USART_STRING@i:	
   764                           ; 1 bytes @ 0x6
   765                           
   766  0076                     Lcd_Write_String@a:	
   767                           ; 1 bytes @ 0x6
   768                           
   769                           
   770                           ; 2 bytes @ 0x6
   771  0076                     	ds	1
   772  0077                     ??_Lcd_Clear:
   773  0077                     ?_Lcd_Set_Cursor:	
   774                           ; 1 bytes @ 0x7
   775                           
   776  0077                     ??___wmul:	
   777                           ; 1 bytes @ 0x7
   778                           
   779  0077                     ??___awdiv:	
   780                           ; 1 bytes @ 0x7
   781                           
   782  0077                     ??___lwdiv:	
   783                           ; 1 bytes @ 0x7
   784                           
   785  0077                     Lcd_Set_Cursor@b:	
   786                           ; 1 bytes @ 0x7
   787                           
   788                           
   789                           ; 1 bytes @ 0x7
   790  0077                     	ds	1
   791                           
   792                           	psect	cstackBANK0
   793  004C                     __pcstackBANK0:
   794  004C                     ??_Lcd_Init:
   795  004C                     ??_Lcd_Set_Cursor:	
   796                           ; 1 bytes @ 0x0
   797                           
   798  004C                     ??_Lcd_Write_String:	
   799                           ; 1 bytes @ 0x0
   800                           
   801  004C                     ___lwdiv@counter:	
   802                           ; 1 bytes @ 0x0
   803                           
   804  004C                     ___wmul@product:	
   805                           ; 1 bytes @ 0x0
   806                           
   807                           
   808                           ; 2 bytes @ 0x0
   809  004C                     	ds	1
   810  004D                     Lcd_Set_Cursor@a:
   811  004D                     ___lwdiv@quotient:	
   812                           ; 1 bytes @ 0x1
   813                           
   814                           
   815                           ; 2 bytes @ 0x1
   816  004D                     	ds	1
   817  004E                     ?___awdiv:
   818  004E                     Lcd_Set_Cursor@temp:	
   819                           ; 2 bytes @ 0x2
   820                           
   821  004E                     ___awdiv@divisor:	
   822                           ; 1 bytes @ 0x2
   823                           
   824                           
   825                           ; 2 bytes @ 0x2
   826  004E                     	ds	1
   827  004F                     ?___lwmod:
   828  004F                     Lcd_Write_String@i:	
   829                           ; 2 bytes @ 0x3
   830                           
   831  004F                     ___lwmod@divisor:	
   832                           ; 2 bytes @ 0x3
   833                           
   834                           
   835                           ; 2 bytes @ 0x3
   836  004F                     	ds	1
   837  0050                     ___awdiv@dividend:
   838                           
   839                           ; 2 bytes @ 0x4
   840  0050                     	ds	1
   841  0051                     ___lwmod@dividend:
   842                           
   843                           ; 2 bytes @ 0x5
   844  0051                     	ds	1
   845  0052                     ___awdiv@counter:
   846                           
   847                           ; 1 bytes @ 0x6
   848  0052                     	ds	1
   849  0053                     ??___lwmod:
   850  0053                     ___awdiv@sign:	
   851                           ; 1 bytes @ 0x7
   852                           
   853                           
   854                           ; 1 bytes @ 0x7
   855  0053                     	ds	1
   856  0054                     ___lwmod@counter:
   857  0054                     ___awdiv@quotient:	
   858                           ; 1 bytes @ 0x8
   859                           
   860                           
   861                           ; 2 bytes @ 0x8
   862  0054                     	ds	1
   863  0055                     ?_sprintf:
   864  0055                     sprintf@f:	
   865                           ; 2 bytes @ 0x9
   866                           
   867                           
   868                           ; 1 bytes @ 0x9
   869  0055                     	ds	1
   870  0056                     ??_ADC_CH0:
   871  0056                     ??_ADC_CH1:	
   872                           ; 1 bytes @ 0xA
   873                           
   874                           
   875                           ; 1 bytes @ 0xA
   876  0056                     	ds	6
   877  005C                     ??_sprintf:
   878                           
   879                           ; 1 bytes @ 0x10
   880  005C                     	ds	3
   881  005F                     sprintf@ap:
   882                           
   883                           ; 1 bytes @ 0x13
   884  005F                     	ds	1
   885  0060                     sprintf@flag:
   886                           
   887                           ; 1 bytes @ 0x14
   888  0060                     	ds	1
   889  0061                     sprintf@prec:
   890                           
   891                           ; 1 bytes @ 0x15
   892  0061                     	ds	1
   893  0062                     sprintf@val:
   894                           
   895                           ; 2 bytes @ 0x16
   896  0062                     	ds	2
   897  0064                     sprintf@sp:
   898                           
   899                           ; 1 bytes @ 0x18
   900  0064                     	ds	1
   901  0065                     sprintf@c:
   902                           
   903                           ; 1 bytes @ 0x19
   904  0065                     	ds	1
   905  0066                     ??_main:
   906                           
   907                           ; 1 bytes @ 0x1A
   908  0066                     	ds	3
   909                           
   910                           	psect	maintext
   911  0109                     __pmaintext:	
   912 ;;
   913 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   914 ;;
   915 ;; *************** function _main *****************
   916 ;; Defined at:
   917 ;;		line 91 in file "main.c"
   918 ;; Parameters:    Size  Location     Type
   919 ;;		None
   920 ;; Auto vars:     Size  Location     Type
   921 ;;		None
   922 ;; Return value:  Size  Location     Type
   923 ;;                  1    wreg      void 
   924 ;; Registers used:
   925 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   926 ;; Tracked objects:
   927 ;;		On entry : B00/0
   928 ;;		On exit  : 0/0
   929 ;;		Unchanged: 0/0
   930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   931 ;;      Params:         0       0       0       0       0
   932 ;;      Locals:         0       0       0       0       0
   933 ;;      Temps:          0       3       0       0       0
   934 ;;      Totals:         0       3       0       0       0
   935 ;;Total ram usage:        3 bytes
   936 ;; Hardware stack levels required when called:    4
   937 ;; This function calls:
   938 ;;		_ADC_CH0
   939 ;;		_ADC_CH1
   940 ;;		_Lcd_Clear
   941 ;;		_Lcd_Init
   942 ;;		_Lcd_Set_Cursor
   943 ;;		_Lcd_Write_String
   944 ;;		_USART_ESCRITURA
   945 ;;		_USART_STRING
   946 ;;		_setup
   947 ;;		_sprintf
   948 ;; This function is called by:
   949 ;;		Startup code after reset
   950 ;; This function uses a non-reentrant model
   951 ;;
   952                           
   953                           
   954                           ;psect for function _main
   955  0109                     _main:
   956  0109                     l1842:	
   957                           ;incstack = 0
   958                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   959                           
   960                           
   961                           ;main.c: 92:     setup();
   962  0109  120A  118A  242A  120A  118A  	fcall	_setup
   963  010E                     l1844:
   964                           
   965                           ;main.c: 94:     TRISD = 0x00;
   966  010E  1683               	bsf	3,5	;RP0=1, select bank1
   967  010F  1303               	bcf	3,6	;RP1=0, select bank1
   968  0110  0188               	clrf	8	;volatile
   969  0111                     l1846:
   970                           
   971                           ;main.c: 95:     Lcd_Init();
   972  0111  120A  118A  22CD  120A  118A  	fcall	_Lcd_Init
   973  0116                     l1848:
   974                           
   975                           ;main.c: 96:     Lcd_Clear();
   976  0116  120A  118A  2544  120A  118A  	fcall	_Lcd_Clear
   977  011B                     l1850:
   978                           
   979                           ;main.c: 97:     Lcd_Set_Cursor(1, 1);
   980  011B  01F7               	clrf	Lcd_Set_Cursor@b
   981  011C  0AF7               	incf	Lcd_Set_Cursor@b,f
   982  011D  3001               	movlw	1
   983  011E  120A  118A  24AC  120A  118A  	fcall	_Lcd_Set_Cursor
   984  0123                     l1852:
   985                           
   986                           ;main.c: 98:     Lcd_Write_String("S1:");
   987  0123  302A               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   988  0124  00F6               	movwf	Lcd_Write_String@a
   989  0125  3080               	movlw	128
   990  0126  00F7               	movwf	Lcd_Write_String@a+1
   991  0127  120A  118A  2363  120A  118A  	fcall	_Lcd_Write_String
   992  012C                     l1854:
   993                           
   994                           ;main.c: 99:     Lcd_Set_Cursor(1, 7);
   995  012C  3007               	movlw	7
   996  012D  1283               	bcf	3,5	;RP0=0, select bank0
   997  012E  1303               	bcf	3,6	;RP1=0, select bank0
   998  012F  00E6               	movwf	??_main
   999  0130  0866               	movf	??_main,w
  1000  0131  00F7               	movwf	Lcd_Set_Cursor@b
  1001  0132  3001               	movlw	1
  1002  0133  120A  118A  24AC  120A  118A  	fcall	_Lcd_Set_Cursor
  1003  0138                     l1856:
  1004                           
  1005                           ;main.c: 100:     Lcd_Write_String("S2:");
  1006  0138  302E               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1007  0139  00F6               	movwf	Lcd_Write_String@a
  1008  013A  3080               	movlw	128
  1009  013B  00F7               	movwf	Lcd_Write_String@a+1
  1010  013C  120A  118A  2363  120A  118A  	fcall	_Lcd_Write_String
  1011  0141                     l1858:
  1012                           
  1013                           ;main.c: 101:     Lcd_Set_Cursor(1, 14);
  1014  0141  300E               	movlw	14
  1015  0142  1283               	bcf	3,5	;RP0=0, select bank0
  1016  0143  1303               	bcf	3,6	;RP1=0, select bank0
  1017  0144  00E6               	movwf	??_main
  1018  0145  0866               	movf	??_main,w
  1019  0146  00F7               	movwf	Lcd_Set_Cursor@b
  1020  0147  3001               	movlw	1
  1021  0148  120A  118A  24AC  120A  118A  	fcall	_Lcd_Set_Cursor
  1022  014D                     l1860:
  1023                           
  1024                           ;main.c: 102:     Lcd_Write_String("S3:");
  1025  014D  3032               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1026  014E  00F6               	movwf	Lcd_Write_String@a
  1027  014F  3080               	movlw	128
  1028  0150  00F7               	movwf	Lcd_Write_String@a+1
  1029  0151  120A  118A  2363  120A  118A  	fcall	_Lcd_Write_String
  1030  0156                     l1862:
  1031                           
  1032                           ;main.c: 104:         ADC_CH0();
  1033  0156  120A  118A  227A  120A  118A  	fcall	_ADC_CH0
  1034  015B                     l1864:
  1035                           
  1036                           ;main.c: 105:         ADC_CH1();
  1037  015B  120A  118A  2226  120A  118A  	fcall	_ADC_CH1
  1038  0160                     l1866:
  1039                           
  1040                           ;main.c: 109:         sprintf(data1, "%dV   %dV   %d", VAL1, VAL2, cont);
  1041  0160  301B               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1042  0161  1283               	bcf	3,5	;RP0=0, select bank0
  1043  0162  1303               	bcf	3,6	;RP1=0, select bank0
  1044  0163  00E6               	movwf	??_main
  1045  0164  0866               	movf	??_main,w
  1046  0165  00D5               	movwf	sprintf@f
  1047  0166  0825               	movf	_VAL1+1,w
  1048  0167  00D7               	movwf	?_sprintf+2
  1049  0168  0824               	movf	_VAL1,w
  1050  0169  00D6               	movwf	?_sprintf+1
  1051  016A  0823               	movf	_VAL2+1,w
  1052  016B  00D9               	movwf	?_sprintf+4
  1053  016C  0822               	movf	_VAL2,w
  1054  016D  00D8               	movwf	?_sprintf+3
  1055  016E  0827               	movf	_cont,w
  1056  016F  00E7               	movwf	??_main+1
  1057  0170  01E8               	clrf	??_main+2
  1058  0171  0867               	movf	??_main+1,w
  1059  0172  00DA               	movwf	?_sprintf+5
  1060  0173  0868               	movf	??_main+2,w
  1061  0174  00DB               	movwf	?_sprintf+6
  1062  0175  3028               	movlw	(low (_data1| 0))& (0+255)
  1063  0176  120A  118A  201F  120A  118A  	fcall	_sprintf
  1064  017B                     l1868:
  1065                           
  1066                           ;main.c: 110:         USART_STRING(data1);
  1067  017B  3028               	movlw	(low (_data1| 0))& (0+255)
  1068  017C  120A  118A  24F6  120A  118A  	fcall	_USART_STRING
  1069  0181                     l1870:
  1070                           
  1071                           ;main.c: 111:         USART_ESCRITURA(13);
  1072  0181  300D               	movlw	13
  1073  0182  120A  118A  2551  120A  118A  	fcall	_USART_ESCRITURA
  1074  0187                     l1872:
  1075                           
  1076                           ;main.c: 112:         USART_ESCRITURA(10);
  1077  0187  300A               	movlw	10
  1078  0188  120A  118A  2551  120A  118A  	fcall	_USART_ESCRITURA
  1079  018D                     l1874:
  1080                           
  1081                           ;main.c: 114:         sprintf(data2, "%dV   %dV    %d", VAL1, VAL2, cont);
  1082  018D  300B               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1083  018E  1283               	bcf	3,5	;RP0=0, select bank0
  1084  018F  1303               	bcf	3,6	;RP1=0, select bank0
  1085  0190  00E6               	movwf	??_main
  1086  0191  0866               	movf	??_main,w
  1087  0192  00D5               	movwf	sprintf@f
  1088  0193  0825               	movf	_VAL1+1,w
  1089  0194  00D7               	movwf	?_sprintf+2
  1090  0195  0824               	movf	_VAL1,w
  1091  0196  00D6               	movwf	?_sprintf+1
  1092  0197  0823               	movf	_VAL2+1,w
  1093  0198  00D9               	movwf	?_sprintf+4
  1094  0199  0822               	movf	_VAL2,w
  1095  019A  00D8               	movwf	?_sprintf+3
  1096  019B  0827               	movf	_cont,w
  1097  019C  00E7               	movwf	??_main+1
  1098  019D  01E8               	clrf	??_main+2
  1099  019E  0867               	movf	??_main+1,w
  1100  019F  00DA               	movwf	?_sprintf+5
  1101  01A0  0868               	movf	??_main+2,w
  1102  01A1  00DB               	movwf	?_sprintf+6
  1103  01A2  303C               	movlw	(low (_data2| 0))& (0+255)
  1104  01A3  120A  118A  201F  120A  118A  	fcall	_sprintf
  1105  01A8                     l1876:
  1106                           
  1107                           ;main.c: 115:         Lcd_Set_Cursor(2, 1);
  1108  01A8  01F7               	clrf	Lcd_Set_Cursor@b
  1109  01A9  0AF7               	incf	Lcd_Set_Cursor@b,f
  1110  01AA  3002               	movlw	2
  1111  01AB  120A  118A  24AC  120A  118A  	fcall	_Lcd_Set_Cursor
  1112  01B0                     l1878:
  1113                           
  1114                           ;main.c: 116:         Lcd_Write_String(data2);
  1115  01B0  303C               	movlw	(low (_data2| 0))& (0+255)
  1116  01B1  00F6               	movwf	Lcd_Write_String@a
  1117  01B2  3000               	movlw	0
  1118  01B3  00F7               	movwf	Lcd_Write_String@a+1
  1119  01B4  120A  118A  2363  120A  118A  	fcall	_Lcd_Write_String
  1120  01B9  2956               	goto	l1862
  1121  01BA  120A  118A  280C   	ljmp	start
  1122  01BD                     __end_of_main:
  1123                           
  1124                           	psect	text1
  1125  001F                     __ptext1:	
  1126 ;; *************** function _sprintf *****************
  1127 ;; Defined at:
  1128 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  1129 ;; Parameters:    Size  Location     Type
  1130 ;;  sp              1    wreg     PTR unsigned char 
  1131 ;;		 -> data2(16), data1(20), 
  1132 ;;  f               1    9[BANK0 ] PTR const unsigned char 
  1133 ;;		 -> STR_5(16), STR_4(15), 
  1134 ;; Auto vars:     Size  Location     Type
  1135 ;;  sp              1   24[BANK0 ] PTR unsigned char 
  1136 ;;		 -> data2(16), data1(20), 
  1137 ;;  tmpval          4    0        struct .
  1138 ;;  val             2   22[BANK0 ] unsigned int 
  1139 ;;  cp              2    0        PTR const unsigned char 
  1140 ;;  len             2    0        unsigned int 
  1141 ;;  c               1   25[BANK0 ] unsigned char 
  1142 ;;  prec            1   21[BANK0 ] char 
  1143 ;;  flag            1   20[BANK0 ] unsigned char 
  1144 ;;  ap              1   19[BANK0 ] PTR void [1]
  1145 ;;		 -> ?_sprintf(2), 
  1146 ;; Return value:  Size  Location     Type
  1147 ;;                  2    9[BANK0 ] int 
  1148 ;; Registers used:
  1149 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1150 ;; Tracked objects:
  1151 ;;		On entry : 0/0
  1152 ;;		On exit  : 0/0
  1153 ;;		Unchanged: 0/0
  1154 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1155 ;;      Params:         0       7       0       0       0
  1156 ;;      Locals:         0       7       0       0       0
  1157 ;;      Temps:          0       3       0       0       0
  1158 ;;      Totals:         0      17       0       0       0
  1159 ;;Total ram usage:       17 bytes
  1160 ;; Hardware stack levels used:    1
  1161 ;; Hardware stack levels required when called:    2
  1162 ;; This function calls:
  1163 ;;		___lwdiv
  1164 ;;		___lwmod
  1165 ;; This function is called by:
  1166 ;;		_main
  1167 ;; This function uses a non-reentrant model
  1168 ;;
  1169                           
  1170                           
  1171                           ;psect for function _sprintf
  1172  001F                     _sprintf:
  1173                           
  1174                           ;incstack = 0
  1175                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1176                           ;sprintf@sp stored from wreg
  1177  001F  1283               	bcf	3,5	;RP0=0, select bank0
  1178  0020  1303               	bcf	3,6	;RP1=0, select bank0
  1179  0021  00E4               	movwf	sprintf@sp
  1180  0022                     l1780:
  1181                           
  1182                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1183  0022  3056               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1184  0023  00DC               	movwf	??_sprintf
  1185  0024  085C               	movf	??_sprintf,w
  1186  0025  00DF               	movwf	sprintf@ap
  1187                           
  1188                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1189  0026  28F2               	goto	l1832
  1190  0027                     l1782:
  1191                           
  1192                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1193  0027  3025               	movlw	37
  1194  0028  0665               	xorwf	sprintf@c,w
  1195  0029  1903               	btfsc	3,2
  1196  002A  282C               	goto	u1121
  1197  002B  282D               	goto	u1120
  1198  002C                     u1121:
  1199  002C  2839               	goto	l1788
  1200  002D                     u1120:
  1201  002D                     l1784:
  1202                           
  1203                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1204  002D  0865               	movf	sprintf@c,w
  1205  002E  00DC               	movwf	??_sprintf
  1206  002F  0864               	movf	sprintf@sp,w
  1207  0030  0084               	movwf	4
  1208  0031  085C               	movf	??_sprintf,w
  1209  0032  1383               	bcf	3,7	;select IRP bank0
  1210  0033  0080               	movwf	0
  1211  0034                     l1786:
  1212  0034  3001               	movlw	1
  1213  0035  00DC               	movwf	??_sprintf
  1214  0036  085C               	movf	??_sprintf,w
  1215  0037  07E4               	addwf	sprintf@sp,f
  1216                           
  1217                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  1218  0038  28F2               	goto	l1832
  1219  0039                     l1788:
  1220                           
  1221                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1222  0039  01E0               	clrf	sprintf@flag
  1223  003A                     l1792:	
  1224                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1225                           
  1226  003A  3001               	movlw	1
  1227  003B  07D5               	addwf	sprintf@f,f
  1228  003C  30FF               	movlw	-1
  1229  003D  0755               	addwf	sprintf@f,w
  1230  003E  0084               	movwf	4
  1231  003F  120A  118A  23B3  120A  118A  	fcall	stringdir
  1232  0044  00E5               	movwf	sprintf@c
  1233  0045  00DC               	movwf	??_sprintf
  1234  0046  01DD               	clrf	??_sprintf+1
  1235                           
  1236                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1237                           ; Switch size 1, requested type "simple"
  1238                           ; Number of cases is 1, Range of values is 0 to 0
  1239                           ; switch strategies available:
  1240                           ; Name         Instructions Cycles
  1241                           ; simple_byte            4     3 (average)
  1242                           ; direct_byte           11     8 (fixed)
  1243                           ; jumptable            260     6 (fixed)
  1244                           ;	Chosen strategy is simple_byte
  1245  0047  085D               	movf	??_sprintf+1,w
  1246  0048  3A00               	xorlw	0	; case 0
  1247  0049  1903               	skipnz
  1248  004A  284C               	goto	l1920
  1249  004B  28F2               	goto	l1832
  1250  004C                     l1920:
  1251                           
  1252                           ; Switch size 1, requested type "simple"
  1253                           ; Number of cases is 3, Range of values is 0 to 105
  1254                           ; switch strategies available:
  1255                           ; Name         Instructions Cycles
  1256                           ; simple_byte           10     6 (average)
  1257                           ; jumptable            260     6 (fixed)
  1258                           ;	Chosen strategy is simple_byte
  1259  004C  085C               	movf	??_sprintf,w
  1260  004D  3A00               	xorlw	0	; case 0
  1261  004E  1903               	skipnz
  1262  004F  2904               	goto	l1834
  1263  0050  3A64               	xorlw	100	; case 100
  1264  0051  1903               	skipnz
  1265  0052  2857               	goto	l1794
  1266  0053  3A0D               	xorlw	13	; case 105
  1267  0054  1903               	skipnz
  1268  0055  2857               	goto	l1794
  1269  0056  28F2               	goto	l1832
  1270  0057                     l1794:
  1271                           
  1272                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1273  0057  085F               	movf	sprintf@ap,w
  1274  0058  0084               	movwf	4
  1275  0059  1383               	bcf	3,7	;select IRP bank0
  1276  005A  0800               	movf	0,w
  1277  005B  00E2               	movwf	sprintf@val
  1278  005C  0A84               	incf	4,f
  1279  005D  0800               	movf	0,w
  1280  005E  00E3               	movwf	sprintf@val+1
  1281  005F                     l1796:
  1282  005F  3002               	movlw	2
  1283  0060  00DC               	movwf	??_sprintf
  1284  0061  085C               	movf	??_sprintf,w
  1285  0062  07DF               	addwf	sprintf@ap,f
  1286  0063                     l1798:
  1287                           
  1288                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1289  0063  1FE3               	btfss	sprintf@val+1,7
  1290  0064  2866               	goto	u1131
  1291  0065  2867               	goto	u1130
  1292  0066                     u1131:
  1293  0066  2870               	goto	l1804
  1294  0067                     u1130:
  1295  0067                     l1800:
  1296                           
  1297                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1298  0067  3003               	movlw	3
  1299  0068  00DC               	movwf	??_sprintf
  1300  0069  085C               	movf	??_sprintf,w
  1301  006A  04E0               	iorwf	sprintf@flag,f
  1302  006B                     l1802:
  1303                           
  1304                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1305  006B  09E2               	comf	sprintf@val,f
  1306  006C  09E3               	comf	sprintf@val+1,f
  1307  006D  0AE2               	incf	sprintf@val,f
  1308  006E  1903               	skipnz
  1309  006F  0AE3               	incf	sprintf@val+1,f
  1310  0070                     l1804:
  1311                           
  1312                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1313  0070  01E5               	clrf	sprintf@c
  1314  0071  0AE5               	incf	sprintf@c,f
  1315  0072                     l1810:
  1316                           
  1317                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1318  0072  0865               	movf	sprintf@c,w
  1319  0073  00DC               	movwf	??_sprintf
  1320  0074  075C               	addwf	??_sprintf,w
  1321  0075  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1322  0076  0084               	movwf	4
  1323  0077  120A  118A  23B3  120A  118A  	fcall	stringdir
  1324  007C  00DD               	movwf	??_sprintf+1
  1325  007D  120A  118A  23B3  120A  118A  	fcall	stringdir
  1326  0082  00DE               	movwf	??_sprintf+2
  1327  0083  085E               	movf	??_sprintf+2,w
  1328  0084  0263               	subwf	sprintf@val+1,w
  1329  0085  1D03               	skipz
  1330  0086  2889               	goto	u1145
  1331  0087  085D               	movf	??_sprintf+1,w
  1332  0088  0262               	subwf	sprintf@val,w
  1333  0089                     u1145:
  1334  0089  1803               	skipnc
  1335  008A  288C               	goto	u1141
  1336  008B  288D               	goto	u1140
  1337  008C                     u1141:
  1338  008C  288E               	goto	l1814
  1339  008D                     u1140:
  1340  008D  2898               	goto	l1816
  1341  008E                     l1814:
  1342  008E  3001               	movlw	1
  1343  008F  00DC               	movwf	??_sprintf
  1344  0090  085C               	movf	??_sprintf,w
  1345  0091  07E5               	addwf	sprintf@c,f
  1346  0092  3005               	movlw	5
  1347  0093  0665               	xorwf	sprintf@c,w
  1348  0094  1D03               	btfss	3,2
  1349  0095  2897               	goto	u1151
  1350  0096  2898               	goto	u1150
  1351  0097                     u1151:
  1352  0097  2872               	goto	l1810
  1353  0098                     u1150:
  1354  0098                     l1816:
  1355                           
  1356                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1357  0098  0860               	movf	sprintf@flag,w
  1358  0099  3903               	andlw	3
  1359  009A  1903               	btfsc	3,2
  1360  009B  289D               	goto	u1161
  1361  009C  289E               	goto	u1160
  1362  009D                     u1161:
  1363  009D  28A9               	goto	l1822
  1364  009E                     u1160:
  1365  009E                     l1818:
  1366                           
  1367                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1368  009E  302D               	movlw	45
  1369  009F  00DC               	movwf	??_sprintf
  1370  00A0  0864               	movf	sprintf@sp,w
  1371  00A1  0084               	movwf	4
  1372  00A2  085C               	movf	??_sprintf,w
  1373  00A3  1383               	bcf	3,7	;select IRP bank0
  1374  00A4  0080               	movwf	0
  1375  00A5                     l1820:
  1376  00A5  3001               	movlw	1
  1377  00A6  00DC               	movwf	??_sprintf
  1378  00A7  085C               	movf	??_sprintf,w
  1379  00A8  07E4               	addwf	sprintf@sp,f
  1380  00A9                     l1822:
  1381                           
  1382                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1383  00A9  0865               	movf	sprintf@c,w
  1384  00AA  00DC               	movwf	??_sprintf
  1385  00AB  085C               	movf	??_sprintf,w
  1386  00AC  00E1               	movwf	sprintf@prec
  1387                           
  1388                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1389  00AD  28E9               	goto	l1830
  1390  00AE                     l1824:
  1391                           
  1392                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1393  00AE  300A               	movlw	10
  1394  00AF  00CF               	movwf	___lwmod@divisor
  1395  00B0  3000               	movlw	0
  1396  00B1  00D0               	movwf	___lwmod@divisor+1
  1397  00B2  0861               	movf	sprintf@prec,w
  1398  00B3  00DC               	movwf	??_sprintf
  1399  00B4  075C               	addwf	??_sprintf,w
  1400  00B5  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1401  00B6  0084               	movwf	4
  1402  00B7  120A  118A  23B3  120A  118A  	fcall	stringdir
  1403  00BC  00F3               	movwf	___lwdiv@divisor
  1404  00BD  120A  118A  23B3  120A  118A  	fcall	stringdir
  1405  00C2  00F4               	movwf	___lwdiv@divisor+1
  1406  00C3  0863               	movf	sprintf@val+1,w
  1407  00C4  00F6               	movwf	___lwdiv@dividend+1
  1408  00C5  0862               	movf	sprintf@val,w
  1409  00C6  00F5               	movwf	___lwdiv@dividend
  1410  00C7  120A  118A  231D  120A  118A  	fcall	___lwdiv
  1411  00CC  0874               	movf	?___lwdiv+1,w
  1412  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  1413  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  1414  00CF  00D2               	movwf	___lwmod@dividend+1
  1415  00D0  0873               	movf	?___lwdiv,w
  1416  00D1  00D1               	movwf	___lwmod@dividend
  1417  00D2  120A  118A  23EE  120A  118A  	fcall	___lwmod
  1418  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  1419  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  1420  00D9  084F               	movf	?___lwmod,w
  1421  00DA  3E30               	addlw	48
  1422  00DB  00DD               	movwf	??_sprintf+1
  1423  00DC  085D               	movf	??_sprintf+1,w
  1424  00DD  00E5               	movwf	sprintf@c
  1425  00DE                     l1826:
  1426                           
  1427                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1428  00DE  0865               	movf	sprintf@c,w
  1429  00DF  00DC               	movwf	??_sprintf
  1430  00E0  0864               	movf	sprintf@sp,w
  1431  00E1  0084               	movwf	4
  1432  00E2  085C               	movf	??_sprintf,w
  1433  00E3  1383               	bcf	3,7	;select IRP bank0
  1434  00E4  0080               	movwf	0
  1435  00E5                     l1828:
  1436  00E5  3001               	movlw	1
  1437  00E6  00DC               	movwf	??_sprintf
  1438  00E7  085C               	movf	??_sprintf,w
  1439  00E8  07E4               	addwf	sprintf@sp,f
  1440  00E9                     l1830:
  1441                           
  1442                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1443  00E9  30FF               	movlw	255
  1444  00EA  00DC               	movwf	??_sprintf
  1445  00EB  085C               	movf	??_sprintf,w
  1446  00EC  07E1               	addwf	sprintf@prec,f
  1447  00ED  0A61               	incf	sprintf@prec,w
  1448  00EE  1D03               	btfss	3,2
  1449  00EF  28F1               	goto	u1171
  1450  00F0  28F2               	goto	u1170
  1451  00F1                     u1171:
  1452  00F1  28AE               	goto	l1824
  1453  00F2                     u1170:
  1454  00F2                     l1832:
  1455                           
  1456                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1457  00F2  3001               	movlw	1
  1458  00F3  07D5               	addwf	sprintf@f,f
  1459  00F4  30FF               	movlw	-1
  1460  00F5  0755               	addwf	sprintf@f,w
  1461  00F6  0084               	movwf	4
  1462  00F7  120A  118A  23B3  120A  118A  	fcall	stringdir
  1463  00FC  00DC               	movwf	??_sprintf
  1464  00FD  085C               	movf	??_sprintf,w
  1465  00FE  00E5               	movwf	sprintf@c
  1466  00FF  0865               	movf	sprintf@c,w
  1467  0100  1D03               	btfss	3,2
  1468  0101  2903               	goto	u1181
  1469  0102  2904               	goto	u1180
  1470  0103                     u1181:
  1471  0103  2827               	goto	l1782
  1472  0104                     u1180:
  1473  0104                     l1834:
  1474                           
  1475                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1476  0104  0864               	movf	sprintf@sp,w
  1477  0105  0084               	movwf	4
  1478  0106  1383               	bcf	3,7	;select IRP bank0
  1479  0107  0180               	clrf	0
  1480  0108                     l322:
  1481  0108  0008               	return
  1482  0109                     __end_of_sprintf:
  1483                           
  1484                           	psect	text2
  1485  03EE                     __ptext2:	
  1486 ;; *************** function ___lwmod *****************
  1487 ;; Defined at:
  1488 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  divisor         2    3[BANK0 ] unsigned int 
  1491 ;;  dividend        2    5[BANK0 ] unsigned int 
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;  counter         1    8[BANK0 ] unsigned char 
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  2    3[BANK0 ] unsigned int 
  1496 ;; Registers used:
  1497 ;;		wreg, status,2, status,0
  1498 ;; Tracked objects:
  1499 ;;		On entry : 0/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1503 ;;      Params:         0       4       0       0       0
  1504 ;;      Locals:         0       1       0       0       0
  1505 ;;      Temps:          0       1       0       0       0
  1506 ;;      Totals:         0       6       0       0       0
  1507 ;;Total ram usage:        6 bytes
  1508 ;; Hardware stack levels used:    1
  1509 ;; Hardware stack levels required when called:    1
  1510 ;; This function calls:
  1511 ;;		Nothing
  1512 ;; This function is called by:
  1513 ;;		_sprintf
  1514 ;; This function uses a non-reentrant model
  1515 ;;
  1516                           
  1517                           
  1518                           ;psect for function ___lwmod
  1519  03EE                     ___lwmod:
  1520  03EE                     l1368:	
  1521                           ;incstack = 0
  1522                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1523                           
  1524  03EE  1283               	bcf	3,5	;RP0=0, select bank0
  1525  03EF  1303               	bcf	3,6	;RP1=0, select bank0
  1526  03F0  084F               	movf	___lwmod@divisor,w
  1527  03F1  0450               	iorwf	___lwmod@divisor+1,w
  1528  03F2  1903               	btfsc	3,2
  1529  03F3  2BF5               	goto	u701
  1530  03F4  2BF6               	goto	u700
  1531  03F5                     u701:
  1532  03F5  2C25               	goto	l1386
  1533  03F6                     u700:
  1534  03F6                     l1370:
  1535  03F6  01D4               	clrf	___lwmod@counter
  1536  03F7  0AD4               	incf	___lwmod@counter,f
  1537  03F8  2C04               	goto	l1376
  1538  03F9                     l1372:
  1539  03F9  3001               	movlw	1
  1540  03FA                     u715:
  1541  03FA  1003               	clrc
  1542  03FB  0DCF               	rlf	___lwmod@divisor,f
  1543  03FC  0DD0               	rlf	___lwmod@divisor+1,f
  1544  03FD  3EFF               	addlw	-1
  1545  03FE  1D03               	skipz
  1546  03FF  2BFA               	goto	u715
  1547  0400                     l1374:
  1548  0400  3001               	movlw	1
  1549  0401  00D3               	movwf	??___lwmod
  1550  0402  0853               	movf	??___lwmod,w
  1551  0403  07D4               	addwf	___lwmod@counter,f
  1552  0404                     l1376:
  1553  0404  1FD0               	btfss	___lwmod@divisor+1,7
  1554  0405  2C07               	goto	u721
  1555  0406  2C08               	goto	u720
  1556  0407                     u721:
  1557  0407  2BF9               	goto	l1372
  1558  0408                     u720:
  1559  0408                     l1378:
  1560  0408  0850               	movf	___lwmod@divisor+1,w
  1561  0409  0252               	subwf	___lwmod@dividend+1,w
  1562  040A  1D03               	skipz
  1563  040B  2C0E               	goto	u735
  1564  040C  084F               	movf	___lwmod@divisor,w
  1565  040D  0251               	subwf	___lwmod@dividend,w
  1566  040E                     u735:
  1567  040E  1C03               	skipc
  1568  040F  2C11               	goto	u731
  1569  0410  2C12               	goto	u730
  1570  0411                     u731:
  1571  0411  2C18               	goto	l1382
  1572  0412                     u730:
  1573  0412                     l1380:
  1574  0412  084F               	movf	___lwmod@divisor,w
  1575  0413  02D1               	subwf	___lwmod@dividend,f
  1576  0414  0850               	movf	___lwmod@divisor+1,w
  1577  0415  1C03               	skipc
  1578  0416  03D2               	decf	___lwmod@dividend+1,f
  1579  0417  02D2               	subwf	___lwmod@dividend+1,f
  1580  0418                     l1382:
  1581  0418  3001               	movlw	1
  1582  0419                     u745:
  1583  0419  1003               	clrc
  1584  041A  0CD0               	rrf	___lwmod@divisor+1,f
  1585  041B  0CCF               	rrf	___lwmod@divisor,f
  1586  041C  3EFF               	addlw	-1
  1587  041D  1D03               	skipz
  1588  041E  2C19               	goto	u745
  1589  041F                     l1384:
  1590  041F  3001               	movlw	1
  1591  0420  02D4               	subwf	___lwmod@counter,f
  1592  0421  1D03               	btfss	3,2
  1593  0422  2C24               	goto	u751
  1594  0423  2C25               	goto	u750
  1595  0424                     u751:
  1596  0424  2C08               	goto	l1378
  1597  0425                     u750:
  1598  0425                     l1386:
  1599  0425  0852               	movf	___lwmod@dividend+1,w
  1600  0426  00D0               	movwf	?___lwmod+1
  1601  0427  0851               	movf	___lwmod@dividend,w
  1602  0428  00CF               	movwf	?___lwmod
  1603  0429                     l608:
  1604  0429  0008               	return
  1605  042A                     __end_of___lwmod:
  1606                           
  1607                           	psect	text3
  1608  031D                     __ptext3:	
  1609 ;; *************** function ___lwdiv *****************
  1610 ;; Defined at:
  1611 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1612 ;; Parameters:    Size  Location     Type
  1613 ;;  divisor         2    3[COMMON] unsigned int 
  1614 ;;  dividend        2    5[COMMON] unsigned int 
  1615 ;; Auto vars:     Size  Location     Type
  1616 ;;  quotient        2    1[BANK0 ] unsigned int 
  1617 ;;  counter         1    0[BANK0 ] unsigned char 
  1618 ;; Return value:  Size  Location     Type
  1619 ;;                  2    3[COMMON] unsigned int 
  1620 ;; Registers used:
  1621 ;;		wreg, status,2, status,0
  1622 ;; Tracked objects:
  1623 ;;		On entry : 0/0
  1624 ;;		On exit  : 0/0
  1625 ;;		Unchanged: 0/0
  1626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1627 ;;      Params:         4       0       0       0       0
  1628 ;;      Locals:         0       3       0       0       0
  1629 ;;      Temps:          1       0       0       0       0
  1630 ;;      Totals:         5       3       0       0       0
  1631 ;;Total ram usage:        8 bytes
  1632 ;; Hardware stack levels used:    1
  1633 ;; Hardware stack levels required when called:    1
  1634 ;; This function calls:
  1635 ;;		Nothing
  1636 ;; This function is called by:
  1637 ;;		_sprintf
  1638 ;; This function uses a non-reentrant model
  1639 ;;
  1640                           
  1641                           
  1642                           ;psect for function ___lwdiv
  1643  031D                     ___lwdiv:
  1644  031D                     l1686:	
  1645                           ;incstack = 0
  1646                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1647                           
  1648  031D  1283               	bcf	3,5	;RP0=0, select bank0
  1649  031E  1303               	bcf	3,6	;RP1=0, select bank0
  1650  031F  01CD               	clrf	___lwdiv@quotient
  1651  0320  01CE               	clrf	___lwdiv@quotient+1
  1652  0321                     l1688:
  1653  0321  0873               	movf	___lwdiv@divisor,w
  1654  0322  0474               	iorwf	___lwdiv@divisor+1,w
  1655  0323  1903               	btfsc	3,2
  1656  0324  2B26               	goto	u981
  1657  0325  2B27               	goto	u980
  1658  0326                     u981:
  1659  0326  2B5E               	goto	l1708
  1660  0327                     u980:
  1661  0327                     l1690:
  1662  0327  01CC               	clrf	___lwdiv@counter
  1663  0328  0ACC               	incf	___lwdiv@counter,f
  1664  0329  2B35               	goto	l1696
  1665  032A                     l1692:
  1666  032A  3001               	movlw	1
  1667  032B                     u995:
  1668  032B  1003               	clrc
  1669  032C  0DF3               	rlf	___lwdiv@divisor,f
  1670  032D  0DF4               	rlf	___lwdiv@divisor+1,f
  1671  032E  3EFF               	addlw	-1
  1672  032F  1D03               	skipz
  1673  0330  2B2B               	goto	u995
  1674  0331                     l1694:
  1675  0331  3001               	movlw	1
  1676  0332  00F7               	movwf	??___lwdiv
  1677  0333  0877               	movf	??___lwdiv,w
  1678  0334  07CC               	addwf	___lwdiv@counter,f
  1679  0335                     l1696:
  1680  0335  1FF4               	btfss	___lwdiv@divisor+1,7
  1681  0336  2B38               	goto	u1001
  1682  0337  2B39               	goto	u1000
  1683  0338                     u1001:
  1684  0338  2B2A               	goto	l1692
  1685  0339                     u1000:
  1686  0339                     l1698:
  1687  0339  3001               	movlw	1
  1688  033A                     u1015:
  1689  033A  1003               	clrc
  1690  033B  0DCD               	rlf	___lwdiv@quotient,f
  1691  033C  0DCE               	rlf	___lwdiv@quotient+1,f
  1692  033D  3EFF               	addlw	-1
  1693  033E  1D03               	skipz
  1694  033F  2B3A               	goto	u1015
  1695  0340  0874               	movf	___lwdiv@divisor+1,w
  1696  0341  0276               	subwf	___lwdiv@dividend+1,w
  1697  0342  1D03               	skipz
  1698  0343  2B46               	goto	u1025
  1699  0344  0873               	movf	___lwdiv@divisor,w
  1700  0345  0275               	subwf	___lwdiv@dividend,w
  1701  0346                     u1025:
  1702  0346  1C03               	skipc
  1703  0347  2B49               	goto	u1021
  1704  0348  2B4A               	goto	u1020
  1705  0349                     u1021:
  1706  0349  2B51               	goto	l1704
  1707  034A                     u1020:
  1708  034A                     l1700:
  1709  034A  0873               	movf	___lwdiv@divisor,w
  1710  034B  02F5               	subwf	___lwdiv@dividend,f
  1711  034C  0874               	movf	___lwdiv@divisor+1,w
  1712  034D  1C03               	skipc
  1713  034E  03F6               	decf	___lwdiv@dividend+1,f
  1714  034F  02F6               	subwf	___lwdiv@dividend+1,f
  1715  0350                     l1702:
  1716  0350  144D               	bsf	___lwdiv@quotient,0
  1717  0351                     l1704:
  1718  0351  3001               	movlw	1
  1719  0352                     u1035:
  1720  0352  1003               	clrc
  1721  0353  0CF4               	rrf	___lwdiv@divisor+1,f
  1722  0354  0CF3               	rrf	___lwdiv@divisor,f
  1723  0355  3EFF               	addlw	-1
  1724  0356  1D03               	skipz
  1725  0357  2B52               	goto	u1035
  1726  0358                     l1706:
  1727  0358  3001               	movlw	1
  1728  0359  02CC               	subwf	___lwdiv@counter,f
  1729  035A  1D03               	btfss	3,2
  1730  035B  2B5D               	goto	u1041
  1731  035C  2B5E               	goto	u1040
  1732  035D                     u1041:
  1733  035D  2B39               	goto	l1698
  1734  035E                     u1040:
  1735  035E                     l1708:
  1736  035E  084E               	movf	___lwdiv@quotient+1,w
  1737  035F  00F4               	movwf	?___lwdiv+1
  1738  0360  084D               	movf	___lwdiv@quotient,w
  1739  0361  00F3               	movwf	?___lwdiv
  1740  0362                     l598:
  1741  0362  0008               	return
  1742  0363                     __end_of___lwdiv:
  1743                           
  1744                           	psect	text4
  1745  042A                     __ptext4:	
  1746 ;; *************** function _setup *****************
  1747 ;; Defined at:
  1748 ;;		line 128 in file "main.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;		None
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;		None
  1753 ;; Return value:  Size  Location     Type
  1754 ;;                  1    wreg      void 
  1755 ;; Registers used:
  1756 ;;		wreg, status,2
  1757 ;; Tracked objects:
  1758 ;;		On entry : 0/0
  1759 ;;		On exit  : 0/0
  1760 ;;		Unchanged: 0/0
  1761 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1762 ;;      Params:         0       0       0       0       0
  1763 ;;      Locals:         0       0       0       0       0
  1764 ;;      Temps:          0       0       0       0       0
  1765 ;;      Totals:         0       0       0       0       0
  1766 ;;Total ram usage:        0 bytes
  1767 ;; Hardware stack levels used:    1
  1768 ;; Hardware stack levels required when called:    1
  1769 ;; This function calls:
  1770 ;;		Nothing
  1771 ;; This function is called by:
  1772 ;;		_main
  1773 ;; This function uses a non-reentrant model
  1774 ;;
  1775                           
  1776                           
  1777                           ;psect for function _setup
  1778  042A                     _setup:
  1779  042A                     l1390:	
  1780                           ;incstack = 0
  1781                           ; Regs used in _setup: [wreg+status,2]
  1782                           
  1783                           
  1784                           ;main.c: 129:     ANSEL = 0b00000011;
  1785  042A  3003               	movlw	3
  1786  042B  1683               	bsf	3,5	;RP0=1, select bank3
  1787  042C  1703               	bsf	3,6	;RP1=1, select bank3
  1788  042D  0088               	movwf	8	;volatile
  1789  042E                     l1392:
  1790                           
  1791                           ;main.c: 130:     ANSELH = 0;
  1792  042E  0189               	clrf	9	;volatile
  1793  042F                     l1394:
  1794                           
  1795                           ;main.c: 131:     TRISA = 0b00000011;
  1796  042F  3003               	movlw	3
  1797  0430  1683               	bsf	3,5	;RP0=1, select bank1
  1798  0431  1303               	bcf	3,6	;RP1=0, select bank1
  1799  0432  0085               	movwf	5	;volatile
  1800                           
  1801                           ;main.c: 132:     TRISB = 0;
  1802  0433  0186               	clrf	6	;volatile
  1803                           
  1804                           ;main.c: 133:     TRISC = 0;
  1805  0434  0187               	clrf	7	;volatile
  1806                           
  1807                           ;main.c: 134:     TRISD = 0;
  1808  0435  0188               	clrf	8	;volatile
  1809                           
  1810                           ;main.c: 135:     TRISE = 0;
  1811  0436  0189               	clrf	9	;volatile
  1812                           
  1813                           ;main.c: 136:     PORTA = 0;
  1814  0437  1283               	bcf	3,5	;RP0=0, select bank0
  1815  0438  1303               	bcf	3,6	;RP1=0, select bank0
  1816  0439  0185               	clrf	5	;volatile
  1817                           
  1818                           ;main.c: 137:     PORTB = 0;
  1819  043A  0186               	clrf	6	;volatile
  1820                           
  1821                           ;main.c: 138:     PORTC = 0;
  1822  043B  0187               	clrf	7	;volatile
  1823                           
  1824                           ;main.c: 139:     PORTD = 0;
  1825  043C  0188               	clrf	8	;volatile
  1826                           
  1827                           ;main.c: 140:     PORTE = 0;
  1828  043D  0189               	clrf	9	;volatile
  1829  043E                     l1396:
  1830                           
  1831                           ;main.c: 141:     TRISC7 = 1;
  1832  043E  1683               	bsf	3,5	;RP0=1, select bank1
  1833  043F  1303               	bcf	3,6	;RP1=0, select bank1
  1834  0440  1787               	bsf	7,7	;volatile
  1835                           
  1836                           ;main.c: 143:     ADCON1 = 0b00000000;
  1837  0441  019F               	clrf	31	;volatile
  1838  0442                     l1398:
  1839                           
  1840                           ;main.c: 144:     PIE1bits.ADIE = 0;
  1841  0442  130C               	bcf	12,6	;volatile
  1842  0443                     l1400:
  1843                           
  1844                           ;main.c: 145:     PIR1bits.ADIF = 0;
  1845  0443  1283               	bcf	3,5	;RP0=0, select bank0
  1846  0444  1303               	bcf	3,6	;RP1=0, select bank0
  1847  0445  130C               	bcf	12,6	;volatile
  1848                           
  1849                           ;main.c: 146:     OPTION_REG = 0b00000000;
  1850  0446  1683               	bsf	3,5	;RP0=1, select bank1
  1851  0447  1303               	bcf	3,6	;RP1=0, select bank1
  1852  0448  0181               	clrf	1	;volatile
  1853                           
  1854                           ;main.c: 147:     INTCON = 0b00000000;
  1855  0449  018B               	clrf	11	;volatile
  1856  044A                     l1402:
  1857                           
  1858                           ;main.c: 150:     INTCONbits.PEIE = 1;
  1859  044A  170B               	bsf	11,6	;volatile
  1860  044B                     l1404:
  1861                           
  1862                           ;main.c: 151:     PIE1bits.RCIE = 1;
  1863  044B  168C               	bsf	12,5	;volatile
  1864  044C                     l1406:
  1865                           
  1866                           ;main.c: 153:     INTCONbits.GIE = 1;
  1867  044C  178B               	bsf	11,7	;volatile
  1868                           
  1869                           ;main.c: 156:     SPBRGH = 0;
  1870  044D  019A               	clrf	26	;volatile
  1871  044E                     l1408:
  1872                           
  1873                           ;main.c: 157:     SPBRG = 12;
  1874  044E  300C               	movlw	12
  1875  044F  0099               	movwf	25	;volatile
  1876  0450                     l1410:
  1877                           
  1878                           ;main.c: 161:     TXSTAbits.TXEN = 1;
  1879  0450  1698               	bsf	24,5	;volatile
  1880  0451                     l1412:
  1881                           
  1882                           ;main.c: 162:     TXSTAbits.SYNC = 0;
  1883  0451  1218               	bcf	24,4	;volatile
  1884  0452                     l1414:
  1885                           
  1886                           ;main.c: 166:     RCSTAbits.SPEN = 1;
  1887  0452  1283               	bcf	3,5	;RP0=0, select bank0
  1888  0453  1303               	bcf	3,6	;RP1=0, select bank0
  1889  0454  1798               	bsf	24,7	;volatile
  1890  0455                     l1416:
  1891                           
  1892                           ;main.c: 168:     RCSTAbits.CREN = 1;
  1893  0455  1618               	bsf	24,4	;volatile
  1894  0456                     l1418:
  1895                           
  1896                           ;main.c: 169:     RCREG = 0;
  1897  0456  019A               	clrf	26	;volatile
  1898  0457                     l118:
  1899  0457  0008               	return
  1900  0458                     __end_of_setup:
  1901                           
  1902                           	psect	text5
  1903  04F6                     __ptext5:	
  1904 ;; *************** function _USART_STRING *****************
  1905 ;; Defined at:
  1906 ;;		line 39 in file "USART.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  a               1    wreg     PTR unsigned char 
  1909 ;;		 -> data1(20), 
  1910 ;; Auto vars:     Size  Location     Type
  1911 ;;  a               1    5[COMMON] PTR unsigned char 
  1912 ;;		 -> data1(20), 
  1913 ;;  i               1    6[COMMON] unsigned char 
  1914 ;; Return value:  Size  Location     Type
  1915 ;;                  1    wreg      void 
  1916 ;; Registers used:
  1917 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1918 ;; Tracked objects:
  1919 ;;		On entry : 0/0
  1920 ;;		On exit  : 0/0
  1921 ;;		Unchanged: 0/0
  1922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1923 ;;      Params:         0       0       0       0       0
  1924 ;;      Locals:         2       0       0       0       0
  1925 ;;      Temps:          1       0       0       0       0
  1926 ;;      Totals:         3       0       0       0       0
  1927 ;;Total ram usage:        3 bytes
  1928 ;; Hardware stack levels used:    1
  1929 ;; Hardware stack levels required when called:    2
  1930 ;; This function calls:
  1931 ;;		_USART_ESCRITURA
  1932 ;; This function is called by:
  1933 ;;		_main
  1934 ;; This function uses a non-reentrant model
  1935 ;;
  1936                           
  1937                           
  1938                           ;psect for function _USART_STRING
  1939  04F6                     _USART_STRING:
  1940                           
  1941                           ;incstack = 0
  1942                           ; Regs used in _USART_STRING: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1943                           ;USART_STRING@a stored from wreg
  1944  04F6  00F5               	movwf	USART_STRING@a
  1945  04F7                     l1550:
  1946                           
  1947                           ;USART.c: 40:     uint8_t i;;USART.c: 41:     for(i=0;a[i]!='\0';i++){
  1948  04F7  01F6               	clrf	USART_STRING@i
  1949  04F8  2D08               	goto	l1556
  1950  04F9                     l1552:
  1951                           
  1952                           ;USART.c: 42:         USART_ESCRITURA(a[i]);
  1953  04F9  0876               	movf	USART_STRING@i,w
  1954  04FA  0775               	addwf	USART_STRING@a,w
  1955  04FB  00F4               	movwf	??_USART_STRING
  1956  04FC  0874               	movf	??_USART_STRING,w
  1957  04FD  0084               	movwf	4
  1958  04FE  0800               	movf	0,w
  1959  04FF  120A  118A  2551  120A  118A  	fcall	_USART_ESCRITURA
  1960  0504                     l1554:
  1961                           
  1962                           ;USART.c: 43:     }
  1963  0504  3001               	movlw	1
  1964  0505  00F4               	movwf	??_USART_STRING
  1965  0506  0874               	movf	??_USART_STRING,w
  1966  0507  07F6               	addwf	USART_STRING@i,f
  1967  0508                     l1556:
  1968  0508  0876               	movf	USART_STRING@i,w
  1969  0509  0775               	addwf	USART_STRING@a,w
  1970  050A  00F4               	movwf	??_USART_STRING
  1971  050B  0874               	movf	??_USART_STRING,w
  1972  050C  0084               	movwf	4
  1973  050D  1383               	bcf	3,7	;select IRP bank0
  1974  050E  0800               	movf	0,w
  1975  050F  1D03               	btfss	3,2
  1976  0510  2D12               	goto	u901
  1977  0511  2D13               	goto	u900
  1978  0512                     u901:
  1979  0512  2CF9               	goto	l1552
  1980  0513                     u900:
  1981  0513                     l212:
  1982  0513  0008               	return
  1983  0514                     __end_of_USART_STRING:
  1984                           
  1985                           	psect	text6
  1986  0551                     __ptext6:	
  1987 ;; *************** function _USART_ESCRITURA *****************
  1988 ;; Defined at:
  1989 ;;		line 35 in file "USART.c"
  1990 ;; Parameters:    Size  Location     Type
  1991 ;;  a               1    wreg     unsigned char 
  1992 ;; Auto vars:     Size  Location     Type
  1993 ;;  a               1    3[COMMON] unsigned char 
  1994 ;; Return value:  Size  Location     Type
  1995 ;;                  1    wreg      void 
  1996 ;; Registers used:
  1997 ;;		wreg
  1998 ;; Tracked objects:
  1999 ;;		On entry : 0/0
  2000 ;;		On exit  : 0/0
  2001 ;;		Unchanged: 0/0
  2002 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2003 ;;      Params:         0       0       0       0       0
  2004 ;;      Locals:         1       0       0       0       0
  2005 ;;      Temps:          0       0       0       0       0
  2006 ;;      Totals:         1       0       0       0       0
  2007 ;;Total ram usage:        1 bytes
  2008 ;; Hardware stack levels used:    1
  2009 ;; Hardware stack levels required when called:    1
  2010 ;; This function calls:
  2011 ;;		Nothing
  2012 ;; This function is called by:
  2013 ;;		_main
  2014 ;;		_USART_STRING
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017                           
  2018                           
  2019                           ;psect for function _USART_ESCRITURA
  2020  0551                     _USART_ESCRITURA:
  2021                           
  2022                           ;incstack = 0
  2023                           ; Regs used in _USART_ESCRITURA: [wreg]
  2024                           ;USART_ESCRITURA@a stored from wreg
  2025  0551  00F3               	movwf	USART_ESCRITURA@a
  2026  0552                     l1246:
  2027  0552                     l203:	
  2028                           ;USART.c: 36:     while(!TRMT);
  2029                           
  2030  0552  1683               	bsf	3,5	;RP0=1, select bank1
  2031  0553  1303               	bcf	3,6	;RP1=0, select bank1
  2032  0554  1C98               	btfss	24,1	;volatile
  2033  0555  2D57               	goto	u481
  2034  0556  2D58               	goto	u480
  2035  0557                     u481:
  2036  0557  2D52               	goto	l203
  2037  0558                     u480:
  2038  0558                     l1248:
  2039                           
  2040                           ;USART.c: 37:     TXREG = a;
  2041  0558  0873               	movf	USART_ESCRITURA@a,w
  2042  0559  1283               	bcf	3,5	;RP0=0, select bank0
  2043  055A  1303               	bcf	3,6	;RP1=0, select bank0
  2044  055B  0099               	movwf	25	;volatile
  2045  055C                     l206:
  2046  055C  0008               	return
  2047  055D                     __end_of_USART_ESCRITURA:
  2048                           
  2049                           	psect	text7
  2050  0363                     __ptext7:	
  2051 ;; *************** function _Lcd_Write_String *****************
  2052 ;; Defined at:
  2053 ;;		line 132 in file "LCD.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;  a               2    6[COMMON] PTR unsigned char 
  2056 ;;		 -> data2(16), STR_3(4), STR_2(4), STR_1(4), 
  2057 ;; Auto vars:     Size  Location     Type
  2058 ;;  i               2    3[BANK0 ] int 
  2059 ;; Return value:  Size  Location     Type
  2060 ;;                  1    wreg      void 
  2061 ;; Registers used:
  2062 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2063 ;; Tracked objects:
  2064 ;;		On entry : 0/0
  2065 ;;		On exit  : 0/0
  2066 ;;		Unchanged: 0/0
  2067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2068 ;;      Params:         2       0       0       0       0
  2069 ;;      Locals:         0       2       0       0       0
  2070 ;;      Temps:          0       3       0       0       0
  2071 ;;      Totals:         2       5       0       0       0
  2072 ;;Total ram usage:        7 bytes
  2073 ;; Hardware stack levels used:    1
  2074 ;; Hardware stack levels required when called:    3
  2075 ;; This function calls:
  2076 ;;		_Lcd_Write_Char
  2077 ;; This function is called by:
  2078 ;;		_main
  2079 ;; This function uses a non-reentrant model
  2080 ;;
  2081                           
  2082                           
  2083                           ;psect for function _Lcd_Write_String
  2084  0363                     _Lcd_Write_String:
  2085  0363                     l1736:	
  2086                           ;incstack = 0
  2087                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2088                           
  2089                           
  2090                           ;LCD.c: 132: void Lcd_Write_String(char *a);LCD.c: 133: {;LCD.c: 134:  int i;;LCD.c: 135
      +                          :  for(i=0;a[i]!='\0';i++)
  2091  0363  1283               	bcf	3,5	;RP0=0, select bank0
  2092  0364  1303               	bcf	3,6	;RP1=0, select bank0
  2093  0365  01CF               	clrf	Lcd_Write_String@i
  2094  0366  01D0               	clrf	Lcd_Write_String@i+1
  2095  0367  2B8C               	goto	l1742
  2096  0368                     l1738:
  2097                           
  2098                           ;LCD.c: 136:     Lcd_Write_Char(a[i]);
  2099  0368  084F               	movf	Lcd_Write_String@i,w
  2100  0369  0776               	addwf	Lcd_Write_String@a,w
  2101  036A  00CD               	movwf	??_Lcd_Write_String+1
  2102  036B  0877               	movf	Lcd_Write_String@a+1,w
  2103  036C  00CC               	movwf	??_Lcd_Write_String
  2104  036D  1803               	skipnc
  2105  036E  0ACC               	incf	??_Lcd_Write_String,f
  2106  036F  1FCF               	btfss	Lcd_Write_String@i,7
  2107  0370  2B72               	goto	u1070
  2108  0371  03CC               	decf	??_Lcd_Write_String,f
  2109  0372                     u1070:
  2110  0372  1283               	bcf	3,5	;RP0=0, select bank0
  2111  0373  1303               	bcf	3,6	;RP1=0, select bank0
  2112  0374  084C               	movf	??_Lcd_Write_String,w
  2113  0375  00CE               	movwf	??_Lcd_Write_String+2
  2114  0376  084E               	movf	??_Lcd_Write_String+2,w
  2115  0377  00FF               	movwf	btemp+1
  2116  0378  084D               	movf	??_Lcd_Write_String+1,w
  2117  0379  0084               	movwf	4
  2118  037A  120A  118A  23A9  120A  118A  	fcall	stringtab
  2119  037F  120A  118A  252E  120A  118A  	fcall	_Lcd_Write_Char
  2120  0384                     l1740:
  2121  0384  3001               	movlw	1
  2122  0385  1283               	bcf	3,5	;RP0=0, select bank0
  2123  0386  1303               	bcf	3,6	;RP1=0, select bank0
  2124  0387  07CF               	addwf	Lcd_Write_String@i,f
  2125  0388  1803               	skipnc
  2126  0389  0AD0               	incf	Lcd_Write_String@i+1,f
  2127  038A  3000               	movlw	0
  2128  038B  07D0               	addwf	Lcd_Write_String@i+1,f
  2129  038C                     l1742:
  2130  038C  084F               	movf	Lcd_Write_String@i,w
  2131  038D  0776               	addwf	Lcd_Write_String@a,w
  2132  038E  00CD               	movwf	??_Lcd_Write_String+1
  2133  038F  0877               	movf	Lcd_Write_String@a+1,w
  2134  0390  00CC               	movwf	??_Lcd_Write_String
  2135  0391  1803               	skipnc
  2136  0392  0ACC               	incf	??_Lcd_Write_String,f
  2137  0393  1FCF               	btfss	Lcd_Write_String@i,7
  2138  0394  2B96               	goto	u1080
  2139  0395  03CC               	decf	??_Lcd_Write_String,f
  2140  0396                     u1080:
  2141  0396  1283               	bcf	3,5	;RP0=0, select bank0
  2142  0397  1303               	bcf	3,6	;RP1=0, select bank0
  2143  0398  084C               	movf	??_Lcd_Write_String,w
  2144  0399  00CE               	movwf	??_Lcd_Write_String+2
  2145  039A  084E               	movf	??_Lcd_Write_String+2,w
  2146  039B  00FF               	movwf	btemp+1
  2147  039C  084D               	movf	??_Lcd_Write_String+1,w
  2148  039D  0084               	movwf	4
  2149  039E  120A  118A  23A9  120A  118A  	fcall	stringtab
  2150  03A3  3A00               	xorlw	0
  2151  03A4  1D03               	skipz
  2152  03A5  2BA7               	goto	u1091
  2153  03A6  2BA8               	goto	u1090
  2154  03A7                     u1091:
  2155  03A7  2B68               	goto	l1738
  2156  03A8                     u1090:
  2157  03A8                     l186:
  2158  03A8  0008               	return
  2159  03A9                     __end_of_Lcd_Write_String:
  2160                           
  2161                           	psect	text8
  2162  052E                     __ptext8:	
  2163 ;; *************** function _Lcd_Write_Char *****************
  2164 ;; Defined at:
  2165 ;;		line 115 in file "LCD.c"
  2166 ;; Parameters:    Size  Location     Type
  2167 ;;  a               1    wreg     unsigned char 
  2168 ;; Auto vars:     Size  Location     Type
  2169 ;;  a               1    5[COMMON] unsigned char 
  2170 ;; Return value:  Size  Location     Type
  2171 ;;                  1    wreg      void 
  2172 ;; Registers used:
  2173 ;;		wreg, status,2, status,0, pclath, cstack
  2174 ;; Tracked objects:
  2175 ;;		On entry : 0/0
  2176 ;;		On exit  : 0/0
  2177 ;;		Unchanged: 0/0
  2178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2179 ;;      Params:         0       0       0       0       0
  2180 ;;      Locals:         1       0       0       0       0
  2181 ;;      Temps:          1       0       0       0       0
  2182 ;;      Totals:         2       0       0       0       0
  2183 ;;Total ram usage:        2 bytes
  2184 ;; Hardware stack levels used:    1
  2185 ;; Hardware stack levels required when called:    2
  2186 ;; This function calls:
  2187 ;;		_Lcd_Port
  2188 ;; This function is called by:
  2189 ;;		_Lcd_Write_String
  2190 ;; This function uses a non-reentrant model
  2191 ;;
  2192                           
  2193                           
  2194                           ;psect for function _Lcd_Write_Char
  2195  052E                     _Lcd_Write_Char:
  2196                           
  2197                           ;incstack = 0
  2198                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2199                           ;Lcd_Write_Char@a stored from wreg
  2200  052E  00F5               	movwf	Lcd_Write_Char@a
  2201  052F                     l1662:
  2202                           
  2203                           ;LCD.c: 115: void Lcd_Write_Char(char a);LCD.c: 116: {;LCD.c: 121:    RE0 = 1;
  2204  052F  1283               	bcf	3,5	;RP0=0, select bank0
  2205  0530  1303               	bcf	3,6	;RP1=0, select bank0
  2206  0531  1409               	bsf	9,0	;volatile
  2207  0532                     l1664:
  2208                           
  2209                           ;LCD.c: 126:    Lcd_Port(a);
  2210  0532  0875               	movf	Lcd_Write_Char@a,w
  2211  0533  120A  118A  256D  120A  118A  	fcall	_Lcd_Port
  2212  0538                     l1666:
  2213                           
  2214                           ;LCD.c: 127:    RE1 = 1;
  2215  0538  1283               	bcf	3,5	;RP0=0, select bank0
  2216  0539  1303               	bcf	3,6	;RP1=0, select bank0
  2217  053A  1489               	bsf	9,1	;volatile
  2218  053B                     l1668:
  2219                           
  2220                           ;LCD.c: 128:    _delay((unsigned long)((40)*(8000000/4000000.0)));
  2221  053B  301A               	movlw	26
  2222  053C  00F4               	movwf	??_Lcd_Write_Char
  2223  053D                     u1197:
  2224  053D  0BF4               	decfsz	??_Lcd_Write_Char,f
  2225  053E  2D3D               	goto	u1197
  2226  053F  0000               	nop
  2227  0540                     l1670:
  2228                           
  2229                           ;LCD.c: 129:    RE1 = 0;
  2230  0540  1283               	bcf	3,5	;RP0=0, select bank0
  2231  0541  1303               	bcf	3,6	;RP1=0, select bank0
  2232  0542  1089               	bcf	9,1	;volatile
  2233  0543                     l180:
  2234  0543  0008               	return
  2235  0544                     __end_of_Lcd_Write_Char:
  2236                           
  2237                           	psect	text9
  2238  04AC                     __ptext9:	
  2239 ;; *************** function _Lcd_Set_Cursor *****************
  2240 ;; Defined at:
  2241 ;;		line 75 in file "LCD.c"
  2242 ;; Parameters:    Size  Location     Type
  2243 ;;  a               1    wreg     unsigned char 
  2244 ;;  b               1    7[COMMON] unsigned char 
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;  a               1    1[BANK0 ] unsigned char 
  2247 ;;  temp            1    2[BANK0 ] unsigned char 
  2248 ;; Return value:  Size  Location     Type
  2249 ;;                  1    wreg      void 
  2250 ;; Registers used:
  2251 ;;		wreg, status,2, status,0, pclath, cstack
  2252 ;; Tracked objects:
  2253 ;;		On entry : 0/0
  2254 ;;		On exit  : 0/0
  2255 ;;		Unchanged: 0/0
  2256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2257 ;;      Params:         1       0       0       0       0
  2258 ;;      Locals:         0       2       0       0       0
  2259 ;;      Temps:          0       1       0       0       0
  2260 ;;      Totals:         1       3       0       0       0
  2261 ;;Total ram usage:        4 bytes
  2262 ;; Hardware stack levels used:    1
  2263 ;; Hardware stack levels required when called:    3
  2264 ;; This function calls:
  2265 ;;		_Lcd_Cmd
  2266 ;; This function is called by:
  2267 ;;		_main
  2268 ;; This function uses a non-reentrant model
  2269 ;;
  2270                           
  2271                           
  2272                           ;psect for function _Lcd_Set_Cursor
  2273  04AC                     _Lcd_Set_Cursor:
  2274                           
  2275                           ;incstack = 0
  2276                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2277                           ;Lcd_Set_Cursor@a stored from wreg
  2278  04AC  1283               	bcf	3,5	;RP0=0, select bank0
  2279  04AD  1303               	bcf	3,6	;RP1=0, select bank0
  2280  04AE  00CD               	movwf	Lcd_Set_Cursor@a
  2281  04AF                     l1724:
  2282                           
  2283                           ;LCD.c: 75: void Lcd_Set_Cursor(char a, char b);LCD.c: 76: {;LCD.c: 77:  char temp;;LCD.
      +                          c: 78:  if(a == 1)
  2284  04AF  034D               	decf	Lcd_Set_Cursor@a,w
  2285  04B0  1D03               	btfss	3,2
  2286  04B1  2CB3               	goto	u1051
  2287  04B2  2CB4               	goto	u1050
  2288  04B3                     u1051:
  2289  04B3  2CC0               	goto	l1730
  2290  04B4                     u1050:
  2291  04B4                     l1726:
  2292                           
  2293                           ;LCD.c: 79:  {;LCD.c: 80:    temp = 0x80 + b - 1;
  2294  04B4  0877               	movf	Lcd_Set_Cursor@b,w
  2295  04B5  3E7F               	addlw	127
  2296  04B6  00CC               	movwf	??_Lcd_Set_Cursor
  2297  04B7  084C               	movf	??_Lcd_Set_Cursor,w
  2298  04B8  00CE               	movwf	Lcd_Set_Cursor@temp
  2299  04B9                     l1728:
  2300                           
  2301                           ;LCD.c: 84:   Lcd_Cmd(temp);
  2302  04B9  084E               	movf	Lcd_Set_Cursor@temp,w
  2303  04BA  120A  118A  2514  120A  118A  	fcall	_Lcd_Cmd
  2304                           
  2305                           ;LCD.c: 85:  }
  2306  04BF  2CD1               	goto	l174
  2307  04C0                     l1730:
  2308  04C0  3002               	movlw	2
  2309  04C1  064D               	xorwf	Lcd_Set_Cursor@a,w
  2310  04C2  1D03               	btfss	3,2
  2311  04C3  2CC5               	goto	u1061
  2312  04C4  2CC6               	goto	u1060
  2313  04C5                     u1061:
  2314  04C5  2CD1               	goto	l174
  2315  04C6                     u1060:
  2316  04C6                     l1732:
  2317                           
  2318                           ;LCD.c: 87:  {;LCD.c: 88:   temp = 0xC0 + b - 1;
  2319  04C6  0877               	movf	Lcd_Set_Cursor@b,w
  2320  04C7  3EBF               	addlw	191
  2321  04C8  00CC               	movwf	??_Lcd_Set_Cursor
  2322  04C9  084C               	movf	??_Lcd_Set_Cursor,w
  2323  04CA  00CE               	movwf	Lcd_Set_Cursor@temp
  2324  04CB                     l1734:
  2325                           
  2326                           ;LCD.c: 92:   Lcd_Cmd(temp);
  2327  04CB  084E               	movf	Lcd_Set_Cursor@temp,w
  2328  04CC  120A  118A  2514  120A  118A  	fcall	_Lcd_Cmd
  2329  04D1                     l174:
  2330  04D1  0008               	return
  2331  04D2                     __end_of_Lcd_Set_Cursor:
  2332                           
  2333                           	psect	text10
  2334  02CD                     __ptext10:	
  2335 ;; *************** function _Lcd_Init *****************
  2336 ;; Defined at:
  2337 ;;		line 96 in file "LCD.c"
  2338 ;; Parameters:    Size  Location     Type
  2339 ;;		None
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;		None
  2342 ;; Return value:  Size  Location     Type
  2343 ;;                  1    wreg      void 
  2344 ;; Registers used:
  2345 ;;		wreg, status,2, status,0, pclath, cstack
  2346 ;; Tracked objects:
  2347 ;;		On entry : 0/0
  2348 ;;		On exit  : 0/0
  2349 ;;		Unchanged: 0/0
  2350 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2351 ;;      Params:         0       0       0       0       0
  2352 ;;      Locals:         0       0       0       0       0
  2353 ;;      Temps:          0       2       0       0       0
  2354 ;;      Totals:         0       2       0       0       0
  2355 ;;Total ram usage:        2 bytes
  2356 ;; Hardware stack levels used:    1
  2357 ;; Hardware stack levels required when called:    3
  2358 ;; This function calls:
  2359 ;;		_Lcd_Cmd
  2360 ;;		_Lcd_Port
  2361 ;; This function is called by:
  2362 ;;		_main
  2363 ;; This function uses a non-reentrant model
  2364 ;;
  2365                           
  2366                           
  2367                           ;psect for function _Lcd_Init
  2368  02CD                     _Lcd_Init:
  2369  02CD                     l1712:	
  2370                           ;incstack = 0
  2371                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2372                           
  2373                           
  2374                           ;LCD.c: 98:   Lcd_Port(0x00);
  2375  02CD  3000               	movlw	0
  2376  02CE  120A  118A  256D  120A  118A  	fcall	_Lcd_Port
  2377  02D3                     l1714:
  2378                           
  2379                           ;LCD.c: 99:    _delay((unsigned long)((20)*(8000000/4000.0)));
  2380  02D3  3034               	movlw	52
  2381  02D4  1283               	bcf	3,5	;RP0=0, select bank0
  2382  02D5  1303               	bcf	3,6	;RP1=0, select bank0
  2383  02D6  00CD               	movwf	??_Lcd_Init+1
  2384  02D7  30F1               	movlw	241
  2385  02D8  00CC               	movwf	??_Lcd_Init
  2386  02D9                     u1207:
  2387  02D9  0BCC               	decfsz	??_Lcd_Init,f
  2388  02DA  2AD9               	goto	u1207
  2389  02DB  0BCD               	decfsz	??_Lcd_Init+1,f
  2390  02DC  2AD9               	goto	u1207
  2391  02DD                     l1716:
  2392                           
  2393                           ;LCD.c: 100:   Lcd_Cmd(0x30);
  2394  02DD  3030               	movlw	48
  2395  02DE  120A  118A  2514  120A  118A  	fcall	_Lcd_Cmd
  2396                           
  2397                           ;LCD.c: 101:  _delay((unsigned long)((5)*(8000000/4000.0)));
  2398  02E3  300D               	movlw	13
  2399  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  2400  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  2401  02E6  00CD               	movwf	??_Lcd_Init+1
  2402  02E7  30FB               	movlw	251
  2403  02E8  00CC               	movwf	??_Lcd_Init
  2404  02E9                     u1217:
  2405  02E9  0BCC               	decfsz	??_Lcd_Init,f
  2406  02EA  2AE9               	goto	u1217
  2407  02EB  0BCD               	decfsz	??_Lcd_Init+1,f
  2408  02EC  2AE9               	goto	u1217
  2409  02ED                     l1718:
  2410                           
  2411                           ;LCD.c: 102:   Lcd_Cmd(0x30);
  2412  02ED  3030               	movlw	48
  2413  02EE  120A  118A  2514  120A  118A  	fcall	_Lcd_Cmd
  2414  02F3                     l1720:
  2415                           
  2416                           ;LCD.c: 103:  _delay((unsigned long)((11)*(8000000/4000.0)));
  2417  02F3  301D               	movlw	29
  2418  02F4  1283               	bcf	3,5	;RP0=0, select bank0
  2419  02F5  1303               	bcf	3,6	;RP1=0, select bank0
  2420  02F6  00CD               	movwf	??_Lcd_Init+1
  2421  02F7  3090               	movlw	144
  2422  02F8  00CC               	movwf	??_Lcd_Init
  2423  02F9                     u1227:
  2424  02F9  0BCC               	decfsz	??_Lcd_Init,f
  2425  02FA  2AF9               	goto	u1227
  2426  02FB  0BCD               	decfsz	??_Lcd_Init+1,f
  2427  02FC  2AF9               	goto	u1227
  2428  02FD  0000               	nop
  2429                           
  2430                           ;LCD.c: 104:   Lcd_Cmd(0x30);
  2431  02FE  3030               	movlw	48
  2432  02FF  120A  118A  2514  120A  118A  	fcall	_Lcd_Cmd
  2433                           
  2434                           ;LCD.c: 106:   Lcd_Cmd(0x38);
  2435  0304  3038               	movlw	56
  2436  0305  120A  118A  2514  120A  118A  	fcall	_Lcd_Cmd
  2437                           
  2438                           ;LCD.c: 107:   Lcd_Cmd(0x0C);
  2439  030A  300C               	movlw	12
  2440  030B  120A  118A  2514  120A  118A  	fcall	_Lcd_Cmd
  2441                           
  2442                           ;LCD.c: 108:   Lcd_Cmd(0x01);
  2443  0310  3001               	movlw	1
  2444  0311  120A  118A  2514  120A  118A  	fcall	_Lcd_Cmd
  2445                           
  2446                           ;LCD.c: 109:   Lcd_Cmd(0x06);
  2447  0316  3006               	movlw	6
  2448  0317  120A  118A  2514  120A  118A  	fcall	_Lcd_Cmd
  2449  031C                     l177:
  2450  031C  0008               	return
  2451  031D                     __end_of_Lcd_Init:
  2452                           
  2453                           	psect	text11
  2454  0544                     __ptext11:	
  2455 ;; *************** function _Lcd_Clear *****************
  2456 ;; Defined at:
  2457 ;;		line 69 in file "LCD.c"
  2458 ;; Parameters:    Size  Location     Type
  2459 ;;		None
  2460 ;; Auto vars:     Size  Location     Type
  2461 ;;		None
  2462 ;; Return value:  Size  Location     Type
  2463 ;;                  1    wreg      void 
  2464 ;; Registers used:
  2465 ;;		wreg, status,2, status,0, pclath, cstack
  2466 ;; Tracked objects:
  2467 ;;		On entry : 0/0
  2468 ;;		On exit  : 0/0
  2469 ;;		Unchanged: 0/0
  2470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2471 ;;      Params:         0       0       0       0       0
  2472 ;;      Locals:         0       0       0       0       0
  2473 ;;      Temps:          0       0       0       0       0
  2474 ;;      Totals:         0       0       0       0       0
  2475 ;;Total ram usage:        0 bytes
  2476 ;; Hardware stack levels used:    1
  2477 ;; Hardware stack levels required when called:    3
  2478 ;; This function calls:
  2479 ;;		_Lcd_Cmd
  2480 ;; This function is called by:
  2481 ;;		_main
  2482 ;; This function uses a non-reentrant model
  2483 ;;
  2484                           
  2485                           
  2486                           ;psect for function _Lcd_Clear
  2487  0544                     _Lcd_Clear:
  2488  0544                     l1722:	
  2489                           ;incstack = 0
  2490                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2491                           
  2492                           
  2493                           ;LCD.c: 71:  Lcd_Cmd(0);
  2494  0544  3000               	movlw	0
  2495  0545  120A  118A  2514  120A  118A  	fcall	_Lcd_Cmd
  2496                           
  2497                           ;LCD.c: 72:  Lcd_Cmd(1);
  2498  054A  3001               	movlw	1
  2499  054B  120A  118A  2514  120A  118A  	fcall	_Lcd_Cmd
  2500  0550                     l168:
  2501  0550  0008               	return
  2502  0551                     __end_of_Lcd_Clear:
  2503                           
  2504                           	psect	text12
  2505  0514                     __ptext12:	
  2506 ;; *************** function _Lcd_Cmd *****************
  2507 ;; Defined at:
  2508 ;;		line 60 in file "LCD.c"
  2509 ;; Parameters:    Size  Location     Type
  2510 ;;  a               1    wreg     unsigned char 
  2511 ;; Auto vars:     Size  Location     Type
  2512 ;;  a               1    6[COMMON] unsigned char 
  2513 ;; Return value:  Size  Location     Type
  2514 ;;                  1    wreg      void 
  2515 ;; Registers used:
  2516 ;;		wreg, status,2, status,0, pclath, cstack
  2517 ;; Tracked objects:
  2518 ;;		On entry : 0/0
  2519 ;;		On exit  : 0/0
  2520 ;;		Unchanged: 0/0
  2521 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2522 ;;      Params:         0       0       0       0       0
  2523 ;;      Locals:         1       0       0       0       0
  2524 ;;      Temps:          2       0       0       0       0
  2525 ;;      Totals:         3       0       0       0       0
  2526 ;;Total ram usage:        3 bytes
  2527 ;; Hardware stack levels used:    1
  2528 ;; Hardware stack levels required when called:    2
  2529 ;; This function calls:
  2530 ;;		_Lcd_Port
  2531 ;; This function is called by:
  2532 ;;		_Lcd_Clear
  2533 ;;		_Lcd_Set_Cursor
  2534 ;;		_Lcd_Init
  2535 ;; This function uses a non-reentrant model
  2536 ;;
  2537                           
  2538                           
  2539                           ;psect for function _Lcd_Cmd
  2540  0514                     _Lcd_Cmd:
  2541                           
  2542                           ;incstack = 0
  2543                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2544                           ;Lcd_Cmd@a stored from wreg
  2545  0514  00F6               	movwf	Lcd_Cmd@a
  2546  0515                     l1652:
  2547                           
  2548                           ;LCD.c: 60: void Lcd_Cmd(char a);LCD.c: 61: {;LCD.c: 62:  RE0 = 0;
  2549  0515  1283               	bcf	3,5	;RP0=0, select bank0
  2550  0516  1303               	bcf	3,6	;RP1=0, select bank0
  2551  0517  1009               	bcf	9,0	;volatile
  2552  0518                     l1654:
  2553                           
  2554                           ;LCD.c: 63:  Lcd_Port(a);
  2555  0518  0876               	movf	Lcd_Cmd@a,w
  2556  0519  120A  118A  256D  120A  118A  	fcall	_Lcd_Port
  2557  051E                     l1656:
  2558                           
  2559                           ;LCD.c: 64:  RE1 = 1;
  2560  051E  1283               	bcf	3,5	;RP0=0, select bank0
  2561  051F  1303               	bcf	3,6	;RP1=0, select bank0
  2562  0520  1489               	bsf	9,1	;volatile
  2563  0521                     l1658:
  2564                           
  2565                           ;LCD.c: 65:         _delay((unsigned long)((4)*(8000000/4000.0)));
  2566  0521  300B               	movlw	11
  2567  0522  00F5               	movwf	??_Lcd_Cmd+1
  2568  0523  3062               	movlw	98
  2569  0524  00F4               	movwf	??_Lcd_Cmd
  2570  0525                     u1237:
  2571  0525  0BF4               	decfsz	??_Lcd_Cmd,f
  2572  0526  2D25               	goto	u1237
  2573  0527  0BF5               	decfsz	??_Lcd_Cmd+1,f
  2574  0528  2D25               	goto	u1237
  2575  0529  0000               	nop
  2576  052A                     l1660:
  2577                           
  2578                           ;LCD.c: 66:         RE1 = 0;
  2579  052A  1283               	bcf	3,5	;RP0=0, select bank0
  2580  052B  1303               	bcf	3,6	;RP1=0, select bank0
  2581  052C  1089               	bcf	9,1	;volatile
  2582  052D                     l165:
  2583  052D  0008               	return
  2584  052E                     __end_of_Lcd_Cmd:
  2585                           
  2586                           	psect	text13
  2587  056D                     __ptext13:	
  2588 ;; *************** function _Lcd_Port *****************
  2589 ;; Defined at:
  2590 ;;		line 17 in file "LCD.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;  a               1    wreg     unsigned char 
  2593 ;; Auto vars:     Size  Location     Type
  2594 ;;  a               1    3[COMMON] unsigned char 
  2595 ;; Return value:  Size  Location     Type
  2596 ;;                  1    wreg      void 
  2597 ;; Registers used:
  2598 ;;		wreg
  2599 ;; Tracked objects:
  2600 ;;		On entry : 0/0
  2601 ;;		On exit  : 0/0
  2602 ;;		Unchanged: 0/0
  2603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2604 ;;      Params:         0       0       0       0       0
  2605 ;;      Locals:         1       0       0       0       0
  2606 ;;      Temps:          0       0       0       0       0
  2607 ;;      Totals:         1       0       0       0       0
  2608 ;;Total ram usage:        1 bytes
  2609 ;; Hardware stack levels used:    1
  2610 ;; Hardware stack levels required when called:    1
  2611 ;; This function calls:
  2612 ;;		Nothing
  2613 ;; This function is called by:
  2614 ;;		_Lcd_Cmd
  2615 ;;		_Lcd_Init
  2616 ;;		_Lcd_Write_Char
  2617 ;; This function uses a non-reentrant model
  2618 ;;
  2619                           
  2620                           
  2621                           ;psect for function _Lcd_Port
  2622  056D                     _Lcd_Port:
  2623                           
  2624                           ;incstack = 0
  2625                           ; Regs used in _Lcd_Port: [wreg]
  2626                           ;Lcd_Port@a stored from wreg
  2627  056D  00F3               	movwf	Lcd_Port@a
  2628  056E                     l1650:
  2629                           
  2630                           ;LCD.c: 17: void Lcd_Port(char a);LCD.c: 18: {;LCD.c: 19:     PORTD = a;
  2631  056E  0873               	movf	Lcd_Port@a,w
  2632  056F  1283               	bcf	3,5	;RP0=0, select bank0
  2633  0570  1303               	bcf	3,6	;RP1=0, select bank0
  2634  0571  0088               	movwf	8	;volatile
  2635  0572                     l162:
  2636  0572  0008               	return
  2637  0573                     __end_of_Lcd_Port:
  2638                           
  2639                           	psect	text14
  2640  0226                     __ptext14:	
  2641 ;; *************** function _ADC_CH1 *****************
  2642 ;; Defined at:
  2643 ;;		line 190 in file "main.c"
  2644 ;; Parameters:    Size  Location     Type
  2645 ;;		None
  2646 ;; Auto vars:     Size  Location     Type
  2647 ;;		None
  2648 ;; Return value:  Size  Location     Type
  2649 ;;                  1    wreg      void 
  2650 ;; Registers used:
  2651 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2652 ;; Tracked objects:
  2653 ;;		On entry : 0/0
  2654 ;;		On exit  : 0/0
  2655 ;;		Unchanged: 0/0
  2656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2657 ;;      Params:         0       0       0       0       0
  2658 ;;      Locals:         0       0       0       0       0
  2659 ;;      Temps:          0       2       0       0       0
  2660 ;;      Totals:         0       2       0       0       0
  2661 ;;Total ram usage:        2 bytes
  2662 ;; Hardware stack levels used:    1
  2663 ;; Hardware stack levels required when called:    2
  2664 ;; This function calls:
  2665 ;;		_ADC_ch
  2666 ;;		_ADC_val
  2667 ;;		___awdiv
  2668 ;;		___wmul
  2669 ;; This function is called by:
  2670 ;;		_main
  2671 ;; This function uses a non-reentrant model
  2672 ;;
  2673                           
  2674                           
  2675                           ;psect for function _ADC_CH1
  2676  0226                     _ADC_CH1:
  2677  0226                     l1762:	
  2678                           ;incstack = 0
  2679                           ; Regs used in _ADC_CH1: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2680                           
  2681                           
  2682                           ;main.c: 191:     ADC_ch(1);
  2683  0226  3001               	movlw	1
  2684  0227  00F3               	movwf	ADC_ch@channel
  2685  0228  3000               	movlw	0
  2686  0229  00F4               	movwf	ADC_ch@channel+1
  2687  022A  120A  118A  24D2  120A  118A  	fcall	_ADC_ch
  2688  022F                     l1764:
  2689                           
  2690                           ;main.c: 192:     ADCON0bits.ADCS0 = 1;
  2691  022F  1283               	bcf	3,5	;RP0=0, select bank0
  2692  0230  1303               	bcf	3,6	;RP1=0, select bank0
  2693  0231  171F               	bsf	31,6	;volatile
  2694  0232                     l1766:
  2695                           
  2696                           ;main.c: 193:     ADCON0bits.ADCS1 = 0;
  2697  0232  139F               	bcf	31,7	;volatile
  2698  0233                     l1768:
  2699                           
  2700                           ;main.c: 194:     ADCON0bits.ADON = 1;
  2701  0233  141F               	bsf	31,0	;volatile
  2702  0234                     l1770:
  2703                           
  2704                           ;main.c: 195:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2705  0234  3019               	movlw	25
  2706  0235  1283               	bcf	3,5	;RP0=0, select bank0
  2707  0236  1303               	bcf	3,6	;RP1=0, select bank0
  2708  0237  00D6               	movwf	??_ADC_CH1
  2709  0238                     u1247:
  2710  0238  0BD6               	decfsz	??_ADC_CH1,f
  2711  0239  2A38               	goto	u1247
  2712  023A  2A3B               	nop2
  2713  023B                     l1772:
  2714                           
  2715                           ;main.c: 196:     ADCON0bits.GO = 1;
  2716  023B  1283               	bcf	3,5	;RP0=0, select bank0
  2717  023C  1303               	bcf	3,6	;RP1=0, select bank0
  2718  023D  149F               	bsf	31,1	;volatile
  2719                           
  2720                           ;main.c: 197:     while (ADCON0bits.GO != 0) {
  2721  023E  2A75               	goto	l1778
  2722  023F                     l1774:
  2723                           
  2724                           ;main.c: 198:         ADC_res2 = ADC_val(ADRESL, ADRESH);
  2725  023F  081E               	movf	30,w	;volatile
  2726  0240  00D6               	movwf	??_ADC_CH1
  2727  0241  0856               	movf	??_ADC_CH1,w
  2728  0242  00F3               	movwf	ADC_val@ADRES_H
  2729  0243  1683               	bsf	3,5	;RP0=1, select bank1
  2730  0244  1303               	bcf	3,6	;RP1=0, select bank1
  2731  0245  081E               	movf	30,w	;volatile
  2732  0246  120A  118A  2565  120A  118A  	fcall	_ADC_val
  2733  024B  1283               	bcf	3,5	;RP0=0, select bank0
  2734  024C  1303               	bcf	3,6	;RP1=0, select bank0
  2735  024D  00D7               	movwf	??_ADC_CH1+1
  2736  024E  0857               	movf	??_ADC_CH1+1,w
  2737  024F  00F9               	movwf	_ADC_res2
  2738  0250                     l1776:
  2739                           
  2740                           ;main.c: 199:         VAL2 = ((ADC_res2 * 50) / 255);
  2741  0250  30FF               	movlw	255
  2742  0251  00CE               	movwf	___awdiv@divisor
  2743  0252  3000               	movlw	0
  2744  0253  00CF               	movwf	___awdiv@divisor+1
  2745  0254  0879               	movf	_ADC_res2,w
  2746  0255  00D6               	movwf	??_ADC_CH1
  2747  0256  01D7               	clrf	??_ADC_CH1+1
  2748  0257  0856               	movf	??_ADC_CH1,w
  2749  0258  00F3               	movwf	___wmul@multiplier
  2750  0259  0857               	movf	??_ADC_CH1+1,w
  2751  025A  00F4               	movwf	___wmul@multiplier+1
  2752  025B  3032               	movlw	50
  2753  025C  00F5               	movwf	___wmul@multiplicand
  2754  025D  3000               	movlw	0
  2755  025E  00F6               	movwf	___wmul@multiplicand+1
  2756  025F  120A  118A  2458  120A  118A  	fcall	___wmul
  2757  0264  0874               	movf	?___wmul+1,w
  2758  0265  1283               	bcf	3,5	;RP0=0, select bank0
  2759  0266  1303               	bcf	3,6	;RP1=0, select bank0
  2760  0267  00D1               	movwf	___awdiv@dividend+1
  2761  0268  0873               	movf	?___wmul,w
  2762  0269  00D0               	movwf	___awdiv@dividend
  2763  026A  120A  118A  21BD  120A  118A  	fcall	___awdiv
  2764  026F  1283               	bcf	3,5	;RP0=0, select bank0
  2765  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2766  0271  084F               	movf	?___awdiv+1,w
  2767  0272  00A3               	movwf	_VAL2+1
  2768  0273  084E               	movf	?___awdiv,w
  2769  0274  00A2               	movwf	_VAL2
  2770  0275                     l1778:
  2771                           
  2772                           ;main.c: 197:     while (ADCON0bits.GO != 0) {
  2773  0275  189F               	btfsc	31,1	;volatile
  2774  0276  2A78               	goto	u1111
  2775  0277  2A79               	goto	u1110
  2776  0278                     u1111:
  2777  0278  2A3F               	goto	l1774
  2778  0279                     u1110:
  2779  0279                     l130:
  2780  0279  0008               	return
  2781  027A                     __end_of_ADC_CH1:
  2782                           
  2783                           	psect	text15
  2784  027A                     __ptext15:	
  2785 ;; *************** function _ADC_CH0 *****************
  2786 ;; Defined at:
  2787 ;;		line 175 in file "main.c"
  2788 ;; Parameters:    Size  Location     Type
  2789 ;;		None
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;		None
  2792 ;; Return value:  Size  Location     Type
  2793 ;;                  1    wreg      void 
  2794 ;; Registers used:
  2795 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2796 ;; Tracked objects:
  2797 ;;		On entry : 0/0
  2798 ;;		On exit  : 0/0
  2799 ;;		Unchanged: 0/0
  2800 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2801 ;;      Params:         0       0       0       0       0
  2802 ;;      Locals:         0       0       0       0       0
  2803 ;;      Temps:          0       2       0       0       0
  2804 ;;      Totals:         0       2       0       0       0
  2805 ;;Total ram usage:        2 bytes
  2806 ;; Hardware stack levels used:    1
  2807 ;; Hardware stack levels required when called:    2
  2808 ;; This function calls:
  2809 ;;		_ADC_ch
  2810 ;;		_ADC_val
  2811 ;;		___awdiv
  2812 ;;		___wmul
  2813 ;; This function is called by:
  2814 ;;		_main
  2815 ;; This function uses a non-reentrant model
  2816 ;;
  2817                           
  2818                           
  2819                           ;psect for function _ADC_CH0
  2820  027A                     _ADC_CH0:
  2821  027A                     l1744:	
  2822                           ;incstack = 0
  2823                           ; Regs used in _ADC_CH0: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2824                           
  2825                           
  2826                           ;main.c: 176:     ADC_ch(0);
  2827  027A  3000               	movlw	0
  2828  027B  00F3               	movwf	ADC_ch@channel
  2829  027C  00F4               	movwf	ADC_ch@channel+1
  2830  027D  120A  118A  24D2  120A  118A  	fcall	_ADC_ch
  2831  0282                     l1746:
  2832                           
  2833                           ;main.c: 178:     ADCON0bits.ADCS0 = 1;
  2834  0282  1283               	bcf	3,5	;RP0=0, select bank0
  2835  0283  1303               	bcf	3,6	;RP1=0, select bank0
  2836  0284  171F               	bsf	31,6	;volatile
  2837  0285                     l1748:
  2838                           
  2839                           ;main.c: 179:     ADCON0bits.ADCS1 = 0;
  2840  0285  139F               	bcf	31,7	;volatile
  2841  0286                     l1750:
  2842                           
  2843                           ;main.c: 180:     ADCON0bits.ADON = 1;
  2844  0286  141F               	bsf	31,0	;volatile
  2845  0287                     l1752:
  2846                           
  2847                           ;main.c: 181:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2848  0287  3019               	movlw	25
  2849  0288  1283               	bcf	3,5	;RP0=0, select bank0
  2850  0289  1303               	bcf	3,6	;RP1=0, select bank0
  2851  028A  00D6               	movwf	??_ADC_CH0
  2852  028B                     u1257:
  2853  028B  0BD6               	decfsz	??_ADC_CH0,f
  2854  028C  2A8B               	goto	u1257
  2855  028D  2A8E               	nop2
  2856  028E                     l1754:
  2857                           
  2858                           ;main.c: 182:     ADCON0bits.GO = 1;
  2859  028E  1283               	bcf	3,5	;RP0=0, select bank0
  2860  028F  1303               	bcf	3,6	;RP1=0, select bank0
  2861  0290  149F               	bsf	31,1	;volatile
  2862                           
  2863                           ;main.c: 183:     while (ADCON0bits.GO != 0) {
  2864  0291  2AC8               	goto	l1760
  2865  0292                     l1756:
  2866                           
  2867                           ;main.c: 184:         ADC_res1 = ADC_val(ADRESL, ADRESH);
  2868  0292  081E               	movf	30,w	;volatile
  2869  0293  00D6               	movwf	??_ADC_CH0
  2870  0294  0856               	movf	??_ADC_CH0,w
  2871  0295  00F3               	movwf	ADC_val@ADRES_H
  2872  0296  1683               	bsf	3,5	;RP0=1, select bank1
  2873  0297  1303               	bcf	3,6	;RP1=0, select bank1
  2874  0298  081E               	movf	30,w	;volatile
  2875  0299  120A  118A  2565  120A  118A  	fcall	_ADC_val
  2876  029E  1283               	bcf	3,5	;RP0=0, select bank0
  2877  029F  1303               	bcf	3,6	;RP1=0, select bank0
  2878  02A0  00D7               	movwf	??_ADC_CH0+1
  2879  02A1  0857               	movf	??_ADC_CH0+1,w
  2880  02A2  00FA               	movwf	_ADC_res1
  2881  02A3                     l1758:
  2882                           
  2883                           ;main.c: 185:         VAL1 = ((ADC_res1 * 50) / 255);
  2884  02A3  30FF               	movlw	255
  2885  02A4  00CE               	movwf	___awdiv@divisor
  2886  02A5  3000               	movlw	0
  2887  02A6  00CF               	movwf	___awdiv@divisor+1
  2888  02A7  087A               	movf	_ADC_res1,w
  2889  02A8  00D6               	movwf	??_ADC_CH0
  2890  02A9  01D7               	clrf	??_ADC_CH0+1
  2891  02AA  0856               	movf	??_ADC_CH0,w
  2892  02AB  00F3               	movwf	___wmul@multiplier
  2893  02AC  0857               	movf	??_ADC_CH0+1,w
  2894  02AD  00F4               	movwf	___wmul@multiplier+1
  2895  02AE  3032               	movlw	50
  2896  02AF  00F5               	movwf	___wmul@multiplicand
  2897  02B0  3000               	movlw	0
  2898  02B1  00F6               	movwf	___wmul@multiplicand+1
  2899  02B2  120A  118A  2458  120A  118A  	fcall	___wmul
  2900  02B7  0874               	movf	?___wmul+1,w
  2901  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  2902  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  2903  02BA  00D1               	movwf	___awdiv@dividend+1
  2904  02BB  0873               	movf	?___wmul,w
  2905  02BC  00D0               	movwf	___awdiv@dividend
  2906  02BD  120A  118A  21BD  120A  118A  	fcall	___awdiv
  2907  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  2908  02C3  1303               	bcf	3,6	;RP1=0, select bank0
  2909  02C4  084F               	movf	?___awdiv+1,w
  2910  02C5  00A5               	movwf	_VAL1+1
  2911  02C6  084E               	movf	?___awdiv,w
  2912  02C7  00A4               	movwf	_VAL1
  2913  02C8                     l1760:
  2914                           
  2915                           ;main.c: 183:     while (ADCON0bits.GO != 0) {
  2916  02C8  189F               	btfsc	31,1	;volatile
  2917  02C9  2ACB               	goto	u1101
  2918  02CA  2ACC               	goto	u1100
  2919  02CB                     u1101:
  2920  02CB  2A92               	goto	l1756
  2921  02CC                     u1100:
  2922  02CC                     l124:
  2923  02CC  0008               	return
  2924  02CD                     __end_of_ADC_CH0:
  2925                           
  2926                           	psect	text16
  2927  0458                     __ptext16:	
  2928 ;; *************** function ___wmul *****************
  2929 ;; Defined at:
  2930 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\Umul16.c"
  2931 ;; Parameters:    Size  Location     Type
  2932 ;;  multiplier      2    3[COMMON] unsigned int 
  2933 ;;  multiplicand    2    5[COMMON] unsigned int 
  2934 ;; Auto vars:     Size  Location     Type
  2935 ;;  product         2    0[BANK0 ] unsigned int 
  2936 ;; Return value:  Size  Location     Type
  2937 ;;                  2    3[COMMON] unsigned int 
  2938 ;; Registers used:
  2939 ;;		wreg, status,2, status,0
  2940 ;; Tracked objects:
  2941 ;;		On entry : 0/0
  2942 ;;		On exit  : 0/0
  2943 ;;		Unchanged: 0/0
  2944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2945 ;;      Params:         4       0       0       0       0
  2946 ;;      Locals:         0       2       0       0       0
  2947 ;;      Temps:          0       0       0       0       0
  2948 ;;      Totals:         4       2       0       0       0
  2949 ;;Total ram usage:        6 bytes
  2950 ;; Hardware stack levels used:    1
  2951 ;; Hardware stack levels required when called:    1
  2952 ;; This function calls:
  2953 ;;		Nothing
  2954 ;; This function is called by:
  2955 ;;		_ADC_CH0
  2956 ;;		_ADC_CH1
  2957 ;; This function uses a non-reentrant model
  2958 ;;
  2959                           
  2960                           
  2961                           ;psect for function ___wmul
  2962  0458                     ___wmul:
  2963  0458                     l1672:	
  2964                           ;incstack = 0
  2965                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  2966                           
  2967  0458  1283               	bcf	3,5	;RP0=0, select bank0
  2968  0459  1303               	bcf	3,6	;RP1=0, select bank0
  2969  045A  01CC               	clrf	___wmul@product
  2970  045B  01CD               	clrf	___wmul@product+1
  2971  045C                     l1674:
  2972  045C  1C73               	btfss	___wmul@multiplier,0
  2973  045D  2C5F               	goto	u941
  2974  045E  2C60               	goto	u940
  2975  045F                     u941:
  2976  045F  2C68               	goto	l326
  2977  0460                     u940:
  2978  0460                     l1676:
  2979  0460  0875               	movf	___wmul@multiplicand,w
  2980  0461  1283               	bcf	3,5	;RP0=0, select bank0
  2981  0462  1303               	bcf	3,6	;RP1=0, select bank0
  2982  0463  07CC               	addwf	___wmul@product,f
  2983  0464  1803               	skipnc
  2984  0465  0ACD               	incf	___wmul@product+1,f
  2985  0466  0876               	movf	___wmul@multiplicand+1,w
  2986  0467  07CD               	addwf	___wmul@product+1,f
  2987  0468                     l326:
  2988  0468  3001               	movlw	1
  2989  0469                     u955:
  2990  0469  1003               	clrc
  2991  046A  0DF5               	rlf	___wmul@multiplicand,f
  2992  046B  0DF6               	rlf	___wmul@multiplicand+1,f
  2993  046C  3EFF               	addlw	-1
  2994  046D  1D03               	skipz
  2995  046E  2C69               	goto	u955
  2996  046F                     l1678:
  2997  046F  3001               	movlw	1
  2998  0470                     u965:
  2999  0470  1003               	clrc
  3000  0471  0CF4               	rrf	___wmul@multiplier+1,f
  3001  0472  0CF3               	rrf	___wmul@multiplier,f
  3002  0473  3EFF               	addlw	-1
  3003  0474  1D03               	skipz
  3004  0475  2C70               	goto	u965
  3005  0476                     l1680:
  3006  0476  0873               	movf	___wmul@multiplier,w
  3007  0477  0474               	iorwf	___wmul@multiplier+1,w
  3008  0478  1D03               	btfss	3,2
  3009  0479  2C7B               	goto	u971
  3010  047A  2C7C               	goto	u970
  3011  047B                     u971:
  3012  047B  2C5C               	goto	l1674
  3013  047C                     u970:
  3014  047C                     l1682:
  3015  047C  1283               	bcf	3,5	;RP0=0, select bank0
  3016  047D  1303               	bcf	3,6	;RP1=0, select bank0
  3017  047E  084D               	movf	___wmul@product+1,w
  3018  047F  00F4               	movwf	?___wmul+1
  3019  0480  084C               	movf	___wmul@product,w
  3020  0481  00F3               	movwf	?___wmul
  3021  0482                     l328:
  3022  0482  0008               	return
  3023  0483                     __end_of___wmul:
  3024                           
  3025                           	psect	text17
  3026  01BD                     __ptext17:	
  3027 ;; *************** function ___awdiv *****************
  3028 ;; Defined at:
  3029 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\awdiv.c"
  3030 ;; Parameters:    Size  Location     Type
  3031 ;;  divisor         2    2[BANK0 ] int 
  3032 ;;  dividend        2    4[BANK0 ] int 
  3033 ;; Auto vars:     Size  Location     Type
  3034 ;;  quotient        2    8[BANK0 ] int 
  3035 ;;  sign            1    7[BANK0 ] unsigned char 
  3036 ;;  counter         1    6[BANK0 ] unsigned char 
  3037 ;; Return value:  Size  Location     Type
  3038 ;;                  2    2[BANK0 ] int 
  3039 ;; Registers used:
  3040 ;;		wreg, status,2, status,0
  3041 ;; Tracked objects:
  3042 ;;		On entry : 0/0
  3043 ;;		On exit  : 0/0
  3044 ;;		Unchanged: 0/0
  3045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3046 ;;      Params:         0       4       0       0       0
  3047 ;;      Locals:         0       4       0       0       0
  3048 ;;      Temps:          1       0       0       0       0
  3049 ;;      Totals:         1       8       0       0       0
  3050 ;;Total ram usage:        9 bytes
  3051 ;; Hardware stack levels used:    1
  3052 ;; Hardware stack levels required when called:    1
  3053 ;; This function calls:
  3054 ;;		Nothing
  3055 ;; This function is called by:
  3056 ;;		_ADC_CH0
  3057 ;;		_ADC_CH1
  3058 ;; This function uses a non-reentrant model
  3059 ;;
  3060                           
  3061                           
  3062                           ;psect for function ___awdiv
  3063  01BD                     ___awdiv:
  3064  01BD                     l1298:	
  3065                           ;incstack = 0
  3066                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  3067                           
  3068  01BD  1283               	bcf	3,5	;RP0=0, select bank0
  3069  01BE  1303               	bcf	3,6	;RP1=0, select bank0
  3070  01BF  01D3               	clrf	___awdiv@sign
  3071  01C0                     l1300:
  3072  01C0  1FCF               	btfss	___awdiv@divisor+1,7
  3073  01C1  29C3               	goto	u531
  3074  01C2  29C4               	goto	u530
  3075  01C3                     u531:
  3076  01C3  29CB               	goto	l1306
  3077  01C4                     u530:
  3078  01C4                     l1302:
  3079  01C4  09CE               	comf	___awdiv@divisor,f
  3080  01C5  09CF               	comf	___awdiv@divisor+1,f
  3081  01C6  0ACE               	incf	___awdiv@divisor,f
  3082  01C7  1903               	skipnz
  3083  01C8  0ACF               	incf	___awdiv@divisor+1,f
  3084  01C9                     l1304:
  3085  01C9  01D3               	clrf	___awdiv@sign
  3086  01CA  0AD3               	incf	___awdiv@sign,f
  3087  01CB                     l1306:
  3088  01CB  1FD1               	btfss	___awdiv@dividend+1,7
  3089  01CC  29CE               	goto	u541
  3090  01CD  29CF               	goto	u540
  3091  01CE                     u541:
  3092  01CE  29D8               	goto	l1312
  3093  01CF                     u540:
  3094  01CF                     l1308:
  3095  01CF  09D0               	comf	___awdiv@dividend,f
  3096  01D0  09D1               	comf	___awdiv@dividend+1,f
  3097  01D1  0AD0               	incf	___awdiv@dividend,f
  3098  01D2  1903               	skipnz
  3099  01D3  0AD1               	incf	___awdiv@dividend+1,f
  3100  01D4                     l1310:
  3101  01D4  3001               	movlw	1
  3102  01D5  00F7               	movwf	??___awdiv
  3103  01D6  0877               	movf	??___awdiv,w
  3104  01D7  06D3               	xorwf	___awdiv@sign,f
  3105  01D8                     l1312:
  3106  01D8  01D4               	clrf	___awdiv@quotient
  3107  01D9  01D5               	clrf	___awdiv@quotient+1
  3108  01DA                     l1314:
  3109  01DA  084E               	movf	___awdiv@divisor,w
  3110  01DB  044F               	iorwf	___awdiv@divisor+1,w
  3111  01DC  1903               	btfsc	3,2
  3112  01DD  29DF               	goto	u551
  3113  01DE  29E0               	goto	u550
  3114  01DF                     u551:
  3115  01DF  2A17               	goto	l1334
  3116  01E0                     u550:
  3117  01E0                     l1316:
  3118  01E0  01D2               	clrf	___awdiv@counter
  3119  01E1  0AD2               	incf	___awdiv@counter,f
  3120  01E2  29EE               	goto	l1322
  3121  01E3                     l1318:
  3122  01E3  3001               	movlw	1
  3123  01E4                     u565:
  3124  01E4  1003               	clrc
  3125  01E5  0DCE               	rlf	___awdiv@divisor,f
  3126  01E6  0DCF               	rlf	___awdiv@divisor+1,f
  3127  01E7  3EFF               	addlw	-1
  3128  01E8  1D03               	skipz
  3129  01E9  29E4               	goto	u565
  3130  01EA                     l1320:
  3131  01EA  3001               	movlw	1
  3132  01EB  00F7               	movwf	??___awdiv
  3133  01EC  0877               	movf	??___awdiv,w
  3134  01ED  07D2               	addwf	___awdiv@counter,f
  3135  01EE                     l1322:
  3136  01EE  1FCF               	btfss	___awdiv@divisor+1,7
  3137  01EF  29F1               	goto	u571
  3138  01F0  29F2               	goto	u570
  3139  01F1                     u571:
  3140  01F1  29E3               	goto	l1318
  3141  01F2                     u570:
  3142  01F2                     l1324:
  3143  01F2  3001               	movlw	1
  3144  01F3                     u585:
  3145  01F3  1003               	clrc
  3146  01F4  0DD4               	rlf	___awdiv@quotient,f
  3147  01F5  0DD5               	rlf	___awdiv@quotient+1,f
  3148  01F6  3EFF               	addlw	-1
  3149  01F7  1D03               	skipz
  3150  01F8  29F3               	goto	u585
  3151  01F9  084F               	movf	___awdiv@divisor+1,w
  3152  01FA  0251               	subwf	___awdiv@dividend+1,w
  3153  01FB  1D03               	skipz
  3154  01FC  29FF               	goto	u595
  3155  01FD  084E               	movf	___awdiv@divisor,w
  3156  01FE  0250               	subwf	___awdiv@dividend,w
  3157  01FF                     u595:
  3158  01FF  1C03               	skipc
  3159  0200  2A02               	goto	u591
  3160  0201  2A03               	goto	u590
  3161  0202                     u591:
  3162  0202  2A0A               	goto	l1330
  3163  0203                     u590:
  3164  0203                     l1326:
  3165  0203  084E               	movf	___awdiv@divisor,w
  3166  0204  02D0               	subwf	___awdiv@dividend,f
  3167  0205  084F               	movf	___awdiv@divisor+1,w
  3168  0206  1C03               	skipc
  3169  0207  03D1               	decf	___awdiv@dividend+1,f
  3170  0208  02D1               	subwf	___awdiv@dividend+1,f
  3171  0209                     l1328:
  3172  0209  1454               	bsf	___awdiv@quotient,0
  3173  020A                     l1330:
  3174  020A  3001               	movlw	1
  3175  020B                     u605:
  3176  020B  1003               	clrc
  3177  020C  0CCF               	rrf	___awdiv@divisor+1,f
  3178  020D  0CCE               	rrf	___awdiv@divisor,f
  3179  020E  3EFF               	addlw	-1
  3180  020F  1D03               	skipz
  3181  0210  2A0B               	goto	u605
  3182  0211                     l1332:
  3183  0211  3001               	movlw	1
  3184  0212  02D2               	subwf	___awdiv@counter,f
  3185  0213  1D03               	btfss	3,2
  3186  0214  2A16               	goto	u611
  3187  0215  2A17               	goto	u610
  3188  0216                     u611:
  3189  0216  29F2               	goto	l1324
  3190  0217                     u610:
  3191  0217                     l1334:
  3192  0217  0853               	movf	___awdiv@sign,w
  3193  0218  1903               	btfsc	3,2
  3194  0219  2A1B               	goto	u621
  3195  021A  2A1C               	goto	u620
  3196  021B                     u621:
  3197  021B  2A21               	goto	l1338
  3198  021C                     u620:
  3199  021C                     l1336:
  3200  021C  09D4               	comf	___awdiv@quotient,f
  3201  021D  09D5               	comf	___awdiv@quotient+1,f
  3202  021E  0AD4               	incf	___awdiv@quotient,f
  3203  021F  1903               	skipnz
  3204  0220  0AD5               	incf	___awdiv@quotient+1,f
  3205  0221                     l1338:
  3206  0221  0855               	movf	___awdiv@quotient+1,w
  3207  0222  00CF               	movwf	?___awdiv+1
  3208  0223  0854               	movf	___awdiv@quotient,w
  3209  0224  00CE               	movwf	?___awdiv
  3210  0225                     l479:
  3211  0225  0008               	return
  3212  0226                     __end_of___awdiv:
  3213                           
  3214                           	psect	text18
  3215  0565                     __ptext18:	
  3216 ;; *************** function _ADC_val *****************
  3217 ;; Defined at:
  3218 ;;		line 12 in file "ADC.c"
  3219 ;; Parameters:    Size  Location     Type
  3220 ;;  ADRES_L         1    wreg     unsigned char 
  3221 ;;  ADRES_H         1    3[COMMON] unsigned char 
  3222 ;; Auto vars:     Size  Location     Type
  3223 ;;  ADRES_L         1    0[COMMON] unsigned char 
  3224 ;; Return value:  Size  Location     Type
  3225 ;;                  1    wreg      unsigned char 
  3226 ;; Registers used:
  3227 ;;		wreg
  3228 ;; Tracked objects:
  3229 ;;		On entry : 0/0
  3230 ;;		On exit  : 0/0
  3231 ;;		Unchanged: 0/0
  3232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3233 ;;      Params:         1       0       0       0       0
  3234 ;;      Locals:         0       0       0       0       0
  3235 ;;      Temps:          1       0       0       0       0
  3236 ;;      Totals:         2       0       0       0       0
  3237 ;;Total ram usage:        2 bytes
  3238 ;; Hardware stack levels used:    1
  3239 ;; Hardware stack levels required when called:    1
  3240 ;; This function calls:
  3241 ;;		Nothing
  3242 ;; This function is called by:
  3243 ;;		_ADC_CH0
  3244 ;;		_ADC_CH1
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           
  3249                           ;psect for function _ADC_val
  3250  0565                     _ADC_val:
  3251  0565                     l1260:	
  3252                           ;incstack = 0
  3253                           ; Regs used in _ADC_val: [wreg]
  3254                           
  3255                           
  3256                           ;ADC.c: 13:     VALOR_ADC = ((ADRESL << 8) | ADRESH);
  3257  0565  1283               	bcf	3,5	;RP0=0, select bank0
  3258  0566  1303               	bcf	3,6	;RP1=0, select bank0
  3259  0567  081E               	movf	30,w	;volatile
  3260  0568  00F4               	movwf	??_ADC_val
  3261  0569  0874               	movf	??_ADC_val,w
  3262  056A  00A6               	movwf	_VALOR_ADC
  3263                           
  3264                           ;ADC.c: 15:     return VALOR_ADC;
  3265  056B  0826               	movf	_VALOR_ADC,w
  3266  056C                     l143:
  3267  056C  0008               	return
  3268  056D                     __end_of_ADC_val:
  3269                           
  3270                           	psect	text19
  3271  04D2                     __ptext19:	
  3272 ;; *************** function _ADC_ch *****************
  3273 ;; Defined at:
  3274 ;;		line 18 in file "ADC.c"
  3275 ;; Parameters:    Size  Location     Type
  3276 ;;  channel         2    3[COMMON] unsigned short 
  3277 ;; Auto vars:     Size  Location     Type
  3278 ;;		None
  3279 ;; Return value:  Size  Location     Type
  3280 ;;                  2    3[COMMON] unsigned int 
  3281 ;; Registers used:
  3282 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3283 ;; Tracked objects:
  3284 ;;		On entry : 0/0
  3285 ;;		On exit  : 0/0
  3286 ;;		Unchanged: 0/0
  3287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3288 ;;      Params:         2       0       0       0       0
  3289 ;;      Locals:         0       0       0       0       0
  3290 ;;      Temps:          0       0       0       0       0
  3291 ;;      Totals:         2       0       0       0       0
  3292 ;;Total ram usage:        2 bytes
  3293 ;; Hardware stack levels used:    1
  3294 ;; Hardware stack levels required when called:    1
  3295 ;; This function calls:
  3296 ;;		Nothing
  3297 ;; This function is called by:
  3298 ;;		_ADC_CH0
  3299 ;;		_ADC_CH1
  3300 ;; This function uses a non-reentrant model
  3301 ;;
  3302                           
  3303                           
  3304                           ;psect for function _ADC_ch
  3305  04D2                     _ADC_ch:
  3306  04D2                     l1250:	
  3307                           ;incstack = 0
  3308                           ; Regs used in _ADC_ch: [wreg-fsr0h+status,2+status,0]
  3309                           
  3310                           
  3311                           ;ADC.c: 19:      switch (channel) {
  3312  04D2  2CE8               	goto	l1254
  3313  04D3                     l147:	
  3314                           ;ADC.c: 20:         case 0:
  3315                           
  3316                           
  3317                           ;ADC.c: 21:             ADCON0bits.CHS3 = 0;
  3318  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  3319  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  3320  04D5  129F               	bcf	31,5	;volatile
  3321                           
  3322                           ;ADC.c: 22:             ADCON0bits.CHS2 = 0;
  3323  04D6  121F               	bcf	31,4	;volatile
  3324                           
  3325                           ;ADC.c: 23:             ADCON0bits.CHS1 = 0;
  3326  04D7  119F               	bcf	31,3	;volatile
  3327                           
  3328                           ;ADC.c: 24:             ADCON0bits.CHS0 = 0;
  3329  04D8  111F               	bcf	31,2	;volatile
  3330                           
  3331                           ;ADC.c: 26:             break;
  3332  04D9  2CF5               	goto	l151
  3333  04DA                     l149:	
  3334                           ;ADC.c: 27:         case 1:
  3335                           
  3336                           
  3337                           ;ADC.c: 28:             ADCON0bits.CHS3 = 0;
  3338  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  3339  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  3340  04DC  129F               	bcf	31,5	;volatile
  3341                           
  3342                           ;ADC.c: 29:             ADCON0bits.CHS2 = 0;
  3343  04DD  121F               	bcf	31,4	;volatile
  3344                           
  3345                           ;ADC.c: 30:             ADCON0bits.CHS1 = 0;
  3346  04DE  119F               	bcf	31,3	;volatile
  3347                           
  3348                           ;ADC.c: 31:             ADCON0bits.CHS0 = 1;
  3349  04DF  151F               	bsf	31,2	;volatile
  3350                           
  3351                           ;ADC.c: 32:             break;
  3352  04E0  2CF5               	goto	l151
  3353  04E1                     l150:	
  3354                           ;ADC.c: 33:         default:
  3355                           
  3356                           
  3357                           ;ADC.c: 34:             ADCON0bits.CHS3 = 0;
  3358  04E1  1283               	bcf	3,5	;RP0=0, select bank0
  3359  04E2  1303               	bcf	3,6	;RP1=0, select bank0
  3360  04E3  129F               	bcf	31,5	;volatile
  3361                           
  3362                           ;ADC.c: 35:             ADCON0bits.CHS2 = 0;
  3363  04E4  121F               	bcf	31,4	;volatile
  3364                           
  3365                           ;ADC.c: 36:             ADCON0bits.CHS1 = 0;
  3366  04E5  119F               	bcf	31,3	;volatile
  3367                           
  3368                           ;ADC.c: 37:             ADCON0bits.CHS0 = 0;
  3369  04E6  111F               	bcf	31,2	;volatile
  3370                           
  3371                           ;ADC.c: 38:             break;
  3372  04E7  2CF5               	goto	l151
  3373  04E8                     l1254:
  3374                           
  3375                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3376                           ; Switch size 1, requested type "simple"
  3377                           ; Number of cases is 1, Range of values is 0 to 0
  3378                           ; switch strategies available:
  3379                           ; Name         Instructions Cycles
  3380                           ; simple_byte            4     3 (average)
  3381                           ; direct_byte           11     8 (fixed)
  3382                           ; jumptable            260     6 (fixed)
  3383                           ;	Chosen strategy is simple_byte
  3384  04E8  0874               	movf	ADC_ch@channel+1,w
  3385  04E9  3A00               	xorlw	0	; case 0
  3386  04EA  1903               	skipnz
  3387  04EB  2CED               	goto	l1922
  3388  04EC  2CE1               	goto	l150
  3389  04ED                     l1922:
  3390                           
  3391                           ; Switch size 1, requested type "simple"
  3392                           ; Number of cases is 2, Range of values is 0 to 1
  3393                           ; switch strategies available:
  3394                           ; Name         Instructions Cycles
  3395                           ; simple_byte            7     4 (average)
  3396                           ; direct_byte           14     8 (fixed)
  3397                           ; jumptable            260     6 (fixed)
  3398                           ;	Chosen strategy is simple_byte
  3399  04ED  0873               	movf	ADC_ch@channel,w
  3400  04EE  3A00               	xorlw	0	; case 0
  3401  04EF  1903               	skipnz
  3402  04F0  2CD3               	goto	l147
  3403  04F1  3A01               	xorlw	1	; case 1
  3404  04F2  1903               	skipnz
  3405  04F3  2CDA               	goto	l149
  3406  04F4  2CE1               	goto	l150
  3407  04F5                     l151:
  3408  04F5  0008               	return
  3409  04F6                     __end_of_ADC_ch:
  3410                           
  3411                           	psect	text20
  3412  0483                     __ptext20:	
  3413 ;; *************** function _ISR *****************
  3414 ;; Defined at:
  3415 ;;		line 65 in file "main.c"
  3416 ;; Parameters:    Size  Location     Type
  3417 ;;		None
  3418 ;; Auto vars:     Size  Location     Type
  3419 ;;		None
  3420 ;; Return value:  Size  Location     Type
  3421 ;;                  1    wreg      void 
  3422 ;; Registers used:
  3423 ;;		wreg, status,2, status,0
  3424 ;; Tracked objects:
  3425 ;;		On entry : 0/0
  3426 ;;		On exit  : 0/0
  3427 ;;		Unchanged: 0/0
  3428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3429 ;;      Params:         0       0       0       0       0
  3430 ;;      Locals:         0       0       0       0       0
  3431 ;;      Temps:          3       0       0       0       0
  3432 ;;      Totals:         3       0       0       0       0
  3433 ;;Total ram usage:        3 bytes
  3434 ;; Hardware stack levels used:    1
  3435 ;; This function calls:
  3436 ;;		Nothing
  3437 ;; This function is called by:
  3438 ;;		Interrupt level 1
  3439 ;; This function uses a non-reentrant model
  3440 ;;
  3441                           
  3442                           
  3443                           ;psect for function _ISR
  3444  0483                     _ISR:
  3445  0483                     i1l1558:
  3446                           
  3447                           ;main.c: 66:     if (RCIF == 1) {
  3448  0483  1283               	bcf	3,5	;RP0=0, select bank0
  3449  0484  1303               	bcf	3,6	;RP1=0, select bank0
  3450  0485  1E8C               	btfss	12,5	;volatile
  3451  0486  2C88               	goto	u91_21
  3452  0487  2C89               	goto	u91_20
  3453  0488                     u91_21:
  3454  0488  2CA5               	goto	i1l107
  3455  0489                     u91_20:
  3456  0489                     i1l1560:
  3457                           
  3458                           ;main.c: 67:         USART_LEER = RCREG;
  3459  0489  081A               	movf	26,w	;volatile
  3460  048A  00F0               	movwf	??_ISR
  3461  048B  0870               	movf	??_ISR,w
  3462  048C  00F8               	movwf	_USART_LEER
  3463  048D                     i1l1562:
  3464                           
  3465                           ;main.c: 68:         if (USART_LEER == '+') {
  3466  048D  302B               	movlw	43
  3467  048E  0678               	xorwf	_USART_LEER,w
  3468  048F  1D03               	btfss	3,2
  3469  0490  2C92               	goto	u92_21
  3470  0491  2C93               	goto	u92_20
  3471  0492                     u92_21:
  3472  0492  2C99               	goto	i1l1566
  3473  0493                     u92_20:
  3474  0493                     i1l1564:
  3475                           
  3476                           ;main.c: 69:             cont = cont + 1;
  3477  0493  0827               	movf	_cont,w
  3478  0494  3E01               	addlw	1
  3479  0495  00F0               	movwf	??_ISR
  3480  0496  0870               	movf	??_ISR,w
  3481  0497  00A7               	movwf	_cont
  3482                           
  3483                           ;main.c: 70:             }
  3484  0498  2CA4               	goto	i1l1570
  3485  0499                     i1l1566:
  3486  0499  302D               	movlw	45
  3487  049A  0678               	xorwf	_USART_LEER,w
  3488  049B  1D03               	btfss	3,2
  3489  049C  2C9E               	goto	u93_21
  3490  049D  2C9F               	goto	u93_20
  3491  049E                     u93_21:
  3492  049E  2CA4               	goto	i1l1570
  3493  049F                     u93_20:
  3494  049F                     i1l1568:
  3495                           
  3496                           ;main.c: 72:             cont = cont - 1;
  3497  049F  0827               	movf	_cont,w
  3498  04A0  3EFF               	addlw	255
  3499  04A1  00F0               	movwf	??_ISR
  3500  04A2  0870               	movf	??_ISR,w
  3501  04A3  00A7               	movwf	_cont
  3502  04A4                     i1l1570:
  3503                           
  3504                           ;main.c: 74:         USART_LEER = 0;
  3505  04A4  01F8               	clrf	_USART_LEER
  3506  04A5                     i1l107:
  3507  04A5  0872               	movf	??_ISR+2,w
  3508  04A6  008A               	movwf	10
  3509  04A7  0E71               	swapf	??_ISR+1,w
  3510  04A8  0083               	movwf	3
  3511  04A9  0EFE               	swapf	btemp,f
  3512  04AA  0E7E               	swapf	btemp,w
  3513  04AB  0009               	retfie
  3514  04AC                     __end_of_ISR:
  3515  007E                     btemp	set	126	;btemp
  3516  007E                     wtemp0	set	126
  3517                           
  3518                           	psect	intentry
  3519  0004                     __pintentry:	
  3520                           ;incstack = 0
  3521                           ; Regs used in _ISR: [wreg+status,2+status,0]
  3522                           
  3523  0004                     interrupt_function:
  3524  007E                     saved_w	set	btemp
  3525  0004  00FE               	movwf	btemp
  3526  0005  0E03               	swapf	3,w
  3527  0006  00F1               	movwf	??_ISR+1
  3528  0007  080A               	movf	10,w
  3529  0008  00F2               	movwf	??_ISR+2
  3530  0009  120A  118A  2C83   	ljmp	_ISR
  3531                           
  3532                           	psect	config
  3533                           
  3534                           ;Config register CONFIG1 @ 0x2007
  3535                           ;	Oscillator Selection bits
  3536                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  3537                           ;	Watchdog Timer Enable bit
  3538                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  3539                           ;	Power-up Timer Enable bit
  3540                           ;	PWRTE = OFF, PWRT disabled
  3541                           ;	RE3/MCLR pin function select bit
  3542                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  3543                           ;	Code Protection bit
  3544                           ;	CP = OFF, Program memory code protection is disabled
  3545                           ;	Data Code Protection bit
  3546                           ;	CPD = OFF, Data memory code protection is disabled
  3547                           ;	Brown Out Reset Selection bits
  3548                           ;	BOREN = ON, BOR enabled
  3549                           ;	Internal External Switchover bit
  3550                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  3551                           ;	Fail-Safe Clock Monitor Enabled bit
  3552                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  3553                           ;	Low Voltage Programming Enable bit
  3554                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  3555                           ;	In-Circuit Debugger Mode bit
  3556                           ;	DEBUG = 0x1, unprogrammed default
  3557  2007                     	org	8199
  3558  2007  23D2               	dw	9170
  3559                           
  3560                           ;Config register CONFIG2 @ 0x2008
  3561                           ;	Brown-out Reset Selection bit
  3562                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  3563                           ;	Flash Program Memory Self Write Enable bits
  3564                           ;	WRT = OFF, Write protection off
  3565  2008                     	org	8200
  3566  2008  3FFF               	dw	16383

Data Sizes:
    Strings     43
    Constant    10
    Data        0
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     29      73
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 16
		 -> STR_5(CODE[16]), STR_4(CODE[15]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> data2(BANK0[16]), data1(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    USART_STRING@a	PTR unsigned char  size(1) Largest target is 20
		 -> data1(BANK0[20]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 16
		 -> data2(BANK0[16]), STR_3(CODE[4]), STR_2(CODE[4]), STR_1(CODE[4]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _USART_STRING->_USART_ESCRITURA
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port
    _ADC_CH1->___awdiv
    _ADC_CH0->___awdiv
    ___awdiv->___wmul

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _ADC_CH1->___awdiv
    _ADC_CH0->___awdiv
    ___awdiv->___wmul

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    6020
                                             26 BANK0      3     3      0
                            _ADC_CH0
                            _ADC_CH1
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                    _USART_ESCRITURA
                       _USART_STRING
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             25    18      7    1680
                                              9 BANK0     17    10      7
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _USART_STRING                                         3     3      0     145
                                              4 COMMON     3     3      0
                    _USART_ESCRITURA
 ---------------------------------------------------------------------------------
 (2) _USART_ESCRITURA                                      1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     552
                                              6 COMMON     2     0      2
                                              0 BANK0      5     5      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0      62
                                              4 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       4     3      1     614
                                              7 COMMON     1     0      1
                                              0 BANK0      3     3      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      93
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      62
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0      62
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ADC_CH1                                              2     2      0    1426
                                             10 BANK0      2     2      0
                             _ADC_ch
                            _ADC_val
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _ADC_CH0                                              2     2      0    1426
                                             10 BANK0      2     2      0
                             _ADC_ch
                            _ADC_val
                            ___awdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     496
                                              3 COMMON     4     0      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     604
                                              7 COMMON     1     1      0
                                              2 BANK0      8     4      4
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _ADC_val                                              3     2      1     152
                                              3 COMMON     2     1      1
 ---------------------------------------------------------------------------------
 (2) _ADC_ch                                               2     0      2     174
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ADC_CH0
     _ADC_ch
     _ADC_val
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _ADC_CH1
     _ADC_ch
     _ADC_val
     ___awdiv
       ___wmul (ARG)
     ___wmul
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _USART_ESCRITURA
   _USART_STRING
     _USART_ESCRITURA
   _setup
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       B       1       78.6%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      54       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     1D      49       5       91.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      54      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Feb 12 22:31:52 2021

                        pc 0002               ___awdiv@sign 0053                         fsr 0004  
      ___wmul@multiplicand 0075                        l130 0279                        l203 0552  
                      l124 02CC                        l212 0513                        l150 04E1  
                      l206 055C                        l118 0457                        l151 04F5  
                      l143 056C                        l162 0572                        l322 0108  
                      l147 04D3                        l180 0543                        l149 04DA  
                      l165 052D                        l326 0468                        l174 04D1  
                      l328 0482                        l168 0550                        l177 031C  
                      l186 03A8                        l608 0429                        l479 0225  
                      l598 0362                        _RE0 0048                        _RE1 0049  
                      u610 0217                        u530 01C4                        u611 0216  
                      u531 01C3                        u620 021C                        u540 01CF  
                      u700 03F6                        _ISR 0483                        u621 021B  
                      u605 020B                        u541 01CE                        u701 03F5  
                      u550 01E0                        u551 01DF                        u480 0558  
                      u720 0408                        u481 0557                        u721 0407  
                      u570 01F2                        u730 0412                        u571 01F1  
                      u731 0411                        u715 03FA                        u900 0513  
                      u565 01E4                        u901 0512                        u590 0203  
                      u750 0425                        u591 0202                        u751 0424  
                      u735 040E                        u585 01F3                        u745 0419  
                      u595 01FF                        u940 0460                        u941 045F  
                      u970 047C                        u971 047B                        u955 0469  
                      u980 0327                        u965 0470                        u981 0326  
                      u995 032B            __end_of_ADC_CH0 02CD            __end_of_ADC_CH1 027A  
                      fsr0 0004                        indf 0000            __end_of_ADC_val 056D  
                     ?_ISR 0070                       l1300 01C0                       l1310 01D4  
                     l1302 01C4                       l1320 01EA                       l1312 01D8  
                     l1304 01C9                       l1400 0443                       l1250 04D2  
                     l1330 020A                       l1322 01EE                       l1314 01DA  
                     l1306 01CB                       l1410 0450                       l1402 044A  
                     l1260 0565                       l1332 0211                       l1324 01F2  
                     l1316 01E0                       l1308 01CF                       l1412 0451  
                     l1404 044B                       l1254 04E8                       l1326 0203  
                     l1318 01E3                       l1334 0217                       l1246 0552  
                     l1414 0452                       l1406 044C                       l1336 021C  
                     l1328 0209                       l1248 0558                       l1416 0455  
                     l1408 044E                       l1338 0221                       l1418 0456  
                     l1370 03F6                       l1700 034A                       l1380 0412  
                     l1372 03F9                       l1550 04F7                       l1390 042A  
                     l1702 0350                       l1382 0418                       l1374 0400  
                     l1720 02F3                       l1712 02CD                       l1552 04F9  
                     l1392 042E                       l1704 0351                       l1384 041F  
                     l1376 0404                       l1368 03EE                       l1800 0067  
                     l1298 01BD                       l1650 056E                       l1722 0544  
                     l1714 02D3                       l1730 04C0                       l1554 0504  
                     l1394 042F                       l1706 0358                       l1378 0408  
                     l1386 0425                       l1810 0072                       l1802 006B  
                     l1660 052A                       l1652 0515                       l1716 02DD  
                     l1732 04C6                       l1724 04AF                       l1740 0384  
                     l1556 0508                       l1396 043E                       l1708 035E  
                     l1820 00A5                       l1804 0070                       l1750 0286  
                     l1654 0518                       l1718 02ED                       l1734 04CB  
                     l1726 04B4                       l1670 0540                       l1662 052F  
                     l1742 038C                       l1398 0442                       l1830 00E9  
                     l1822 00A9                       l1814 008E                       l1680 0476  
                     l1672 0458                       l1760 02C8                       l1752 0287  
                     l1744 027A                       l1656 051E                       l1728 04B9  
                     l1664 0532                       l1736 0363                       l1824 00AE  
                     l1816 0098                       l1920 004C                       l1832 00F2  
                     l1922 04ED                       l1682 047C                       l1674 045C  
                     l1754 028E                       l1746 0282                       l1770 0234  
                     l1762 0226                       l1658 0521                       l1666 0538  
                     l1738 0368                       l1690 0327                       l1826 00DE  
                     l1818 009E                       l1834 0104                       l1850 011B  
                     l1842 0109                       l1676 0460                       l1756 0292  
                     l1748 0285                       l1772 023B                       l1764 022F  
                     l1668 053B                       l1692 032A                       l1828 00E5  
                     l1780 0022                       l1860 014D                       l1852 0123  
                     l1844 010E                       l1678 046F                       l1758 02A3  
                     l1774 023F                       l1766 0232                       l1694 0331  
                     l1686 031D                       l1782 0027                       l1870 0181  
                     l1862 0156                       l1854 012C                       l1846 0111  
                     l1776 0250                       l1768 0233                       l1696 0335  
                     l1688 0321                       l1792 003A                       l1784 002D  
                     l1872 0187                       l1864 015B                       l1856 0138  
                     l1848 0116                       l1778 0275                       l1698 0339  
                     l1794 0057                       l1786 0034                       l1874 018D  
                     l1866 0160                       l1858 0141                       l1796 005F  
                     l1788 0039                       l1876 01A8                       l1868 017B  
                     l1798 0063                       l1878 01B0                       STR_1 03E2  
                     STR_2 03E6                       STR_3 03EA                       STR_4 03D3  
                     STR_5 03C3                       u1000 0339                       u1001 0338  
                     u1100 02CC                       u1020 034A                       u1101 02CB  
                     u1021 0349                       u1110 0279                       u1111 0278  
                     u1015 033A                       u1040 035E                       u1120 002D  
                     u1041 035D                       u1025 0346                       u1121 002C  
                     u1050 04B4                       u1130 0067                       u1051 04B3  
                     u1035 0352                       u1131 0066                       u1060 04C6  
                     u1140 008D                       u1061 04C5                       u1141 008C  
                     u1070 0372                       u1150 0098                       u1207 02D9  
                     u1151 0097                       u1080 0396                       u1160 009E  
                     u1217 02E9                       u1161 009D                       u1145 0089  
                     u1090 03A8                       u1170 00F2                       u1227 02F9  
                     u1091 03A7                       u1171 00F1                       u1180 0104  
                     u1237 0525                       u1181 0103                       u1247 0238  
                     u1257 028B                       u1197 053D                       _RCIF 0065  
                     _VAL1 0024                       _VAL2 0022                       _TRMT 04C1  
        ?_Lcd_Write_String 0076                       _cont 0027                       _main 0109  
                     btemp 007E                       start 000C         ??_Lcd_Write_String 004C  
          __end_of_Lcd_Cmd 052E                      ??_ISR 0070                      ?_main 0070  
          __end_of___awdiv 0226                      _ANSEL 0188            ___awdiv@divisor 004E  
          __end_of___lwdiv 0363                      i1l107 04A5            __end_of___lwmod 042A  
          ___awdiv@counter 0052                      _RCREG 001A                      _SPBRG 0099  
                    _PORTA 0005                      _PORTB 0006                      _PORTC 0007  
                    _PORTD 0008                      _PORTE 0009    __size_of_Lcd_Set_Cursor 0026  
                    _TRISA 0085                      _TRISB 0086                      _TRISC 0087  
                    _TRISD 0088                      _TRISE 0089                      u91_20 0489  
                    u91_21 0488                      u92_20 0493                      u92_21 0492  
                    u93_20 049F                      u93_21 049E                      _TXREG 0019  
                    _data1 0028                      _data2 003C            __end_of_dpowers 03C3  
                    _setup 042A                      pclath 000A                      status 0003  
                    wtemp0 007E            __end_of_sprintf 0109             ADC_val@ADRES_H 0073  
           ADC_val@ADRES_L 0070           __end_of_Lcd_Init 031D           __end_of_Lcd_Port 0573  
          __initialization 000F               __end_of_main 01BD                  ??_ADC_CH0 0056  
                ??_ADC_CH1 0056                  ??_ADC_val 0074           USART_ESCRITURA@a 0073  
                   ??_main 0066         __size_of_Lcd_Clear 000D                     _ADCON1 009F  
                   _ADRESH 001E                     _ADRESL 009E                     _ADC_ch 04D2  
         ___awdiv@dividend 0050                     ?_setup 0070                     _ANSELH 0189  
                   i1l1560 0489                     i1l1570 04A4                     i1l1562 048D  
                   i1l1564 0493                     i1l1566 0499                     i1l1558 0483  
            USART_STRING@a 0075                     i1l1568 049F              USART_STRING@i 0076  
                   _INTCON 000B                  ??_Lcd_Cmd 0074                     _SPBRGH 009A  
  __size_of_Lcd_Write_Char 0016                     _TRISC7 043F                     ___wmul 0458  
                ??___awdiv 0077                  ??___lwdiv 0077                  ??___lwmod 0053  
         ___awdiv@quotient 0054                     saved_w 007E                  ??_sprintf 005C  
          Lcd_Set_Cursor@a 004D            Lcd_Set_Cursor@b 0077    __end_of__initialization 001B  
        __end_of_Lcd_Clear 0551             __pcstackCOMMON 0070              __end_of_setup 0458  
           _Lcd_Set_Cursor 04AC                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
                  ?_ADC_ch 0073                    ??_setup 0073                 __pbssBANK0 0020  
               __pmaintext 0109                    ?___wmul 0073                 __pintentry 0004  
                  _ADC_CH0 027A                    _ADC_CH1 0226  __size_of_Lcd_Write_String 0046  
   __end_of_Lcd_Set_Cursor 04D2                    _ADC_val 0565   __size_of_USART_ESCRITURA 000C  
               ??_Lcd_Init 004C                 ??_Lcd_Port 0073            __size_of_ADC_ch 0024  
               __stringtab 03A9             _Lcd_Write_Char 052E                    _Lcd_Cmd 0514  
                  ___awdiv 01BD            __size_of___wmul 002B                    ___lwdiv 031D  
                  ___lwmod 03EE                    _channel 0020            ?_Lcd_Set_Cursor 0077  
                  __ptext1 001F                    __ptext2 03EE                    __ptext3 031D  
                  __ptext4 042A                    __ptext5 04F6                    __ptext6 0551  
                  __ptext7 0363                    __ptext8 052E                    __ptext9 04AC  
             __size_of_ISR 0029                    _dpowers 03B9                    _sprintf 001F  
                  clrloop0 055E     __end_of_Lcd_Write_Char 0544       end_of_initialization 001B  
                _RCSTAbits 0018                  _VALOR_ADC 0026                  Lcd_Port@a 0073  
        ??_USART_ESCRITURA 0073              ?_USART_STRING 0070            ?_Lcd_Write_Char 0070  
        Lcd_Write_String@a 0076          Lcd_Write_String@i 004F             __end_of_ADC_ch 04F6  
                _TXSTAbits 0098                  _Lcd_Clear 0544             __end_of___wmul 0483  
         _Lcd_Write_String 0363        start_initialization 000F                __end_of_ISR 04AC  
           ??_USART_STRING 0074                   ??_ADC_ch 0075          __size_of_Lcd_Init 0050  
        __size_of_Lcd_Port 0006                 ?_Lcd_Clear 0070                   ??___wmul 0077  
                 ?_ADC_CH0 0070                   ?_ADC_CH1 0070            Lcd_Write_Char@a 0075  
                 ?_ADC_val 0073                __pbssCOMMON 0078                  ___latbits 0002  
            __pcstackBANK0 004C                   ?_Lcd_Cmd 0070                sprintf@flag 0060  
              sprintf@prec 0061           ___lwdiv@dividend 0075           ??_Lcd_Set_Cursor 004C  
                 ?___awdiv 004E                   ?___lwdiv 0073                   ?___lwmod 004F  
                __pstrings 03A9                   _ADC_res1 007A                   _ADC_res2 0079  
         ___lwdiv@quotient 004D                   ?_sprintf 0055             __size_of_setup 002E  
        interrupt_function 0004             ___wmul@product 004C                  clear_ram0 055D  
                 _PIE1bits 008C                   Lcd_Cmd@a 0076                   _PIR1bits 000C  
              ??_Lcd_Clear 0077       __end_of_USART_STRING 0514            _USART_ESCRITURA 0551  
         __size_of_ADC_CH0 0053           __size_of_ADC_CH1 0054                 _ADCON0bits 001F  
              __stringbase 03B8          ___wmul@multiplier 0073           __size_of_ADC_val 0008  
         ??_Lcd_Write_Char 0074                   _Lcd_Init 02CD                   _Lcd_Port 056D  
 __end_of_Lcd_Write_String 03A9           __size_of_Lcd_Cmd 001A           __size_of___awdiv 0069  
         __size_of___lwdiv 0046           __size_of___lwmod 003C         __end_of__stringtab 03B9  
               sprintf@val 0062            ___lwdiv@divisor 0073            ___lwdiv@counter 004C  
                 __ptext10 02CD                   __ptext11 0544                   __ptext20 0483  
                 __ptext12 0514                   __ptext13 056D                   __ptext14 0226  
                 __ptext15 027A                   __ptext16 0458                   __ptext17 01BD  
                 __ptext18 0565                   __ptext19 04D2           __size_of_sprintf 00EA  
            __size_of_main 00B4    __end_of_USART_ESCRITURA 055D                 _INTCONbits 000B  
            ADC_ch@channel 0073                   intlevel1 0000                  sprintf@ap 005F  
                sprintf@sp 0064           ___lwmod@dividend 0051      __size_of_USART_STRING 001E  
                stringcode 03B3         Lcd_Set_Cursor@temp 004E                 _OPTION_REG 0081  
                 sprintf@c 0065                   sprintf@f 0055            ___lwmod@divisor 004F  
          ___lwmod@counter 0054                   stringdir 03B3                   stringtab 03A9  
             _USART_STRING 04F6                 _USART_LEER 0078           ?_USART_ESCRITURA 0070  
